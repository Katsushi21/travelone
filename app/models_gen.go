// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package travelone

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/99designs/gqlgen/graphql"
)

type Account struct {
	ID           string        `json:"id"`
	Email        string        `json:"email"`
	Password     string        `json:"password"`
	Type         AccountType   `json:"type"`
	Name         string        `json:"name"`
	Age          int           `json:"age"`
	Gender       AccountGender `json:"gender"`
	Avatar       string        `json:"avatar"`
	Introduction string        `json:"introduction"`
	CreatedAt    time.Time     `json:"createdAt"`
	UpdatedAt    time.Time     `json:"updatedAt"`
	Friend       []*Friend     `json:"friend"`
	Mute         []*Mute       `json:"mute"`
	Post         []*Post       `json:"post"`
	Like         []*Like       `json:"like"`
	Comment      []*Comment    `json:"comment"`
}

type AccountInput struct {
	Email        string        `json:"email"`
	Password     string        `json:"password"`
	Type         AccountType   `json:"type"`
	Name         string        `json:"name"`
	Age          int           `json:"age"`
	Gender       AccountGender `json:"gender"`
	Avatar       string        `json:"avatar"`
	Introduction string        `json:"introduction"`
}

type Comment struct {
	ID        string    `json:"id"`
	PostID    string    `json:"postId"`
	AccountID string    `json:"accountId"`
	Body      string    `json:"body"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
	Post      *Post     `json:"post"`
	Account   *Account  `json:"account"`
}

type CommentInput struct {
	PostID    string `json:"postId"`
	AccountID string `json:"accountId"`
	Body      string `json:"body"`
}

type File struct {
	Path string `json:"path"`
}

type Friend struct {
	AccountID string   `json:"accountId"`
	FriendID  string   `json:"friendId"`
	Friend    *Account `json:"friend"`
}

type FriendInput struct {
	AccountID string `json:"accountId"`
	FriendID  string `json:"friendId"`
}

type Like struct {
	PostID    string    `json:"postId"`
	AccountID string    `json:"accountId"`
	CreatedAt time.Time `json:"createdAt"`
	Post      *Post     `json:"post"`
	Account   *Account  `json:"account"`
}

type LikeInput struct {
	PostID    string `json:"postId"`
	AccountID string `json:"accountId"`
}

type LoginInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type Marker struct {
	ID        string    `json:"id"`
	PostID    string    `json:"postId"`
	Title     string    `json:"title"`
	Lat       string    `json:"lat"`
	Lng       string    `json:"lng"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
	Post      *Post     `json:"post"`
}

type MarkerInput struct {
	PostID *string `json:"postId"`
	Title  string  `json:"title"`
	Lat    string  `json:"lat"`
	Lng    string  `json:"lng"`
}

type Mute struct {
	AccountID string   `json:"accountId"`
	MuteID    string   `json:"muteId"`
	Mute      *Account `json:"mute"`
}

type MuteInput struct {
	AccountID string `json:"accountId"`
	MuteID    string `json:"muteId"`
}

type Post struct {
	ID        string     `json:"id"`
	AccountID string     `json:"accountId"`
	Title     string     `json:"title"`
	Body      string     `json:"body"`
	Img       string     `json:"img"`
	CreatedAt time.Time  `json:"createdAt"`
	UpdatedAt time.Time  `json:"updatedAt"`
	Account   *Account   `json:"account"`
	Marker    *Marker    `json:"marker"`
	Like      []*Like    `json:"like"`
	Comment   []*Comment `json:"comment"`
}

type PostInput struct {
	AccountID string `json:"accountId"`
	Title     string `json:"title"`
	Body      string `json:"body"`
	Img       string `json:"img"`
}

type Request struct {
	AccountID       string        `json:"accountId"`
	TargetAccountID string        `json:"targetAccountId"`
	Status          RequestStatus `json:"status"`
	Account         *Account      `json:"account"`
	TargetAccount   *Account      `json:"targetAccount"`
}

type RequestInput struct {
	AccountID       string         `json:"accountId"`
	TargetAccountID string         `json:"targetAccountId"`
	Status          *RequestStatus `json:"status"`
}

type Session struct {
	AccountID string    `json:"accountId"`
	Session   string    `json:"session"`
	UpdatedAt time.Time `json:"updatedAt"`
}

type SessionInput struct {
	AccountID string `json:"accountId"`
}

type UploadFile struct {
	Content graphql.Upload `json:"content"`
}

type AccountGender string

const (
	AccountGenderMale   AccountGender = "male"
	AccountGenderFemale AccountGender = "female"
	AccountGenderNone   AccountGender = "none"
)

var AllAccountGender = []AccountGender{
	AccountGenderMale,
	AccountGenderFemale,
	AccountGenderNone,
}

func (e AccountGender) IsValid() bool {
	switch e {
	case AccountGenderMale, AccountGenderFemale, AccountGenderNone:
		return true
	}
	return false
}

func (e AccountGender) String() string {
	return string(e)
}

func (e *AccountGender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AccountGender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AccountGender", str)
	}
	return nil
}

func (e AccountGender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AccountType string

const (
	AccountTypeActive   AccountType = "active"
	AccountTypeInactive AccountType = "inactive"
	AccountTypeAdmin    AccountType = "admin"
)

var AllAccountType = []AccountType{
	AccountTypeActive,
	AccountTypeInactive,
	AccountTypeAdmin,
}

func (e AccountType) IsValid() bool {
	switch e {
	case AccountTypeActive, AccountTypeInactive, AccountTypeAdmin:
		return true
	}
	return false
}

func (e AccountType) String() string {
	return string(e)
}

func (e *AccountType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AccountType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AccountType", str)
	}
	return nil
}

func (e AccountType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RequestStatus string

const (
	RequestStatusInProcess      RequestStatus = "inProcess"
	RequestStatusAccept         RequestStatus = "accept"
	RequestStatusDeny           RequestStatus = "deny"
	RequestStatusBreakInProcess RequestStatus = "breakInProcess"
	RequestStatusBreakAccept    RequestStatus = "breakAccept"
	RequestStatusBreakDeny      RequestStatus = "breakDeny"
)

var AllRequestStatus = []RequestStatus{
	RequestStatusInProcess,
	RequestStatusAccept,
	RequestStatusDeny,
	RequestStatusBreakInProcess,
	RequestStatusBreakAccept,
	RequestStatusBreakDeny,
}

func (e RequestStatus) IsValid() bool {
	switch e {
	case RequestStatusInProcess, RequestStatusAccept, RequestStatusDeny, RequestStatusBreakInProcess, RequestStatusBreakAccept, RequestStatusBreakDeny:
		return true
	}
	return false
}

func (e RequestStatus) String() string {
	return string(e)
}

func (e *RequestStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RequestStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RequestStatus", str)
	}
	return nil
}

func (e RequestStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
