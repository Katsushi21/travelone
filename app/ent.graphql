directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Account implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  email: String!
  password: String!
  type: AccountType!
  name: String!
  age: Int!
  gender: AccountGender!
  avatar: String!
  introduction: String!
  posts: [Post!]
  comments: [Comment!]
  friends: [Account!]
  mutes: [Mute!]
  requests: [Account!]
  likes: [Like!]
  session: [Session!]
  friendships: [Friend!]
  requesttargets: [Request!]
}
"""A connection to a list of items."""
type AccountConnection {
  """A list of edges."""
  edges: [AccountEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type AccountEdge {
  """The item at the end of the edge."""
  node: Account
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""AccountGender is enum for the field gender"""
enum AccountGender @goModel(model: "github.com/Katsushi21/travelone/ent/account.Gender") {
  male
  female
}
"""Ordering options for Account connections"""
input AccountOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Accounts."""
  field: AccountOrderField!
}
"""Properties by which Account connections can be ordered."""
enum AccountOrderField {
  CREATED_AT
  UPDATED_AT
  EMAIL
  PASSWORD
  ACCOUNT_TYPE
  NAME
  AGE
  GENDER
  AVATAR
  INTRODUCTION
}
"""AccountType is enum for the field type"""
enum AccountType @goModel(model: "github.com/Katsushi21/travelone/ent/account.Type") {
  active
  inactive
  admin
}
"""
AccountWhereInput is used for filtering Account objects.
Input was generated by ent.
"""
input AccountWhereInput {
  not: AccountWhereInput
  and: [AccountWhereInput!]
  or: [AccountWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """email field predicates"""
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """password field predicates"""
  password: String
  passwordNEQ: String
  passwordIn: [String!]
  passwordNotIn: [String!]
  passwordGT: String
  passwordGTE: String
  passwordLT: String
  passwordLTE: String
  passwordContains: String
  passwordHasPrefix: String
  passwordHasSuffix: String
  passwordEqualFold: String
  passwordContainsFold: String
  """type field predicates"""
  type: AccountType
  typeNEQ: AccountType
  typeIn: [AccountType!]
  typeNotIn: [AccountType!]
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """age field predicates"""
  age: Int
  ageNEQ: Int
  ageIn: [Int!]
  ageNotIn: [Int!]
  ageGT: Int
  ageGTE: Int
  ageLT: Int
  ageLTE: Int
  """gender field predicates"""
  gender: AccountGender
  genderNEQ: AccountGender
  genderIn: [AccountGender!]
  genderNotIn: [AccountGender!]
  """avatar field predicates"""
  avatar: String
  avatarNEQ: String
  avatarIn: [String!]
  avatarNotIn: [String!]
  avatarGT: String
  avatarGTE: String
  avatarLT: String
  avatarLTE: String
  avatarContains: String
  avatarHasPrefix: String
  avatarHasSuffix: String
  avatarEqualFold: String
  avatarContainsFold: String
  """introduction field predicates"""
  introduction: String
  introductionNEQ: String
  introductionIn: [String!]
  introductionNotIn: [String!]
  introductionGT: String
  introductionGTE: String
  introductionLT: String
  introductionLTE: String
  introductionContains: String
  introductionHasPrefix: String
  introductionHasSuffix: String
  introductionEqualFold: String
  introductionContainsFold: String
  """posts edge predicates"""
  hasPosts: Boolean
  hasPostsWith: [PostWhereInput!]
  """comments edge predicates"""
  hasComments: Boolean
  hasCommentsWith: [CommentWhereInput!]
  """friends edge predicates"""
  hasFriends: Boolean
  hasFriendsWith: [AccountWhereInput!]
  """mutes edge predicates"""
  hasMutes: Boolean
  hasMutesWith: [MuteWhereInput!]
  """requests edge predicates"""
  hasRequests: Boolean
  hasRequestsWith: [AccountWhereInput!]
  """likes edge predicates"""
  hasLikes: Boolean
  hasLikesWith: [LikeWhereInput!]
  """session edge predicates"""
  hasSession: Boolean
  hasSessionWith: [SessionWhereInput!]
  """friendships edge predicates"""
  hasFriendships: Boolean
  hasFriendshipsWith: [FriendWhereInput!]
  """requestTargets edge predicates"""
  hasRequestTargets: Boolean
  hasRequestTargetsWith: [RequestWhereInput!]
}
type Comment implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  body: String!
  accountID: ID!
  postID: ID!
  post: Post!
  account: Account!
}
"""A connection to a list of items."""
type CommentConnection {
  """A list of edges."""
  edges: [CommentEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type CommentEdge {
  """The item at the end of the edge."""
  node: Comment
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Comment connections"""
input CommentOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Comments."""
  field: CommentOrderField!
}
"""Properties by which Comment connections can be ordered."""
enum CommentOrderField {
  CREATED_AT
  UPDATED_AT
  BODY
  ACCOUNT_ID
  POST_ID
}
"""
CommentWhereInput is used for filtering Comment objects.
Input was generated by ent.
"""
input CommentWhereInput {
  not: CommentWhereInput
  and: [CommentWhereInput!]
  or: [CommentWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """body field predicates"""
  body: String
  bodyNEQ: String
  bodyIn: [String!]
  bodyNotIn: [String!]
  bodyGT: String
  bodyGTE: String
  bodyLT: String
  bodyLTE: String
  bodyContains: String
  bodyHasPrefix: String
  bodyHasSuffix: String
  bodyEqualFold: String
  bodyContainsFold: String
  """account_id field predicates"""
  accountID: ID
  accountIDNEQ: ID
  accountIDIn: [ID!]
  accountIDNotIn: [ID!]
  """post_id field predicates"""
  postID: ID
  postIDNEQ: ID
  postIDIn: [ID!]
  postIDNotIn: [ID!]
  """post edge predicates"""
  hasPost: Boolean
  hasPostWith: [PostWhereInput!]
  """account edge predicates"""
  hasAccount: Boolean
  hasAccountWith: [AccountWhereInput!]
}
"""
CreateAccountInput is used for create Account object.
Input was generated by ent.
"""
input CreateAccountInput {
  createdAt: Time
  updatedAt: Time
  email: String!
  password: String!
  type: AccountType!
  name: String
  age: Int!
  gender: AccountGender!
  avatar: String!
  introduction: String!
  postIDs: [ID!]
  commentIDs: [ID!]
  friendIDs: [ID!]
  muteIDs: [ID!]
  requestIDs: [ID!]
  likeIDs: [ID!]
  sessionIDs: [ID!]
}
"""
CreateCommentInput is used for create Comment object.
Input was generated by ent.
"""
input CreateCommentInput {
  createdAt: Time
  updatedAt: Time
  body: String!
  postID: ID!
  accountID: ID!
}
"""
CreateFriendInput is used for create Friend object.
Input was generated by ent.
"""
input CreateFriendInput {
  createdAt: Time
  updatedAt: Time
  accountID: ID!
  friendID: ID!
}
"""
CreateLikeInput is used for create Like object.
Input was generated by ent.
"""
input CreateLikeInput {
  createdAt: Time
  updatedAt: Time
  accountID: ID!
  postID: ID!
}
"""
CreateMarkerInput is used for create Marker object.
Input was generated by ent.
"""
input CreateMarkerInput {
  createdAt: Time
  updatedAt: Time
  title: String!
  lat: String!
  lng: String!
  postID: ID!
}
"""
CreateMuteInput is used for create Mute object.
Input was generated by ent.
"""
input CreateMuteInput {
  createdAt: Time
  updatedAt: Time
  accountID: ID!
  muteID: ID!
}
"""
CreatePostInput is used for create Post object.
Input was generated by ent.
"""
input CreatePostInput {
  createdAt: Time
  updatedAt: Time
  title: String!
  body: String!
  img: String!
  commentIDs: [ID!]
  markerID: ID
  accountID: ID!
}
"""
CreateRequestInput is used for create Request object.
Input was generated by ent.
"""
input CreateRequestInput {
  createdAt: Time
  updatedAt: Time
  status: RequestStatus!
  accountID: ID!
  requestID: ID!
}
"""
CreateSessionInput is used for create Session object.
Input was generated by ent.
"""
input CreateSessionInput {
  createdAt: Time
  updatedAt: Time
  session: String!
  accountID: ID!
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Friend implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  accountID: ID!
  friendID: ID!
  account: Account!
  friend: Account!
}
"""A connection to a list of items."""
type FriendConnection {
  """A list of edges."""
  edges: [FriendEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type FriendEdge {
  """The item at the end of the edge."""
  node: Friend
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Friend connections"""
input FriendOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Friends."""
  field: FriendOrderField!
}
"""Properties by which Friend connections can be ordered."""
enum FriendOrderField {
  CREATED_AT
  UPDATED_AT
  ACCOUNT_ID
  FRIEND_ID
}
"""
FriendWhereInput is used for filtering Friend objects.
Input was generated by ent.
"""
input FriendWhereInput {
  not: FriendWhereInput
  and: [FriendWhereInput!]
  or: [FriendWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
}
type Like implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  accountID: ID!
  postID: ID!
  account: Account!
  post: Post!
}
"""A connection to a list of items."""
type LikeConnection {
  """A list of edges."""
  edges: [LikeEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type LikeEdge {
  """The item at the end of the edge."""
  node: Like
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Like connections"""
input LikeOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Likes."""
  field: LikeOrderField!
}
"""Properties by which Like connections can be ordered."""
enum LikeOrderField {
  CREATED_AT
  UPDATED_AT
  ACCOUNT_ID
  POST_ID
}
"""
LikeWhereInput is used for filtering Like objects.
Input was generated by ent.
"""
input LikeWhereInput {
  not: LikeWhereInput
  and: [LikeWhereInput!]
  or: [LikeWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """account_id field predicates"""
  accountID: ID
  accountIDNEQ: ID
  accountIDIn: [ID!]
  accountIDNotIn: [ID!]
  """post_id field predicates"""
  postID: ID
  postIDNEQ: ID
  postIDIn: [ID!]
  postIDNotIn: [ID!]
  """account edge predicates"""
  hasAccount: Boolean
  hasAccountWith: [AccountWhereInput!]
  """post edge predicates"""
  hasPost: Boolean
  hasPostWith: [PostWhereInput!]
}
type Marker implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  title: String!
  lat: String!
  lng: String!
  postID: ID!
  post: Post!
}
"""A connection to a list of items."""
type MarkerConnection {
  """A list of edges."""
  edges: [MarkerEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type MarkerEdge {
  """The item at the end of the edge."""
  node: Marker
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Marker connections"""
input MarkerOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Markers."""
  field: MarkerOrderField!
}
"""Properties by which Marker connections can be ordered."""
enum MarkerOrderField {
  CREATED_AT
  UPDATED_AT
  TITLE
  LAT
  LNG
  POST_ID
}
"""
MarkerWhereInput is used for filtering Marker objects.
Input was generated by ent.
"""
input MarkerWhereInput {
  not: MarkerWhereInput
  and: [MarkerWhereInput!]
  or: [MarkerWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """title field predicates"""
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """lat field predicates"""
  lat: String
  latNEQ: String
  latIn: [String!]
  latNotIn: [String!]
  latGT: String
  latGTE: String
  latLT: String
  latLTE: String
  latContains: String
  latHasPrefix: String
  latHasSuffix: String
  latEqualFold: String
  latContainsFold: String
  """lng field predicates"""
  lng: String
  lngNEQ: String
  lngIn: [String!]
  lngNotIn: [String!]
  lngGT: String
  lngGTE: String
  lngLT: String
  lngLTE: String
  lngContains: String
  lngHasPrefix: String
  lngHasSuffix: String
  lngEqualFold: String
  lngContainsFold: String
  """post_id field predicates"""
  postID: ID
  postIDNEQ: ID
  postIDIn: [ID!]
  postIDNotIn: [ID!]
  """post edge predicates"""
  hasPost: Boolean
  hasPostWith: [PostWhereInput!]
}
type Mute implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  accountID: ID!
  muteID: ID!
  account: Account!
  mute: Account!
}
"""A connection to a list of items."""
type MuteConnection {
  """A list of edges."""
  edges: [MuteEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type MuteEdge {
  """The item at the end of the edge."""
  node: Mute
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Mute connections"""
input MuteOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Mutes."""
  field: MuteOrderField!
}
"""Properties by which Mute connections can be ordered."""
enum MuteOrderField {
  CREATED_AT
  UPDATED_AT
  ACCOUNT_ID
  MUTE_ID
}
"""
MuteWhereInput is used for filtering Mute objects.
Input was generated by ent.
"""
input MuteWhereInput {
  not: MuteWhereInput
  and: [MuteWhereInput!]
  or: [MuteWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """account_id field predicates"""
  accountID: ID
  accountIDNEQ: ID
  accountIDIn: [ID!]
  accountIDNotIn: [ID!]
  """mute_id field predicates"""
  muteID: ID
  muteIDNEQ: ID
  muteIDIn: [ID!]
  muteIDNotIn: [ID!]
  """account edge predicates"""
  hasAccount: Boolean
  hasAccountWith: [AccountWhereInput!]
  """mute edge predicates"""
  hasMute: Boolean
  hasMuteWith: [AccountWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/Katsushi21/travelone/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Post implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  title: String!
  body: String!
  img: String!
  accountID: ID!
  comments: [Comment!]
  marker: Marker
  account: Account!
}
"""A connection to a list of items."""
type PostConnection {
  """A list of edges."""
  edges: [PostEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge."""
  node: Post
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Post connections"""
input PostOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Posts."""
  field: PostOrderField!
}
"""Properties by which Post connections can be ordered."""
enum PostOrderField {
  CREATED_AT
  UPDATED_AT
  TITLE
  BODY
  IMG
  ACCOUNT_ID
}
"""
PostWhereInput is used for filtering Post objects.
Input was generated by ent.
"""
input PostWhereInput {
  not: PostWhereInput
  and: [PostWhereInput!]
  or: [PostWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """title field predicates"""
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """body field predicates"""
  body: String
  bodyNEQ: String
  bodyIn: [String!]
  bodyNotIn: [String!]
  bodyGT: String
  bodyGTE: String
  bodyLT: String
  bodyLTE: String
  bodyContains: String
  bodyHasPrefix: String
  bodyHasSuffix: String
  bodyEqualFold: String
  bodyContainsFold: String
  """img field predicates"""
  img: String
  imgNEQ: String
  imgIn: [String!]
  imgNotIn: [String!]
  imgGT: String
  imgGTE: String
  imgLT: String
  imgLTE: String
  imgContains: String
  imgHasPrefix: String
  imgHasSuffix: String
  imgEqualFold: String
  imgContainsFold: String
  """account_id field predicates"""
  accountID: ID
  accountIDNEQ: ID
  accountIDIn: [ID!]
  accountIDNotIn: [ID!]
  """comments edge predicates"""
  hasComments: Boolean
  hasCommentsWith: [CommentWhereInput!]
  """marker edge predicates"""
  hasMarker: Boolean
  hasMarkerWith: [MarkerWhereInput!]
  """account edge predicates"""
  hasAccount: Boolean
  hasAccountWith: [AccountWhereInput!]
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  accounts(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Accounts returned from the connection."""
    orderBy: AccountOrder

    """Filtering options for Accounts returned from the connection."""
    where: AccountWhereInput
  ): AccountConnection!
  comments(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Comments returned from the connection."""
    orderBy: CommentOrder

    """Filtering options for Comments returned from the connection."""
    where: CommentWhereInput
  ): CommentConnection!
  friends(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Friends returned from the connection."""
    orderBy: FriendOrder

    """Filtering options for Friends returned from the connection."""
    where: FriendWhereInput
  ): FriendConnection!
  likes(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Likes returned from the connection."""
    orderBy: LikeOrder

    """Filtering options for Likes returned from the connection."""
    where: LikeWhereInput
  ): LikeConnection!
  markers(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Markers returned from the connection."""
    orderBy: MarkerOrder

    """Filtering options for Markers returned from the connection."""
    where: MarkerWhereInput
  ): MarkerConnection!
  mutes(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Mutes returned from the connection."""
    orderBy: MuteOrder

    """Filtering options for Mutes returned from the connection."""
    where: MuteWhereInput
  ): MuteConnection!
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Posts returned from the connection."""
    orderBy: PostOrder

    """Filtering options for Posts returned from the connection."""
    where: PostWhereInput
  ): PostConnection!
  requests(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Requests returned from the connection."""
    orderBy: RequestOrder

    """Filtering options for Requests returned from the connection."""
    where: RequestWhereInput
  ): RequestConnection!
  sessions(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Sessions returned from the connection."""
    orderBy: SessionOrder

    """Filtering options for Sessions returned from the connection."""
    where: SessionWhereInput
  ): SessionConnection!
}
type Request implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  accountID: ID!
  requestID: ID!
  status: RequestStatus!
  account: Account!
  request: Account!
}
"""A connection to a list of items."""
type RequestConnection {
  """A list of edges."""
  edges: [RequestEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type RequestEdge {
  """The item at the end of the edge."""
  node: Request
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Request connections"""
input RequestOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Requests."""
  field: RequestOrderField!
}
"""Properties by which Request connections can be ordered."""
enum RequestOrderField {
  CREATED_AT
  UPDATED_AT
  ACCOUNT_ID
  REQUEST_ID
  STATUS
}
"""RequestStatus is enum for the field status"""
enum RequestStatus @goModel(model: "github.com/Katsushi21/travelone/ent/request.Status") {
  inProcess
  accept
  deny
  breakInProcess
  breakAccept
  breakDeny
}
"""
RequestWhereInput is used for filtering Request objects.
Input was generated by ent.
"""
input RequestWhereInput {
  not: RequestWhereInput
  and: [RequestWhereInput!]
  or: [RequestWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """status field predicates"""
  status: RequestStatus
  statusNEQ: RequestStatus
  statusIn: [RequestStatus!]
  statusNotIn: [RequestStatus!]
}
type Session implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  accountID: ID!
  session: String!
  account: Account!
}
"""A connection to a list of items."""
type SessionConnection {
  """A list of edges."""
  edges: [SessionEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type SessionEdge {
  """The item at the end of the edge."""
  node: Session
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Session connections"""
input SessionOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Sessions."""
  field: SessionOrderField!
}
"""Properties by which Session connections can be ordered."""
enum SessionOrderField {
  CREATED_AT
  UPDATED_AT
  ACCOUNT_ID
  SESSION
}
"""
SessionWhereInput is used for filtering Session objects.
Input was generated by ent.
"""
input SessionWhereInput {
  not: SessionWhereInput
  and: [SessionWhereInput!]
  or: [SessionWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """account_id field predicates"""
  accountID: ID
  accountIDNEQ: ID
  accountIDIn: [ID!]
  accountIDNotIn: [ID!]
  """session field predicates"""
  session: String
  sessionNEQ: String
  sessionIn: [String!]
  sessionNotIn: [String!]
  sessionGT: String
  sessionGTE: String
  sessionLT: String
  sessionLTE: String
  sessionContains: String
  sessionHasPrefix: String
  sessionHasSuffix: String
  sessionEqualFold: String
  sessionContainsFold: String
  """account edge predicates"""
  hasAccount: Boolean
  hasAccountWith: [AccountWhereInput!]
}
"""
UpdateAccountInput is used for update Account object.
Input was generated by ent.
"""
input UpdateAccountInput {
  updatedAt: Time
  email: String
  password: String
  type: AccountType
  name: String
  age: Int
  gender: AccountGender
  avatar: String
  introduction: String
  addPostIDs: [ID!]
  removePostIDs: [ID!]
  addCommentIDs: [ID!]
  removeCommentIDs: [ID!]
  addFriendIDs: [ID!]
  removeFriendIDs: [ID!]
  addMuteIDs: [ID!]
  removeMuteIDs: [ID!]
  addRequestIDs: [ID!]
  removeRequestIDs: [ID!]
  addLikeIDs: [ID!]
  removeLikeIDs: [ID!]
  addSessionIDs: [ID!]
  removeSessionIDs: [ID!]
}
"""
UpdateCommentInput is used for update Comment object.
Input was generated by ent.
"""
input UpdateCommentInput {
  updatedAt: Time
  body: String
  clearPost: Boolean
  postID: ID
  clearAccount: Boolean
  accountID: ID
}
"""
UpdateMarkerInput is used for update Marker object.
Input was generated by ent.
"""
input UpdateMarkerInput {
  updatedAt: Time
  title: String
  lat: String
  lng: String
  clearPost: Boolean
  postID: ID
}
"""
UpdatePostInput is used for update Post object.
Input was generated by ent.
"""
input UpdatePostInput {
  updatedAt: Time
  title: String
  body: String
  img: String
  addCommentIDs: [ID!]
  removeCommentIDs: [ID!]
  clearMarker: Boolean
  markerID: ID
  clearAccount: Boolean
  accountID: ID
}
"""
UpdateRequestInput is used for update Request object.
Input was generated by ent.
"""
input UpdateRequestInput {
  updatedAt: Time
  status: RequestStatus
  clearAccount: Boolean
  accountID: ID
  clearRequest: Boolean
  requestID: ID
}
"""
UpdateSessionInput is used for update Session object.
Input was generated by ent.
"""
input UpdateSessionInput {
  updatedAt: Time
  session: String
  clearAccount: Boolean
  accountID: ID
}
