// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Katsushi21/traveling_alone/ent/account"
	"github.com/google/uuid"
)

// Account is the model entity for the Account schema.
type Account struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"-"`
	// Type holds the value of the "type" field.
	Type account.Type `json:"type,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Age holds the value of the "age" field.
	Age int `json:"age,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender account.Gender `json:"gender,omitempty"`
	// Avatar holds the value of the "avatar" field.
	Avatar string `json:"avatar,omitempty"`
	// Introduction holds the value of the "introduction" field.
	Introduction string `json:"introduction,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AccountQuery when eager-loading is set.
	Edges AccountEdges `json:"edges"`
}

// AccountEdges holds the relations/edges for other nodes in the graph.
type AccountEdges struct {
	// Posts holds the value of the posts edge.
	Posts []*Post `json:"posts,omitempty"`
	// Comments holds the value of the comments edge.
	Comments []*Comment `json:"comments,omitempty"`
	// Friends holds the value of the friends edge.
	Friends []*Account `json:"friends,omitempty"`
	// Mutes holds the value of the mutes edge.
	Mutes []*Mute `json:"mutes,omitempty"`
	// Requests holds the value of the requests edge.
	Requests []*Account `json:"requests,omitempty"`
	// Likes holds the value of the likes edge.
	Likes []*Like `json:"likes,omitempty"`
	// Session holds the value of the session edge.
	Session []*Session `json:"session,omitempty"`
	// Friendships holds the value of the friendships edge.
	Friendships []*Friend `json:"friendships,omitempty"`
	// RequestTargets holds the value of the requestTargets edge.
	RequestTargets []*Request `json:"requestTargets,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [9]bool
}

// PostsOrErr returns the Posts value or an error if the edge
// was not loaded in eager-loading.
func (e AccountEdges) PostsOrErr() ([]*Post, error) {
	if e.loadedTypes[0] {
		return e.Posts, nil
	}
	return nil, &NotLoadedError{edge: "posts"}
}

// CommentsOrErr returns the Comments value or an error if the edge
// was not loaded in eager-loading.
func (e AccountEdges) CommentsOrErr() ([]*Comment, error) {
	if e.loadedTypes[1] {
		return e.Comments, nil
	}
	return nil, &NotLoadedError{edge: "comments"}
}

// FriendsOrErr returns the Friends value or an error if the edge
// was not loaded in eager-loading.
func (e AccountEdges) FriendsOrErr() ([]*Account, error) {
	if e.loadedTypes[2] {
		return e.Friends, nil
	}
	return nil, &NotLoadedError{edge: "friends"}
}

// MutesOrErr returns the Mutes value or an error if the edge
// was not loaded in eager-loading.
func (e AccountEdges) MutesOrErr() ([]*Mute, error) {
	if e.loadedTypes[3] {
		return e.Mutes, nil
	}
	return nil, &NotLoadedError{edge: "mutes"}
}

// RequestsOrErr returns the Requests value or an error if the edge
// was not loaded in eager-loading.
func (e AccountEdges) RequestsOrErr() ([]*Account, error) {
	if e.loadedTypes[4] {
		return e.Requests, nil
	}
	return nil, &NotLoadedError{edge: "requests"}
}

// LikesOrErr returns the Likes value or an error if the edge
// was not loaded in eager-loading.
func (e AccountEdges) LikesOrErr() ([]*Like, error) {
	if e.loadedTypes[5] {
		return e.Likes, nil
	}
	return nil, &NotLoadedError{edge: "likes"}
}

// SessionOrErr returns the Session value or an error if the edge
// was not loaded in eager-loading.
func (e AccountEdges) SessionOrErr() ([]*Session, error) {
	if e.loadedTypes[6] {
		return e.Session, nil
	}
	return nil, &NotLoadedError{edge: "session"}
}

// FriendshipsOrErr returns the Friendships value or an error if the edge
// was not loaded in eager-loading.
func (e AccountEdges) FriendshipsOrErr() ([]*Friend, error) {
	if e.loadedTypes[7] {
		return e.Friendships, nil
	}
	return nil, &NotLoadedError{edge: "friendships"}
}

// RequestTargetsOrErr returns the RequestTargets value or an error if the edge
// was not loaded in eager-loading.
func (e AccountEdges) RequestTargetsOrErr() ([]*Request, error) {
	if e.loadedTypes[8] {
		return e.RequestTargets, nil
	}
	return nil, &NotLoadedError{edge: "requestTargets"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Account) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case account.FieldAge:
			values[i] = new(sql.NullInt64)
		case account.FieldEmail, account.FieldPassword, account.FieldType, account.FieldName, account.FieldGender, account.FieldAvatar, account.FieldIntroduction:
			values[i] = new(sql.NullString)
		case account.FieldCreatedAt, account.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case account.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Account", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Account fields.
func (a *Account) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case account.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				a.ID = *value
			}
		case account.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case account.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case account.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				a.Email = value.String
			}
		case account.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				a.Password = value.String
			}
		case account.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				a.Type = account.Type(value.String)
			}
		case account.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case account.FieldAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				a.Age = int(value.Int64)
			}
		case account.FieldGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				a.Gender = account.Gender(value.String)
			}
		case account.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				a.Avatar = value.String
			}
		case account.FieldIntroduction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field introduction", values[i])
			} else if value.Valid {
				a.Introduction = value.String
			}
		}
	}
	return nil
}

// QueryPosts queries the "posts" edge of the Account entity.
func (a *Account) QueryPosts() *PostQuery {
	return (&AccountClient{config: a.config}).QueryPosts(a)
}

// QueryComments queries the "comments" edge of the Account entity.
func (a *Account) QueryComments() *CommentQuery {
	return (&AccountClient{config: a.config}).QueryComments(a)
}

// QueryFriends queries the "friends" edge of the Account entity.
func (a *Account) QueryFriends() *AccountQuery {
	return (&AccountClient{config: a.config}).QueryFriends(a)
}

// QueryMutes queries the "mutes" edge of the Account entity.
func (a *Account) QueryMutes() *MuteQuery {
	return (&AccountClient{config: a.config}).QueryMutes(a)
}

// QueryRequests queries the "requests" edge of the Account entity.
func (a *Account) QueryRequests() *AccountQuery {
	return (&AccountClient{config: a.config}).QueryRequests(a)
}

// QueryLikes queries the "likes" edge of the Account entity.
func (a *Account) QueryLikes() *LikeQuery {
	return (&AccountClient{config: a.config}).QueryLikes(a)
}

// QuerySession queries the "session" edge of the Account entity.
func (a *Account) QuerySession() *SessionQuery {
	return (&AccountClient{config: a.config}).QuerySession(a)
}

// QueryFriendships queries the "friendships" edge of the Account entity.
func (a *Account) QueryFriendships() *FriendQuery {
	return (&AccountClient{config: a.config}).QueryFriendships(a)
}

// QueryRequestTargets queries the "requestTargets" edge of the Account entity.
func (a *Account) QueryRequestTargets() *RequestQuery {
	return (&AccountClient{config: a.config}).QueryRequestTargets(a)
}

// Update returns a builder for updating this Account.
// Note that you need to call Account.Unwrap() before calling this method if this Account
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Account) Update() *AccountUpdateOne {
	return (&AccountClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Account entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Account) Unwrap() *Account {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Account is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Account) String() string {
	var builder strings.Builder
	builder.WriteString("Account(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(a.Email)
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", a.Type))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("age=")
	builder.WriteString(fmt.Sprintf("%v", a.Age))
	builder.WriteString(", ")
	builder.WriteString("gender=")
	builder.WriteString(fmt.Sprintf("%v", a.Gender))
	builder.WriteString(", ")
	builder.WriteString("avatar=")
	builder.WriteString(a.Avatar)
	builder.WriteString(", ")
	builder.WriteString("introduction=")
	builder.WriteString(a.Introduction)
	builder.WriteByte(')')
	return builder.String()
}

// Accounts is a parsable slice of Account.
type Accounts []*Account

func (a Accounts) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
