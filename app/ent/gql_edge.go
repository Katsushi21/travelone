// Code generated by ent, DO NOT EDIT.

package ent

import "context"

func (a *Account) Posts(ctx context.Context) ([]*Post, error) {
	result, err := a.Edges.PostsOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryPosts().All(ctx)
	}
	return result, err
}

func (a *Account) Comments(ctx context.Context) ([]*Comment, error) {
	result, err := a.Edges.CommentsOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryComments().All(ctx)
	}
	return result, err
}

func (a *Account) Friends(ctx context.Context) ([]*Account, error) {
	result, err := a.Edges.FriendsOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryFriends().All(ctx)
	}
	return result, err
}

func (a *Account) Mutes(ctx context.Context) ([]*Mute, error) {
	result, err := a.Edges.MutesOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryMutes().All(ctx)
	}
	return result, err
}

func (a *Account) Requests(ctx context.Context) ([]*Account, error) {
	result, err := a.Edges.RequestsOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryRequests().All(ctx)
	}
	return result, err
}

func (a *Account) Likes(ctx context.Context) ([]*Like, error) {
	result, err := a.Edges.LikesOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryLikes().All(ctx)
	}
	return result, err
}

func (a *Account) Session(ctx context.Context) ([]*Session, error) {
	result, err := a.Edges.SessionOrErr()
	if IsNotLoaded(err) {
		result, err = a.QuerySession().All(ctx)
	}
	return result, err
}

func (a *Account) Friendships(ctx context.Context) ([]*Friend, error) {
	result, err := a.Edges.FriendshipsOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryFriendships().All(ctx)
	}
	return result, err
}

func (a *Account) RequestTargets(ctx context.Context) ([]*Request, error) {
	result, err := a.Edges.RequestTargetsOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryRequestTargets().All(ctx)
	}
	return result, err
}

func (c *Comment) Post(ctx context.Context) (*Post, error) {
	result, err := c.Edges.PostOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryPost().Only(ctx)
	}
	return result, err
}

func (c *Comment) Account(ctx context.Context) (*Account, error) {
	result, err := c.Edges.AccountOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryAccount().Only(ctx)
	}
	return result, err
}

func (f *Friend) Account(ctx context.Context) (*Account, error) {
	result, err := f.Edges.AccountOrErr()
	if IsNotLoaded(err) {
		result, err = f.QueryAccount().Only(ctx)
	}
	return result, err
}

func (f *Friend) Friend(ctx context.Context) (*Account, error) {
	result, err := f.Edges.FriendOrErr()
	if IsNotLoaded(err) {
		result, err = f.QueryFriend().Only(ctx)
	}
	return result, err
}

func (l *Like) Account(ctx context.Context) (*Account, error) {
	result, err := l.Edges.AccountOrErr()
	if IsNotLoaded(err) {
		result, err = l.QueryAccount().Only(ctx)
	}
	return result, err
}

func (l *Like) Post(ctx context.Context) (*Post, error) {
	result, err := l.Edges.PostOrErr()
	if IsNotLoaded(err) {
		result, err = l.QueryPost().Only(ctx)
	}
	return result, err
}

func (m *Marker) Post(ctx context.Context) (*Post, error) {
	result, err := m.Edges.PostOrErr()
	if IsNotLoaded(err) {
		result, err = m.QueryPost().Only(ctx)
	}
	return result, err
}

func (m *Mute) Account(ctx context.Context) (*Account, error) {
	result, err := m.Edges.AccountOrErr()
	if IsNotLoaded(err) {
		result, err = m.QueryAccount().Only(ctx)
	}
	return result, err
}

func (m *Mute) Mute(ctx context.Context) (*Account, error) {
	result, err := m.Edges.MuteOrErr()
	if IsNotLoaded(err) {
		result, err = m.QueryMute().Only(ctx)
	}
	return result, err
}

func (po *Post) Comments(ctx context.Context) ([]*Comment, error) {
	result, err := po.Edges.CommentsOrErr()
	if IsNotLoaded(err) {
		result, err = po.QueryComments().All(ctx)
	}
	return result, err
}

func (po *Post) Marker(ctx context.Context) (*Marker, error) {
	result, err := po.Edges.MarkerOrErr()
	if IsNotLoaded(err) {
		result, err = po.QueryMarker().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (po *Post) Account(ctx context.Context) (*Account, error) {
	result, err := po.Edges.AccountOrErr()
	if IsNotLoaded(err) {
		result, err = po.QueryAccount().Only(ctx)
	}
	return result, err
}

func (r *Request) Account(ctx context.Context) (*Account, error) {
	result, err := r.Edges.AccountOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryAccount().Only(ctx)
	}
	return result, err
}

func (r *Request) Request(ctx context.Context) (*Account, error) {
	result, err := r.Edges.RequestOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryRequest().Only(ctx)
	}
	return result, err
}

func (s *Session) Account(ctx context.Context) (*Account, error) {
	result, err := s.Edges.AccountOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryAccount().Only(ctx)
	}
	return result, err
}
