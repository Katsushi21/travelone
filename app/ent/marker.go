// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Katsushi21/traveling_alone/ent/marker"
	"github.com/Katsushi21/traveling_alone/ent/post"
	"github.com/google/uuid"
)

// Marker is the model entity for the Marker schema.
type Marker struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Lat holds the value of the "lat" field.
	Lat string `json:"lat,omitempty"`
	// Lng holds the value of the "lng" field.
	Lng string `json:"lng,omitempty"`
	// PostID holds the value of the "post_id" field.
	PostID uuid.UUID `json:"post_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MarkerQuery when eager-loading is set.
	Edges MarkerEdges `json:"edges"`
}

// MarkerEdges holds the relations/edges for other nodes in the graph.
type MarkerEdges struct {
	// Post holds the value of the post edge.
	Post *Post `json:"post,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PostOrErr returns the Post value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MarkerEdges) PostOrErr() (*Post, error) {
	if e.loadedTypes[0] {
		if e.Post == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: post.Label}
		}
		return e.Post, nil
	}
	return nil, &NotLoadedError{edge: "post"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Marker) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case marker.FieldTitle, marker.FieldLat, marker.FieldLng:
			values[i] = new(sql.NullString)
		case marker.FieldCreatedAt, marker.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case marker.FieldID, marker.FieldPostID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Marker", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Marker fields.
func (m *Marker) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case marker.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				m.ID = *value
			}
		case marker.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		case marker.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				m.UpdatedAt = value.Time
			}
		case marker.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				m.Title = value.String
			}
		case marker.FieldLat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lat", values[i])
			} else if value.Valid {
				m.Lat = value.String
			}
		case marker.FieldLng:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lng", values[i])
			} else if value.Valid {
				m.Lng = value.String
			}
		case marker.FieldPostID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field post_id", values[i])
			} else if value != nil {
				m.PostID = *value
			}
		}
	}
	return nil
}

// QueryPost queries the "post" edge of the Marker entity.
func (m *Marker) QueryPost() *PostQuery {
	return (&MarkerClient{config: m.config}).QueryPost(m)
}

// Update returns a builder for updating this Marker.
// Note that you need to call Marker.Unwrap() before calling this method if this Marker
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Marker) Update() *MarkerUpdateOne {
	return (&MarkerClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Marker entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Marker) Unwrap() *Marker {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Marker is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Marker) String() string {
	var builder strings.Builder
	builder.WriteString("Marker(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(m.Title)
	builder.WriteString(", ")
	builder.WriteString("lat=")
	builder.WriteString(m.Lat)
	builder.WriteString(", ")
	builder.WriteString("lng=")
	builder.WriteString(m.Lng)
	builder.WriteString(", ")
	builder.WriteString("post_id=")
	builder.WriteString(fmt.Sprintf("%v", m.PostID))
	builder.WriteByte(')')
	return builder.String()
}

// Markers is a parsable slice of Marker.
type Markers []*Marker

func (m Markers) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
