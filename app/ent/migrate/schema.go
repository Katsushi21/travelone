// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AccountsColumns holds the columns for the "Accounts" table.
	AccountsColumns = []*schema.Column{
		{Name: "oid", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "email", Type: field.TypeString, Unique: true, Size: 100},
		{Name: "password", Type: field.TypeString},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"active", "inactive", "admin"}},
		{Name: "name", Type: field.TypeString, Default: "guest"},
		{Name: "age", Type: field.TypeInt},
		{Name: "gender", Type: field.TypeEnum, Enums: []string{"male", "female"}},
		{Name: "avatar", Type: field.TypeString},
		{Name: "introduction", Type: field.TypeString},
	}
	// AccountsTable holds the schema information for the "Accounts" table.
	AccountsTable = &schema.Table{
		Name:       "Accounts",
		Columns:    AccountsColumns,
		PrimaryKey: []*schema.Column{AccountsColumns[0]},
	}
	// CommentsColumns holds the columns for the "Comments" table.
	CommentsColumns = []*schema.Column{
		{Name: "oid", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "body", Type: field.TypeString},
		{Name: "account_id", Type: field.TypeUUID},
		{Name: "post_id", Type: field.TypeUUID},
	}
	// CommentsTable holds the schema information for the "Comments" table.
	CommentsTable = &schema.Table{
		Name:       "Comments",
		Columns:    CommentsColumns,
		PrimaryKey: []*schema.Column{CommentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "Comments_Accounts_comments",
				Columns:    []*schema.Column{CommentsColumns[4]},
				RefColumns: []*schema.Column{AccountsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "Comments_Posts_comments",
				Columns:    []*schema.Column{CommentsColumns[5]},
				RefColumns: []*schema.Column{PostsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// FriendsColumns holds the columns for the "Friends" table.
	FriendsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// FriendsTable holds the schema information for the "Friends" table.
	FriendsTable = &schema.Table{
		Name:       "Friends",
		Columns:    FriendsColumns,
		PrimaryKey: []*schema.Column{FriendsColumns[0]},
	}
	// FriendsColumns holds the columns for the "Friends" table.
	FriendsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "account_likes", Type: field.TypeUUID, Nullable: true},
		{Name: "account_id", Type: field.TypeUUID},
		{Name: "friend_id", Type: field.TypeUUID},
		{Name: "post_id", Type: field.TypeUUID},
	}
	// FriendsTable holds the schema information for the "Friends" table.
	FriendsTable = &schema.Table{
		Name:       "Friends",
		Columns:    FriendsColumns,
		PrimaryKey: []*schema.Column{FriendsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "Friends_Accounts_likes",
				Columns:    []*schema.Column{FriendsColumns[3]},
				RefColumns: []*schema.Column{AccountsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "Friends_Accounts_account",
				Columns:    []*schema.Column{FriendsColumns[4]},
				RefColumns: []*schema.Column{AccountsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "Friends_Accounts_friend",
				Columns:    []*schema.Column{FriendsColumns[5]},
				RefColumns: []*schema.Column{AccountsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "Friends_Accounts_account",
				Columns:    []*schema.Column{FriendsColumns[4]},
				RefColumns: []*schema.Column{AccountsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "Friends_Posts_post",
				Columns:    []*schema.Column{FriendsColumns[6]},
				RefColumns: []*schema.Column{PostsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "friend_account_id_friend_id",
				Unique:  true,
				Columns: []*schema.Column{FriendsColumns[4], FriendsColumns[5]},
			},
		},
	}
	// MarkersColumns holds the columns for the "Markers" table.
	MarkersColumns = []*schema.Column{
		{Name: "oid", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "title", Type: field.TypeString},
		{Name: "lat", Type: field.TypeString},
		{Name: "lng", Type: field.TypeString},
		{Name: "post_id", Type: field.TypeUUID, Unique: true},
	}
	// MarkersTable holds the schema information for the "Markers" table.
	MarkersTable = &schema.Table{
		Name:       "Markers",
		Columns:    MarkersColumns,
		PrimaryKey: []*schema.Column{MarkersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "Markers_Posts_marker",
				Columns:    []*schema.Column{MarkersColumns[6]},
				RefColumns: []*schema.Column{PostsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// MutesColumns holds the columns for the "Mutes" table.
	MutesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "account_mutes", Type: field.TypeUUID, Nullable: true},
		{Name: "account_id", Type: field.TypeUUID},
		{Name: "mute_id", Type: field.TypeUUID},
	}
	// MutesTable holds the schema information for the "Mutes" table.
	MutesTable = &schema.Table{
		Name:       "Mutes",
		Columns:    MutesColumns,
		PrimaryKey: []*schema.Column{MutesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "Mutes_Accounts_mutes",
				Columns:    []*schema.Column{MutesColumns[3]},
				RefColumns: []*schema.Column{AccountsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "Mutes_Accounts_account",
				Columns:    []*schema.Column{MutesColumns[4]},
				RefColumns: []*schema.Column{AccountsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "Mutes_Accounts_mute",
				Columns:    []*schema.Column{MutesColumns[5]},
				RefColumns: []*schema.Column{AccountsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// PostsColumns holds the columns for the "Posts" table.
	PostsColumns = []*schema.Column{
		{Name: "oid", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "title", Type: field.TypeString},
		{Name: "body", Type: field.TypeString},
		{Name: "img", Type: field.TypeString},
		{Name: "account_id", Type: field.TypeUUID},
	}
	// PostsTable holds the schema information for the "Posts" table.
	PostsTable = &schema.Table{
		Name:       "Posts",
		Columns:    PostsColumns,
		PrimaryKey: []*schema.Column{PostsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "Posts_Accounts_posts",
				Columns:    []*schema.Column{PostsColumns[6]},
				RefColumns: []*schema.Column{AccountsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// RequestsColumns holds the columns for the "Requests" table.
	RequestsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"inProcess", "accept", "deny", "breakInProcess", "breakAccept", "breakDeny"}},
		{Name: "account_id", Type: field.TypeUUID},
		{Name: "request_id", Type: field.TypeUUID},
	}
	// RequestsTable holds the schema information for the "Requests" table.
	RequestsTable = &schema.Table{
		Name:       "Requests",
		Columns:    RequestsColumns,
		PrimaryKey: []*schema.Column{RequestsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "Requests_Accounts_account",
				Columns:    []*schema.Column{RequestsColumns[4]},
				RefColumns: []*schema.Column{AccountsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "Requests_Accounts_request",
				Columns:    []*schema.Column{RequestsColumns[5]},
				RefColumns: []*schema.Column{AccountsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "request_account_id_request_id",
				Unique:  true,
				Columns: []*schema.Column{RequestsColumns[4], RequestsColumns[5]},
			},
		},
	}
	// SessionsColumns holds the columns for the "Sessions" table.
	SessionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "session", Type: field.TypeString},
		{Name: "account_id", Type: field.TypeUUID},
	}
	// SessionsTable holds the schema information for the "Sessions" table.
	SessionsTable = &schema.Table{
		Name:       "Sessions",
		Columns:    SessionsColumns,
		PrimaryKey: []*schema.Column{SessionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "Sessions_Accounts_session",
				Columns:    []*schema.Column{SessionsColumns[2]},
				RefColumns: []*schema.Column{AccountsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AccountsTable,
		CommentsTable,
		FriendsTable,
		FriendsTable,
		MarkersTable,
		MutesTable,
		PostsTable,
		RequestsTable,
		SessionsTable,
	}
)

func init() {
	AccountsTable.Annotation = &entsql.Annotation{
		Table: "Accounts",
	}
	CommentsTable.ForeignKeys[0].RefTable = AccountsTable
	CommentsTable.ForeignKeys[1].RefTable = PostsTable
	CommentsTable.Annotation = &entsql.Annotation{
		Table: "Comments",
	}
	FriendsTable.Annotation = &entsql.Annotation{
		Table: "Friends",
	}
	FriendsTable.ForeignKeys[0].RefTable = AccountsTable
	FriendsTable.ForeignKeys[1].RefTable = AccountsTable
	FriendsTable.ForeignKeys[2].RefTable = AccountsTable
	FriendsTable.ForeignKeys[3].RefTable = AccountsTable
	FriendsTable.ForeignKeys[4].RefTable = PostsTable
	FriendsTable.Annotation = &entsql.Annotation{
		Table: "Friends",
	}
	MarkersTable.ForeignKeys[0].RefTable = PostsTable
	MarkersTable.Annotation = &entsql.Annotation{
		Table: "Markers",
	}
	MutesTable.ForeignKeys[0].RefTable = AccountsTable
	MutesTable.ForeignKeys[1].RefTable = AccountsTable
	MutesTable.ForeignKeys[2].RefTable = AccountsTable
	MutesTable.Annotation = &entsql.Annotation{
		Table: "Mutes",
	}
	PostsTable.ForeignKeys[0].RefTable = AccountsTable
	PostsTable.Annotation = &entsql.Annotation{
		Table: "Posts",
	}
	RequestsTable.ForeignKeys[0].RefTable = AccountsTable
	RequestsTable.ForeignKeys[1].RefTable = AccountsTable
	RequestsTable.Annotation = &entsql.Annotation{
		Table: "Requests",
	}
	SessionsTable.ForeignKeys[0].RefTable = AccountsTable
	SessionsTable.Annotation = &entsql.Annotation{
		Table: "Sessions",
	}
}
