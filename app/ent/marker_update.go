// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Katsushi21/travelone/ent/marker"
	"github.com/Katsushi21/travelone/ent/post"
	"github.com/Katsushi21/travelone/ent/predicate"
	"github.com/google/uuid"
)

// MarkerUpdate is the builder for updating Marker entities.
type MarkerUpdate struct {
	config
	hooks    []Hook
	mutation *MarkerMutation
}

// Where appends a list predicates to the MarkerUpdate builder.
func (mu *MarkerUpdate) Where(ps ...predicate.Marker) *MarkerUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MarkerUpdate) SetUpdatedAt(t time.Time) *MarkerUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetTitle sets the "title" field.
func (mu *MarkerUpdate) SetTitle(s string) *MarkerUpdate {
	mu.mutation.SetTitle(s)
	return mu
}

// SetLat sets the "lat" field.
func (mu *MarkerUpdate) SetLat(s string) *MarkerUpdate {
	mu.mutation.SetLat(s)
	return mu
}

// SetLng sets the "lng" field.
func (mu *MarkerUpdate) SetLng(s string) *MarkerUpdate {
	mu.mutation.SetLng(s)
	return mu
}

// SetPostID sets the "post_id" field.
func (mu *MarkerUpdate) SetPostID(u uuid.UUID) *MarkerUpdate {
	mu.mutation.SetPostID(u)
	return mu
}

// SetPost sets the "post" edge to the Post entity.
func (mu *MarkerUpdate) SetPost(p *Post) *MarkerUpdate {
	return mu.SetPostID(p.ID)
}

// Mutation returns the MarkerMutation object of the builder.
func (mu *MarkerUpdate) Mutation() *MarkerMutation {
	return mu.mutation
}

// ClearPost clears the "post" edge to the Post entity.
func (mu *MarkerUpdate) ClearPost() *MarkerUpdate {
	mu.mutation.ClearPost()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MarkerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	mu.defaults()
	if len(mu.hooks) == 0 {
		if err = mu.check(); err != nil {
			return 0, err
		}
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MarkerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mu.check(); err != nil {
				return 0, err
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			if mu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MarkerUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MarkerUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MarkerUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MarkerUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		v := marker.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MarkerUpdate) check() error {
	if _, ok := mu.mutation.PostID(); mu.mutation.PostCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Marker.post"`)
	}
	return nil
}

func (mu *MarkerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   marker.Table,
			Columns: marker.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: marker.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: marker.FieldUpdatedAt,
		})
	}
	if value, ok := mu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: marker.FieldTitle,
		})
	}
	if value, ok := mu.mutation.Lat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: marker.FieldLat,
		})
	}
	if value, ok := mu.mutation.Lng(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: marker.FieldLng,
		})
	}
	if mu.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   marker.PostTable,
			Columns: []string{marker.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: post.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   marker.PostTable,
			Columns: []string{marker.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{marker.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// MarkerUpdateOne is the builder for updating a single Marker entity.
type MarkerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MarkerMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MarkerUpdateOne) SetUpdatedAt(t time.Time) *MarkerUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetTitle sets the "title" field.
func (muo *MarkerUpdateOne) SetTitle(s string) *MarkerUpdateOne {
	muo.mutation.SetTitle(s)
	return muo
}

// SetLat sets the "lat" field.
func (muo *MarkerUpdateOne) SetLat(s string) *MarkerUpdateOne {
	muo.mutation.SetLat(s)
	return muo
}

// SetLng sets the "lng" field.
func (muo *MarkerUpdateOne) SetLng(s string) *MarkerUpdateOne {
	muo.mutation.SetLng(s)
	return muo
}

// SetPostID sets the "post_id" field.
func (muo *MarkerUpdateOne) SetPostID(u uuid.UUID) *MarkerUpdateOne {
	muo.mutation.SetPostID(u)
	return muo
}

// SetPost sets the "post" edge to the Post entity.
func (muo *MarkerUpdateOne) SetPost(p *Post) *MarkerUpdateOne {
	return muo.SetPostID(p.ID)
}

// Mutation returns the MarkerMutation object of the builder.
func (muo *MarkerUpdateOne) Mutation() *MarkerMutation {
	return muo.mutation
}

// ClearPost clears the "post" edge to the Post entity.
func (muo *MarkerUpdateOne) ClearPost() *MarkerUpdateOne {
	muo.mutation.ClearPost()
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MarkerUpdateOne) Select(field string, fields ...string) *MarkerUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Marker entity.
func (muo *MarkerUpdateOne) Save(ctx context.Context) (*Marker, error) {
	var (
		err  error
		node *Marker
	)
	muo.defaults()
	if len(muo.hooks) == 0 {
		if err = muo.check(); err != nil {
			return nil, err
		}
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MarkerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = muo.check(); err != nil {
				return nil, err
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			if muo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = muo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, muo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Marker)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MarkerMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MarkerUpdateOne) SaveX(ctx context.Context) *Marker {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MarkerUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MarkerUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MarkerUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		v := marker.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MarkerUpdateOne) check() error {
	if _, ok := muo.mutation.PostID(); muo.mutation.PostCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Marker.post"`)
	}
	return nil
}

func (muo *MarkerUpdateOne) sqlSave(ctx context.Context) (_node *Marker, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   marker.Table,
			Columns: marker.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: marker.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Marker.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, marker.FieldID)
		for _, f := range fields {
			if !marker.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != marker.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: marker.FieldUpdatedAt,
		})
	}
	if value, ok := muo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: marker.FieldTitle,
		})
	}
	if value, ok := muo.mutation.Lat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: marker.FieldLat,
		})
	}
	if value, ok := muo.mutation.Lng(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: marker.FieldLng,
		})
	}
	if muo.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   marker.PostTable,
			Columns: []string{marker.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: post.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   marker.PostTable,
			Columns: []string{marker.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Marker{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{marker.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
