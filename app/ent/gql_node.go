// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"fmt"

	"entgo.io/contrib/entgql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/Katsushi21/travelone/ent/account"
	"github.com/Katsushi21/travelone/ent/comment"
	"github.com/Katsushi21/travelone/ent/friend"
	"github.com/Katsushi21/travelone/ent/like"
	"github.com/Katsushi21/travelone/ent/marker"
	"github.com/Katsushi21/travelone/ent/mute"
	"github.com/Katsushi21/travelone/ent/post"
	"github.com/Katsushi21/travelone/ent/request"
	"github.com/Katsushi21/travelone/ent/session"
	"github.com/google/uuid"
	"github.com/hashicorp/go-multierror"
)

// Noder wraps the basic Node method.
type Noder interface {
	Node(context.Context) (*Node, error)
}

// Node in the graph.
type Node struct {
	ID     uuid.UUID `json:"id,omitempty"`     // node id.
	Type   string    `json:"type,omitempty"`   // node type.
	Fields []*Field  `json:"fields,omitempty"` // node fields.
	Edges  []*Edge   `json:"edges,omitempty"`  // node edges.
}

// Field of a node.
type Field struct {
	Type  string `json:"type,omitempty"`  // field type.
	Name  string `json:"name,omitempty"`  // field name (as in struct).
	Value string `json:"value,omitempty"` // stringified value.
}

// Edges between two nodes.
type Edge struct {
	Type string      `json:"type,omitempty"` // edge type.
	Name string      `json:"name,omitempty"` // edge name.
	IDs  []uuid.UUID `json:"ids,omitempty"`  // node ids (where this edge point to).
}

func (a *Account) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     a.ID,
		Type:   "Account",
		Fields: make([]*Field, 10),
		Edges:  make([]*Edge, 9),
	}
	var buf []byte
	if buf, err = json.Marshal(a.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.Email); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "email",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.Password); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "password",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.Type); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "account.Type",
		Name:  "type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.Name); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.Age); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "int",
		Name:  "age",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.Gender); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "account.Gender",
		Name:  "gender",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.Avatar); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "string",
		Name:  "avatar",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.Introduction); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "string",
		Name:  "introduction",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Post",
		Name: "posts",
	}
	err = a.QueryPosts().
		Select(post.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Comment",
		Name: "comments",
	}
	err = a.QueryComments().
		Select(comment.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Account",
		Name: "friends",
	}
	err = a.QueryFriends().
		Select(account.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Mute",
		Name: "mutes",
	}
	err = a.QueryMutes().
		Select(mute.FieldID).
		Scan(ctx, &node.Edges[3].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "Account",
		Name: "requests",
	}
	err = a.QueryRequests().
		Select(account.FieldID).
		Scan(ctx, &node.Edges[4].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[5] = &Edge{
		Type: "Like",
		Name: "likes",
	}
	err = a.QueryLikes().
		Select(like.FieldID).
		Scan(ctx, &node.Edges[5].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[6] = &Edge{
		Type: "Session",
		Name: "session",
	}
	err = a.QuerySession().
		Select(session.FieldID).
		Scan(ctx, &node.Edges[6].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[7] = &Edge{
		Type: "Friend",
		Name: "friendships",
	}
	err = a.QueryFriendships().
		Select(friend.FieldID).
		Scan(ctx, &node.Edges[7].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[8] = &Edge{
		Type: "Request",
		Name: "requestTargets",
	}
	err = a.QueryRequestTargets().
		Select(request.FieldID).
		Scan(ctx, &node.Edges[8].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (c *Comment) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     c.ID,
		Type:   "Comment",
		Fields: make([]*Field, 5),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(c.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Body); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "body",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.AccountID); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "uuid.UUID",
		Name:  "account_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.PostID); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "uuid.UUID",
		Name:  "post_id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Post",
		Name: "post",
	}
	err = c.QueryPost().
		Select(post.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Account",
		Name: "account",
	}
	err = c.QueryAccount().
		Select(account.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (f *Friend) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     f.ID,
		Type:   "Friend",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(f.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(f.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(f.AccountID); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "uuid.UUID",
		Name:  "account_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(f.FriendID); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "uuid.UUID",
		Name:  "friend_id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Account",
		Name: "account",
	}
	err = f.QueryAccount().
		Select(account.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Account",
		Name: "friend",
	}
	err = f.QueryFriend().
		Select(account.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (l *Like) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     l.ID,
		Type:   "Like",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(l.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(l.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(l.AccountID); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "uuid.UUID",
		Name:  "account_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(l.PostID); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "uuid.UUID",
		Name:  "post_id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Account",
		Name: "account",
	}
	err = l.QueryAccount().
		Select(account.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Post",
		Name: "post",
	}
	err = l.QueryPost().
		Select(post.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (m *Marker) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     m.ID,
		Type:   "Marker",
		Fields: make([]*Field, 6),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(m.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(m.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(m.Title); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "title",
		Value: string(buf),
	}
	if buf, err = json.Marshal(m.Lat); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "lat",
		Value: string(buf),
	}
	if buf, err = json.Marshal(m.Lng); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "lng",
		Value: string(buf),
	}
	if buf, err = json.Marshal(m.PostID); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "uuid.UUID",
		Name:  "post_id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Post",
		Name: "post",
	}
	err = m.QueryPost().
		Select(post.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (m *Mute) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     m.ID,
		Type:   "Mute",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(m.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(m.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(m.AccountID); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "uuid.UUID",
		Name:  "account_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(m.MuteID); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "uuid.UUID",
		Name:  "mute_id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Account",
		Name: "account",
	}
	err = m.QueryAccount().
		Select(account.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Account",
		Name: "mute",
	}
	err = m.QueryMute().
		Select(account.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (po *Post) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     po.ID,
		Type:   "Post",
		Fields: make([]*Field, 6),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(po.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(po.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(po.Title); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "title",
		Value: string(buf),
	}
	if buf, err = json.Marshal(po.Body); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "body",
		Value: string(buf),
	}
	if buf, err = json.Marshal(po.Img); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "img",
		Value: string(buf),
	}
	if buf, err = json.Marshal(po.AccountID); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "uuid.UUID",
		Name:  "account_id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Comment",
		Name: "comments",
	}
	err = po.QueryComments().
		Select(comment.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Marker",
		Name: "marker",
	}
	err = po.QueryMarker().
		Select(marker.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Account",
		Name: "account",
	}
	err = po.QueryAccount().
		Select(account.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (r *Request) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     r.ID,
		Type:   "Request",
		Fields: make([]*Field, 5),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(r.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.AccountID); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "uuid.UUID",
		Name:  "account_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.RequestID); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "uuid.UUID",
		Name:  "request_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.Status); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "request.Status",
		Name:  "status",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Account",
		Name: "account",
	}
	err = r.QueryAccount().
		Select(account.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Account",
		Name: "request",
	}
	err = r.QueryRequest().
		Select(account.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (s *Session) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     s.ID,
		Type:   "Session",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(s.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.AccountID); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "uuid.UUID",
		Name:  "account_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Session); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "session",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Account",
		Name: "account",
	}
	err = s.QueryAccount().
		Select(account.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (c *Client) Node(ctx context.Context, id uuid.UUID) (*Node, error) {
	n, err := c.Noder(ctx, id)
	if err != nil {
		return nil, err
	}
	return n.Node(ctx)
}

var errNodeInvalidID = &NotFoundError{"node"}

// NodeOption allows configuring the Noder execution using functional options.
type NodeOption func(*nodeOptions)

// WithNodeType sets the node Type resolver function (i.e. the table to query).
// If was not provided, the table will be derived from the universal-id
// configuration as described in: https://entgo.io/docs/migrate/#universal-ids.
func WithNodeType(f func(context.Context, uuid.UUID) (string, error)) NodeOption {
	return func(o *nodeOptions) {
		o.nodeType = f
	}
}

// WithFixedNodeType sets the Type of the node to a fixed value.
func WithFixedNodeType(t string) NodeOption {
	return WithNodeType(func(context.Context, uuid.UUID) (string, error) {
		return t, nil
	})
}

type nodeOptions struct {
	nodeType func(context.Context, uuid.UUID) (string, error)
}

func (c *Client) newNodeOpts(opts []NodeOption) *nodeOptions {
	nopts := &nodeOptions{}
	for _, opt := range opts {
		opt(nopts)
	}
	if nopts.nodeType == nil {
		nopts.nodeType = func(ctx context.Context, id uuid.UUID) (string, error) {
			return "", fmt.Errorf("cannot resolve noder (%v) without its type", id)
		}
	}
	return nopts
}

// Noder returns a Node by its id. If the NodeType was not provided, it will
// be derived from the id value according to the universal-id configuration.
//
//		c.Noder(ctx, id)
//		c.Noder(ctx, id, ent.WithNodeType(typeResolver))
//
func (c *Client) Noder(ctx context.Context, id uuid.UUID, opts ...NodeOption) (_ Noder, err error) {
	defer func() {
		if IsNotFound(err) {
			err = multierror.Append(err, entgql.ErrNodeNotFound(id))
		}
	}()
	table, err := c.newNodeOpts(opts).nodeType(ctx, id)
	if err != nil {
		return nil, err
	}
	return c.noder(ctx, table, id)
}

func (c *Client) noder(ctx context.Context, table string, id uuid.UUID) (Noder, error) {
	switch table {
	case account.Table:
		query := c.Account.Query().
			Where(account.ID(id))
		query, err := query.CollectFields(ctx, "Account")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case comment.Table:
		query := c.Comment.Query().
			Where(comment.ID(id))
		query, err := query.CollectFields(ctx, "Comment")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case friend.Table:
		query := c.Friend.Query().
			Where(friend.ID(id))
		query, err := query.CollectFields(ctx, "Friend")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case like.Table:
		query := c.Like.Query().
			Where(like.ID(id))
		query, err := query.CollectFields(ctx, "Like")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case marker.Table:
		query := c.Marker.Query().
			Where(marker.ID(id))
		query, err := query.CollectFields(ctx, "Marker")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case mute.Table:
		query := c.Mute.Query().
			Where(mute.ID(id))
		query, err := query.CollectFields(ctx, "Mute")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case post.Table:
		query := c.Post.Query().
			Where(post.ID(id))
		query, err := query.CollectFields(ctx, "Post")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case request.Table:
		query := c.Request.Query().
			Where(request.ID(id))
		query, err := query.CollectFields(ctx, "Request")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case session.Table:
		query := c.Session.Query().
			Where(session.ID(id))
		query, err := query.CollectFields(ctx, "Session")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	default:
		return nil, fmt.Errorf("cannot resolve noder from table %q: %w", table, errNodeInvalidID)
	}
}

func (c *Client) Noders(ctx context.Context, ids []uuid.UUID, opts ...NodeOption) ([]Noder, error) {
	switch len(ids) {
	case 1:
		noder, err := c.Noder(ctx, ids[0], opts...)
		if err != nil {
			return nil, err
		}
		return []Noder{noder}, nil
	case 0:
		return []Noder{}, nil
	}

	noders := make([]Noder, len(ids))
	errors := make([]error, len(ids))
	tables := make(map[string][]uuid.UUID)
	id2idx := make(map[uuid.UUID][]int, len(ids))
	nopts := c.newNodeOpts(opts)
	for i, id := range ids {
		table, err := nopts.nodeType(ctx, id)
		if err != nil {
			errors[i] = err
			continue
		}
		tables[table] = append(tables[table], id)
		id2idx[id] = append(id2idx[id], i)
	}

	for table, ids := range tables {
		nodes, err := c.noders(ctx, table, ids)
		if err != nil {
			for _, id := range ids {
				for _, idx := range id2idx[id] {
					errors[idx] = err
				}
			}
		} else {
			for i, id := range ids {
				for _, idx := range id2idx[id] {
					noders[idx] = nodes[i]
				}
			}
		}
	}

	for i, id := range ids {
		if errors[i] == nil {
			if noders[i] != nil {
				continue
			}
			errors[i] = entgql.ErrNodeNotFound(id)
		} else if IsNotFound(errors[i]) {
			errors[i] = multierror.Append(errors[i], entgql.ErrNodeNotFound(id))
		}
		ctx := graphql.WithPathContext(ctx,
			graphql.NewPathWithIndex(i),
		)
		graphql.AddError(ctx, errors[i])
	}
	return noders, nil
}

func (c *Client) noders(ctx context.Context, table string, ids []uuid.UUID) ([]Noder, error) {
	noders := make([]Noder, len(ids))
	idmap := make(map[uuid.UUID][]*Noder, len(ids))
	for i, id := range ids {
		idmap[id] = append(idmap[id], &noders[i])
	}
	switch table {
	case account.Table:
		query := c.Account.Query().
			Where(account.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Account")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case comment.Table:
		query := c.Comment.Query().
			Where(comment.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Comment")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case friend.Table:
		query := c.Friend.Query().
			Where(friend.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Friend")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case like.Table:
		query := c.Like.Query().
			Where(like.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Like")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case marker.Table:
		query := c.Marker.Query().
			Where(marker.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Marker")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case mute.Table:
		query := c.Mute.Query().
			Where(mute.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Mute")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case post.Table:
		query := c.Post.Query().
			Where(post.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Post")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case request.Table:
		query := c.Request.Query().
			Where(request.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Request")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case session.Table:
		query := c.Session.Query().
			Where(session.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Session")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	default:
		return nil, fmt.Errorf("cannot resolve noders from table %q: %w", table, errNodeInvalidID)
	}
	return noders, nil
}
