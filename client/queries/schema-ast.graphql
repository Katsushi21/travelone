directive @goField(
  forceResolver: Boolean
  name: String
) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @goModel(
  model: String
  models: [String!]
) on ENUM | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

type Account implements Node {
  age: Int!
  avatar: String!
  comments: [Comment!]
  createdAt: Time!
  email: String!
  friends: [Account!]
  friendship: [Friend!]
  gender: AccountGender!
  id: ID!
  introduction: String!
  likes: [Like!]
  mutes: [Account!]
  mutetarget: [Mute!]
  name: String!
  password: String!
  posts: [Post!]
  requests: [Account!]
  requesttarget: [Request!]
  session: [Session!]
  type: AccountType!
  updatedAt: Time!
}

"""
AccountGender is enum for the field gender
"""
enum AccountGender {
  FEMALE
  MALE
  NONE
}

"""
AccountType is enum for the field type
"""
enum AccountType {
  ACTIVE
  ADMIN
  INACTIVE
}

"""
AccountWhereInput is used for filtering Account objects.
Input was generated by ent.
"""
input AccountWhereInput {
  """
  age field predicates
  """
  age: Int
  ageGT: Int
  ageGTE: Int
  ageIn: [Int!]
  ageLT: Int
  ageLTE: Int
  ageNEQ: Int
  ageNotIn: [Int!]
  and: [AccountWhereInput!]

  """
  avatar field predicates
  """
  avatar: String
  avatarContains: String
  avatarContainsFold: String
  avatarEqualFold: String
  avatarGT: String
  avatarGTE: String
  avatarHasPrefix: String
  avatarHasSuffix: String
  avatarIn: [String!]
  avatarLT: String
  avatarLTE: String
  avatarNEQ: String
  avatarNotIn: [String!]

  """
  created_at field predicates
  """
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]

  """
  email field predicates
  """
  email: String
  emailContains: String
  emailContainsFold: String
  emailEqualFold: String
  emailGT: String
  emailGTE: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailIn: [String!]
  emailLT: String
  emailLTE: String
  emailNEQ: String
  emailNotIn: [String!]

  """
  gender field predicates
  """
  gender: AccountGender
  genderIn: [AccountGender!]
  genderNEQ: AccountGender
  genderNotIn: [AccountGender!]

  """
  comments edge predicates
  """
  hasComments: Boolean
  hasCommentsWith: [CommentWhereInput!]

  """
  friends edge predicates
  """
  hasFriends: Boolean
  hasFriendsWith: [AccountWhereInput!]

  """
  friendship edge predicates
  """
  hasFriendship: Boolean
  hasFriendshipWith: [FriendWhereInput!]

  """
  likes edge predicates
  """
  hasLikes: Boolean
  hasLikesWith: [LikeWhereInput!]

  """
  muteTarget edge predicates
  """
  hasMuteTarget: Boolean
  hasMuteTargetWith: [MuteWhereInput!]

  """
  mutes edge predicates
  """
  hasMutes: Boolean
  hasMutesWith: [AccountWhereInput!]

  """
  posts edge predicates
  """
  hasPosts: Boolean
  hasPostsWith: [PostWhereInput!]

  """
  requestTarget edge predicates
  """
  hasRequestTarget: Boolean
  hasRequestTargetWith: [RequestWhereInput!]

  """
  requests edge predicates
  """
  hasRequests: Boolean
  hasRequestsWith: [AccountWhereInput!]

  """
  session edge predicates
  """
  hasSession: Boolean
  hasSessionWith: [SessionWhereInput!]

  """
  id field predicates
  """
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]

  """
  introduction field predicates
  """
  introduction: String
  introductionContains: String
  introductionContainsFold: String
  introductionEqualFold: String
  introductionGT: String
  introductionGTE: String
  introductionHasPrefix: String
  introductionHasSuffix: String
  introductionIn: [String!]
  introductionLT: String
  introductionLTE: String
  introductionNEQ: String
  introductionNotIn: [String!]

  """
  name field predicates
  """
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: AccountWhereInput
  or: [AccountWhereInput!]

  """
  password field predicates
  """
  password: String
  passwordContains: String
  passwordContainsFold: String
  passwordEqualFold: String
  passwordGT: String
  passwordGTE: String
  passwordHasPrefix: String
  passwordHasSuffix: String
  passwordIn: [String!]
  passwordLT: String
  passwordLTE: String
  passwordNEQ: String
  passwordNotIn: [String!]

  """
  type field predicates
  """
  type: AccountType
  typeIn: [AccountType!]
  typeNEQ: AccountType
  typeNotIn: [AccountType!]

  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

type Comment implements Node {
  account: Account!
  accountID: ID!
  body: String!
  createdAt: Time!
  id: ID!
  post: Post!
  postID: ID!
  updatedAt: Time!
}

"""
CommentWhereInput is used for filtering Comment objects.
Input was generated by ent.
"""
input CommentWhereInput {
  """
  account_id field predicates
  """
  accountID: ID
  accountIDIn: [ID!]
  accountIDNEQ: ID
  accountIDNotIn: [ID!]
  and: [CommentWhereInput!]

  """
  body field predicates
  """
  body: String
  bodyContains: String
  bodyContainsFold: String
  bodyEqualFold: String
  bodyGT: String
  bodyGTE: String
  bodyHasPrefix: String
  bodyHasSuffix: String
  bodyIn: [String!]
  bodyLT: String
  bodyLTE: String
  bodyNEQ: String
  bodyNotIn: [String!]

  """
  created_at field predicates
  """
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]

  """
  account edge predicates
  """
  hasAccount: Boolean
  hasAccountWith: [AccountWhereInput!]

  """
  post edge predicates
  """
  hasPost: Boolean
  hasPostWith: [PostWhereInput!]

  """
  id field predicates
  """
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: CommentWhereInput
  or: [CommentWhereInput!]

  """
  post_id field predicates
  """
  postID: ID
  postIDIn: [ID!]
  postIDNEQ: ID
  postIDNotIn: [ID!]

  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

"""
CreateAccountInput is used for create Account object.
Input was generated by ent.
"""
input CreateAccountInput {
  age: Int!
  avatar: String!
  commentIDs: [ID!]
  createdAt: Time
  email: String!
  friendIDs: [ID!]
  gender: AccountGender!
  introduction: String!
  likeIDs: [ID!]
  muteIDs: [ID!]
  name: String!
  password: String!
  postIDs: [ID!]
  requestIDs: [ID!]
  sessionIDs: [ID!]
  type: AccountType!
  updatedAt: Time
}

"""
CreateCommentInput is used for create Comment object.
Input was generated by ent.
"""
input CreateCommentInput {
  accountID: ID!
  body: String!
  createdAt: Time
  postID: ID!
  updatedAt: Time
}

"""
CreateFriendInput is used for create Friend object.
Input was generated by ent.
"""
input CreateFriendInput {
  accountID: ID!
  createdAt: Time
  friendID: ID!
  updatedAt: Time
}

"""
CreateLikeInput is used for create Like object.
Input was generated by ent.
"""
input CreateLikeInput {
  accountID: ID!
  createdAt: Time
  postID: ID!
  updatedAt: Time
}

"""
CreateMarkerInput is used for create Marker object.
Input was generated by ent.
"""
input CreateMarkerInput {
  createdAt: Time
  lat: String!
  lng: String!
  postID: ID!
  title: String!
  updatedAt: Time
}

"""
CreateMuteInput is used for create Mute object.
Input was generated by ent.
"""
input CreateMuteInput {
  accountID: ID!
  createdAt: Time
  muteID: ID!
  updatedAt: Time
}

"""
CreatePostInput is used for create Post object.
Input was generated by ent.
"""
input CreatePostInput {
  accountID: ID!
  body: String!
  commentIDs: [ID!]
  createdAt: Time
  img: String!
  likeIDs: [ID!]
  markerID: ID
  title: String!
  updatedAt: Time
}

"""
CreateRequestInput is used for create Request object.
Input was generated by ent.
"""
input CreateRequestInput {
  accountID: ID!
  createdAt: Time
  requestID: ID!
  status: RequestStatus!
  updatedAt: Time
}

"""
CreateSessionInput is used for create Session object.
Input was generated by ent.
"""
input CreateSessionInput {
  accountID: ID!
  createdAt: Time
  session: String!
  updatedAt: Time
}

"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor

type Friend implements Node {
  account: Account!
  accountID: ID!
  createdAt: Time!
  friend: Account!
  friendID: ID!
  id: ID!
  updatedAt: Time!
}

"""
FriendWhereInput is used for filtering Friend objects.
Input was generated by ent.
"""
input FriendWhereInput {
  and: [FriendWhereInput!]

  """
  created_at field predicates
  """
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]

  """
  id field predicates
  """
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: FriendWhereInput
  or: [FriendWhereInput!]

  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

type Like implements Node {
  account: Account!
  accountID: ID!
  createdAt: Time!
  id: ID!
  post: Post!
  postID: ID!
  updatedAt: Time!
}

"""
LikeWhereInput is used for filtering Like objects.
Input was generated by ent.
"""
input LikeWhereInput {
  """
  account_id field predicates
  """
  accountID: ID
  accountIDIn: [ID!]
  accountIDNEQ: ID
  accountIDNotIn: [ID!]
  and: [LikeWhereInput!]

  """
  created_at field predicates
  """
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]

  """
  account edge predicates
  """
  hasAccount: Boolean
  hasAccountWith: [AccountWhereInput!]

  """
  post edge predicates
  """
  hasPost: Boolean
  hasPostWith: [PostWhereInput!]

  """
  id field predicates
  """
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: LikeWhereInput
  or: [LikeWhereInput!]

  """
  post_id field predicates
  """
  postID: ID
  postIDIn: [ID!]
  postIDNEQ: ID
  postIDNotIn: [ID!]

  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

type Marker implements Node {
  createdAt: Time!
  id: ID!
  lat: String!
  lng: String!
  post: Post!
  postID: ID!
  title: String!
  updatedAt: Time!
}

"""
MarkerWhereInput is used for filtering Marker objects.
Input was generated by ent.
"""
input MarkerWhereInput {
  and: [MarkerWhereInput!]

  """
  created_at field predicates
  """
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]

  """
  post edge predicates
  """
  hasPost: Boolean
  hasPostWith: [PostWhereInput!]

  """
  id field predicates
  """
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]

  """
  lat field predicates
  """
  lat: String
  latContains: String
  latContainsFold: String
  latEqualFold: String
  latGT: String
  latGTE: String
  latHasPrefix: String
  latHasSuffix: String
  latIn: [String!]
  latLT: String
  latLTE: String
  latNEQ: String
  latNotIn: [String!]

  """
  lng field predicates
  """
  lng: String
  lngContains: String
  lngContainsFold: String
  lngEqualFold: String
  lngGT: String
  lngGTE: String
  lngHasPrefix: String
  lngHasSuffix: String
  lngIn: [String!]
  lngLT: String
  lngLTE: String
  lngNEQ: String
  lngNotIn: [String!]
  not: MarkerWhereInput
  or: [MarkerWhereInput!]

  """
  post_id field predicates
  """
  postID: ID
  postIDIn: [ID!]
  postIDNEQ: ID
  postIDNotIn: [ID!]

  """
  title field predicates
  """
  title: String
  titleContains: String
  titleContainsFold: String
  titleEqualFold: String
  titleGT: String
  titleGTE: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleIn: [String!]
  titleLT: String
  titleLTE: String
  titleNEQ: String
  titleNotIn: [String!]

  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

type Mutation {
  CreateAccount(input: CreateAccountInput!): Account!
  CreateComment(input: CreateCommentInput!): Comment!
  CreateFriend(input: CreateFriendInput!): Friend!
  CreateLike(input: CreateLikeInput!): Like!
  CreateMarker(input: CreateMarkerInput!): Marker!
  CreateMute(input: CreateMuteInput!): Mute!
  CreatePost(input: CreatePostInput!): Post!
  CreateRequest(input: CreateRequestInput!): Request!
  CreateSession(input: CreateSessionInput!): Session!
  DeleteAccount(id: ID!): Account!
  DeleteComment(id: ID!): Comment!
  DeleteFriend(id: ID!): Friend!
  DeleteLike(id: ID!): Like!
  DeleteMarker(id: ID!): Marker!
  DeleteMute(id: ID!): Mute!
  DeletePost(id: ID!): Post!
  DeleteRequest(id: ID!): Request!
  DeleteSession(id: ID!): Session!
  UpdateAccount(id: ID!, input: UpdateAccountInput!): Account!
  UpdateComment(id: ID!, input: UpdateCommentInput!): Comment!
  UpdateMarker(id: ID!, input: UpdateMarkerInput!): Marker!
  UpdatePost(id: ID!, input: UpdatePostInput!): Post!
  UpdateRequest(id: ID!, input: UpdateRequestInput!): Request!
  UpdateSession(id: ID!, input: UpdateSessionInput!): Session!
}

type Mute implements Node {
  account: Account!
  accountID: ID!
  createdAt: Time!
  id: ID!
  mute: Account!
  muteID: ID!
  updatedAt: Time!
}

"""
MuteWhereInput is used for filtering Mute objects.
Input was generated by ent.
"""
input MuteWhereInput {
  and: [MuteWhereInput!]

  """
  created_at field predicates
  """
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]

  """
  id field predicates
  """
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: MuteWhereInput
  or: [MuteWhereInput!]

  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC

  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}

"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
}

type Post implements Node {
  account: Account!
  accountID: ID!
  body: String!
  comments: [Comment!]
  createdAt: Time!
  id: ID!
  img: String!
  likes: [Like!]
  marker: Marker
  title: String!
  updatedAt: Time!
}

"""
PostWhereInput is used for filtering Post objects.
Input was generated by ent.
"""
input PostWhereInput {
  """
  account_id field predicates
  """
  accountID: ID
  accountIDIn: [ID!]
  accountIDNEQ: ID
  accountIDNotIn: [ID!]
  and: [PostWhereInput!]

  """
  body field predicates
  """
  body: String
  bodyContains: String
  bodyContainsFold: String
  bodyEqualFold: String
  bodyGT: String
  bodyGTE: String
  bodyHasPrefix: String
  bodyHasSuffix: String
  bodyIn: [String!]
  bodyLT: String
  bodyLTE: String
  bodyNEQ: String
  bodyNotIn: [String!]

  """
  created_at field predicates
  """
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]

  """
  account edge predicates
  """
  hasAccount: Boolean
  hasAccountWith: [AccountWhereInput!]

  """
  comments edge predicates
  """
  hasComments: Boolean
  hasCommentsWith: [CommentWhereInput!]

  """
  likes edge predicates
  """
  hasLikes: Boolean
  hasLikesWith: [LikeWhereInput!]

  """
  marker edge predicates
  """
  hasMarker: Boolean
  hasMarkerWith: [MarkerWhereInput!]

  """
  id field predicates
  """
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]

  """
  img field predicates
  """
  img: String
  imgContains: String
  imgContainsFold: String
  imgEqualFold: String
  imgGT: String
  imgGTE: String
  imgHasPrefix: String
  imgHasSuffix: String
  imgIn: [String!]
  imgLT: String
  imgLTE: String
  imgNEQ: String
  imgNotIn: [String!]
  not: PostWhereInput
  or: [PostWhereInput!]

  """
  title field predicates
  """
  title: String
  titleContains: String
  titleContainsFold: String
  titleEqualFold: String
  titleGT: String
  titleGTE: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleIn: [String!]
  titleLT: String
  titleLTE: String
  titleNEQ: String
  titleNotIn: [String!]

  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

type Query {
  AccountByID(id: ID!): Account!
  AccountBySelfID(id: ID!): Account!
  LikesByPostID(postID: ID!): [Like!]!
  RequestsByAccountID(accountID: ID!): [Request!]!
  RequestsByRequestID(requestID: ID!): [Request!]!
  SessionByID(id: ID!): Session!
  accounts: [Account!]!
  comments: [Comment!]!
  friends: [Friend!]!
  likes: [Like!]!
  markers: [Marker!]!
  mutes: [Mute!]!

  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node

  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  posts: [Post!]!
  requests: [Request!]!
  sessions: [Session!]!
}

type Request implements Node {
  account: Account!
  accountID: ID!
  createdAt: Time!
  id: ID!
  request: Account!
  requestID: ID!
  status: RequestStatus!
  updatedAt: Time!
}

"""
RequestStatus is enum for the field status
"""
enum RequestStatus {
  ACCEPT
  BREAK_DENY
  BREAK_IN_ACCEPT
  BREAK_IN_PROCESS
  DENY
  IN_PROCESS
}

"""
RequestWhereInput is used for filtering Request objects.
Input was generated by ent.
"""
input RequestWhereInput {
  and: [RequestWhereInput!]

  """
  created_at field predicates
  """
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]

  """
  id field predicates
  """
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: RequestWhereInput
  or: [RequestWhereInput!]

  """
  status field predicates
  """
  status: RequestStatus
  statusIn: [RequestStatus!]
  statusNEQ: RequestStatus
  statusNotIn: [RequestStatus!]

  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

type Session implements Node {
  account: Account!
  accountID: ID!
  createdAt: Time!
  id: ID!
  session: String!
  updatedAt: Time!
}

"""
SessionWhereInput is used for filtering Session objects.
Input was generated by ent.
"""
input SessionWhereInput {
  """
  account_id field predicates
  """
  accountID: ID
  accountIDIn: [ID!]
  accountIDNEQ: ID
  accountIDNotIn: [ID!]
  and: [SessionWhereInput!]

  """
  created_at field predicates
  """
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]

  """
  account edge predicates
  """
  hasAccount: Boolean
  hasAccountWith: [AccountWhereInput!]

  """
  id field predicates
  """
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: SessionWhereInput
  or: [SessionWhereInput!]

  """
  session field predicates
  """
  session: String
  sessionContains: String
  sessionContainsFold: String
  sessionEqualFold: String
  sessionGT: String
  sessionGTE: String
  sessionHasPrefix: String
  sessionHasSuffix: String
  sessionIn: [String!]
  sessionLT: String
  sessionLTE: String
  sessionNEQ: String
  sessionNotIn: [String!]

  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

scalar Time

"""
UpdateAccountInput is used for update Account object.
Input was generated by ent.
"""
input UpdateAccountInput {
  addCommentIDs: [ID!]
  addFriendIDs: [ID!]
  addLikeIDs: [ID!]
  addMuteIDs: [ID!]
  addPostIDs: [ID!]
  addRequestIDs: [ID!]
  addSessionIDs: [ID!]
  age: Int
  avatar: String
  email: String
  gender: AccountGender
  introduction: String
  name: String
  password: String
  removeCommentIDs: [ID!]
  removeFriendIDs: [ID!]
  removeLikeIDs: [ID!]
  removeMuteIDs: [ID!]
  removePostIDs: [ID!]
  removeRequestIDs: [ID!]
  removeSessionIDs: [ID!]
  type: AccountType
  updatedAt: Time
}

"""
UpdateCommentInput is used for update Comment object.
Input was generated by ent.
"""
input UpdateCommentInput {
  accountID: ID
  body: String
  clearAccount: Boolean
  clearPost: Boolean
  postID: ID
  updatedAt: Time
}

"""
UpdateFriendInput is used for update Friend object.
Input was generated by ent.
"""
input UpdateFriendInput {
  accountID: ID
  clearAccount: Boolean
  clearFriend: Boolean
  friendID: ID
  updatedAt: Time
}

"""
UpdateLikeInput is used for update Like object.
Input was generated by ent.
"""
input UpdateLikeInput {
  accountID: ID
  clearAccount: Boolean
  clearPost: Boolean
  postID: ID
  updatedAt: Time
}

"""
UpdateMarkerInput is used for update Marker object.
Input was generated by ent.
"""
input UpdateMarkerInput {
  clearPost: Boolean
  lat: String
  lng: String
  postID: ID
  title: String
  updatedAt: Time
}

"""
UpdateMuteInput is used for update Mute object.
Input was generated by ent.
"""
input UpdateMuteInput {
  accountID: ID
  clearAccount: Boolean
  clearMute: Boolean
  muteID: ID
  updatedAt: Time
}

"""
UpdatePostInput is used for update Post object.
Input was generated by ent.
"""
input UpdatePostInput {
  accountID: ID
  addCommentIDs: [ID!]
  addLikeIDs: [ID!]
  body: String
  clearAccount: Boolean
  clearMarker: Boolean
  img: String
  markerID: ID
  removeCommentIDs: [ID!]
  removeLikeIDs: [ID!]
  title: String
  updatedAt: Time
}

"""
UpdateRequestInput is used for update Request object.
Input was generated by ent.
"""
input UpdateRequestInput {
  accountID: ID
  clearAccount: Boolean
  clearRequest: Boolean
  requestID: ID
  status: RequestStatus
  updatedAt: Time
}

"""
UpdateSessionInput is used for update Session object.
Input was generated by ent.
"""
input UpdateSessionInput {
  accountID: ID
  clearAccount: Boolean
  session: String
  updatedAt: Time
}

scalar Upload
