import gql from 'graphql-tag';
import * as Urql from 'urql';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Cursor: any;
  Time: any;
  Upload: any;
};

export type Account = Node & {
  __typename?: 'Account';
  age: Scalars['Int'];
  avatar: Scalars['String'];
  comments?: Maybe<Array<Comment>>;
  createdAt: Scalars['Time'];
  email: Scalars['String'];
  friends?: Maybe<Array<Account>>;
  friendships?: Maybe<Array<Friend>>;
  gender: AccountGender;
  id: Scalars['ID'];
  introduction: Scalars['String'];
  likes?: Maybe<Array<Like>>;
  mutes?: Maybe<Array<Mute>>;
  name: Scalars['String'];
  password: Scalars['String'];
  posts?: Maybe<Array<Post>>;
  requests?: Maybe<Array<Account>>;
  requesttargets?: Maybe<Array<Request>>;
  session?: Maybe<Array<Session>>;
  type: AccountType;
  updatedAt: Scalars['Time'];
};

/** AccountGender is enum for the field gender */
export enum AccountGender {
  Female = 'FEMALE',
  Male = 'MALE',
  None = 'NONE'
}

/** Ordering options for Account connections */
export type AccountOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Accounts. */
  field: AccountOrderField;
};

/** Properties by which Account connections can be ordered. */
export enum AccountOrderField {
  AccountType = 'ACCOUNT_TYPE',
  Age = 'AGE',
  Avatar = 'AVATAR',
  CreatedAt = 'CREATED_AT',
  Email = 'EMAIL',
  Gender = 'GENDER',
  Introduction = 'INTRODUCTION',
  Name = 'NAME',
  Password = 'PASSWORD',
  UpdatedAt = 'UPDATED_AT'
}

/** AccountType is enum for the field type */
export enum AccountType {
  Active = 'ACTIVE',
  Admin = 'ADMIN',
  Inactive = 'INACTIVE'
}

/**
 * AccountWhereInput is used for filtering Account objects.
 * Input was generated by ent.
 */
export type AccountWhereInput = {
  /** age field predicates */
  age?: InputMaybe<Scalars['Int']>;
  ageGT?: InputMaybe<Scalars['Int']>;
  ageGTE?: InputMaybe<Scalars['Int']>;
  ageIn?: InputMaybe<Array<Scalars['Int']>>;
  ageLT?: InputMaybe<Scalars['Int']>;
  ageLTE?: InputMaybe<Scalars['Int']>;
  ageNEQ?: InputMaybe<Scalars['Int']>;
  ageNotIn?: InputMaybe<Array<Scalars['Int']>>;
  and?: InputMaybe<Array<AccountWhereInput>>;
  /** avatar field predicates */
  avatar?: InputMaybe<Scalars['String']>;
  avatarContains?: InputMaybe<Scalars['String']>;
  avatarContainsFold?: InputMaybe<Scalars['String']>;
  avatarEqualFold?: InputMaybe<Scalars['String']>;
  avatarGT?: InputMaybe<Scalars['String']>;
  avatarGTE?: InputMaybe<Scalars['String']>;
  avatarHasPrefix?: InputMaybe<Scalars['String']>;
  avatarHasSuffix?: InputMaybe<Scalars['String']>;
  avatarIn?: InputMaybe<Array<Scalars['String']>>;
  avatarLT?: InputMaybe<Scalars['String']>;
  avatarLTE?: InputMaybe<Scalars['String']>;
  avatarNEQ?: InputMaybe<Scalars['String']>;
  avatarNotIn?: InputMaybe<Array<Scalars['String']>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']>;
  createdAtGT?: InputMaybe<Scalars['Time']>;
  createdAtGTE?: InputMaybe<Scalars['Time']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']>>;
  createdAtLT?: InputMaybe<Scalars['Time']>;
  createdAtLTE?: InputMaybe<Scalars['Time']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']>>;
  /** email field predicates */
  email?: InputMaybe<Scalars['String']>;
  emailContains?: InputMaybe<Scalars['String']>;
  emailContainsFold?: InputMaybe<Scalars['String']>;
  emailEqualFold?: InputMaybe<Scalars['String']>;
  emailGT?: InputMaybe<Scalars['String']>;
  emailGTE?: InputMaybe<Scalars['String']>;
  emailHasPrefix?: InputMaybe<Scalars['String']>;
  emailHasSuffix?: InputMaybe<Scalars['String']>;
  emailIn?: InputMaybe<Array<Scalars['String']>>;
  emailLT?: InputMaybe<Scalars['String']>;
  emailLTE?: InputMaybe<Scalars['String']>;
  emailNEQ?: InputMaybe<Scalars['String']>;
  emailNotIn?: InputMaybe<Array<Scalars['String']>>;
  /** gender field predicates */
  gender?: InputMaybe<AccountGender>;
  genderIn?: InputMaybe<Array<AccountGender>>;
  genderNEQ?: InputMaybe<AccountGender>;
  genderNotIn?: InputMaybe<Array<AccountGender>>;
  /** comments edge predicates */
  hasComments?: InputMaybe<Scalars['Boolean']>;
  hasCommentsWith?: InputMaybe<Array<CommentWhereInput>>;
  /** friends edge predicates */
  hasFriends?: InputMaybe<Scalars['Boolean']>;
  hasFriendsWith?: InputMaybe<Array<AccountWhereInput>>;
  /** friendships edge predicates */
  hasFriendships?: InputMaybe<Scalars['Boolean']>;
  hasFriendshipsWith?: InputMaybe<Array<FriendWhereInput>>;
  /** likes edge predicates */
  hasLikes?: InputMaybe<Scalars['Boolean']>;
  hasLikesWith?: InputMaybe<Array<LikeWhereInput>>;
  /** mutes edge predicates */
  hasMutes?: InputMaybe<Scalars['Boolean']>;
  hasMutesWith?: InputMaybe<Array<MuteWhereInput>>;
  /** posts edge predicates */
  hasPosts?: InputMaybe<Scalars['Boolean']>;
  hasPostsWith?: InputMaybe<Array<PostWhereInput>>;
  /** requestTargets edge predicates */
  hasRequestTargets?: InputMaybe<Scalars['Boolean']>;
  hasRequestTargetsWith?: InputMaybe<Array<RequestWhereInput>>;
  /** requests edge predicates */
  hasRequests?: InputMaybe<Scalars['Boolean']>;
  hasRequestsWith?: InputMaybe<Array<AccountWhereInput>>;
  /** session edge predicates */
  hasSession?: InputMaybe<Scalars['Boolean']>;
  hasSessionWith?: InputMaybe<Array<SessionWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']>;
  idGT?: InputMaybe<Scalars['ID']>;
  idGTE?: InputMaybe<Scalars['ID']>;
  idIn?: InputMaybe<Array<Scalars['ID']>>;
  idLT?: InputMaybe<Scalars['ID']>;
  idLTE?: InputMaybe<Scalars['ID']>;
  idNEQ?: InputMaybe<Scalars['ID']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']>>;
  /** introduction field predicates */
  introduction?: InputMaybe<Scalars['String']>;
  introductionContains?: InputMaybe<Scalars['String']>;
  introductionContainsFold?: InputMaybe<Scalars['String']>;
  introductionEqualFold?: InputMaybe<Scalars['String']>;
  introductionGT?: InputMaybe<Scalars['String']>;
  introductionGTE?: InputMaybe<Scalars['String']>;
  introductionHasPrefix?: InputMaybe<Scalars['String']>;
  introductionHasSuffix?: InputMaybe<Scalars['String']>;
  introductionIn?: InputMaybe<Array<Scalars['String']>>;
  introductionLT?: InputMaybe<Scalars['String']>;
  introductionLTE?: InputMaybe<Scalars['String']>;
  introductionNEQ?: InputMaybe<Scalars['String']>;
  introductionNotIn?: InputMaybe<Array<Scalars['String']>>;
  /** name field predicates */
  name?: InputMaybe<Scalars['String']>;
  nameContains?: InputMaybe<Scalars['String']>;
  nameContainsFold?: InputMaybe<Scalars['String']>;
  nameEqualFold?: InputMaybe<Scalars['String']>;
  nameGT?: InputMaybe<Scalars['String']>;
  nameGTE?: InputMaybe<Scalars['String']>;
  nameHasPrefix?: InputMaybe<Scalars['String']>;
  nameHasSuffix?: InputMaybe<Scalars['String']>;
  nameIn?: InputMaybe<Array<Scalars['String']>>;
  nameLT?: InputMaybe<Scalars['String']>;
  nameLTE?: InputMaybe<Scalars['String']>;
  nameNEQ?: InputMaybe<Scalars['String']>;
  nameNotIn?: InputMaybe<Array<Scalars['String']>>;
  not?: InputMaybe<AccountWhereInput>;
  or?: InputMaybe<Array<AccountWhereInput>>;
  /** password field predicates */
  password?: InputMaybe<Scalars['String']>;
  passwordContains?: InputMaybe<Scalars['String']>;
  passwordContainsFold?: InputMaybe<Scalars['String']>;
  passwordEqualFold?: InputMaybe<Scalars['String']>;
  passwordGT?: InputMaybe<Scalars['String']>;
  passwordGTE?: InputMaybe<Scalars['String']>;
  passwordHasPrefix?: InputMaybe<Scalars['String']>;
  passwordHasSuffix?: InputMaybe<Scalars['String']>;
  passwordIn?: InputMaybe<Array<Scalars['String']>>;
  passwordLT?: InputMaybe<Scalars['String']>;
  passwordLTE?: InputMaybe<Scalars['String']>;
  passwordNEQ?: InputMaybe<Scalars['String']>;
  passwordNotIn?: InputMaybe<Array<Scalars['String']>>;
  /** type field predicates */
  type?: InputMaybe<AccountType>;
  typeIn?: InputMaybe<Array<AccountType>>;
  typeNEQ?: InputMaybe<AccountType>;
  typeNotIn?: InputMaybe<Array<AccountType>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']>;
  updatedAtGT?: InputMaybe<Scalars['Time']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']>>;
};

export type Comment = Node & {
  __typename?: 'Comment';
  account: Account;
  accountID: Scalars['ID'];
  body: Scalars['String'];
  createdAt: Scalars['Time'];
  id: Scalars['ID'];
  post: Post;
  postID: Scalars['ID'];
  updatedAt: Scalars['Time'];
};

/** Ordering options for Comment connections */
export type CommentOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Comments. */
  field: CommentOrderField;
};

/** Properties by which Comment connections can be ordered. */
export enum CommentOrderField {
  AccountId = 'ACCOUNT_ID',
  Body = 'BODY',
  CreatedAt = 'CREATED_AT',
  PostId = 'POST_ID',
  UpdatedAt = 'UPDATED_AT'
}

/**
 * CommentWhereInput is used for filtering Comment objects.
 * Input was generated by ent.
 */
export type CommentWhereInput = {
  /** account_id field predicates */
  accountID?: InputMaybe<Scalars['ID']>;
  accountIDIn?: InputMaybe<Array<Scalars['ID']>>;
  accountIDNEQ?: InputMaybe<Scalars['ID']>;
  accountIDNotIn?: InputMaybe<Array<Scalars['ID']>>;
  and?: InputMaybe<Array<CommentWhereInput>>;
  /** body field predicates */
  body?: InputMaybe<Scalars['String']>;
  bodyContains?: InputMaybe<Scalars['String']>;
  bodyContainsFold?: InputMaybe<Scalars['String']>;
  bodyEqualFold?: InputMaybe<Scalars['String']>;
  bodyGT?: InputMaybe<Scalars['String']>;
  bodyGTE?: InputMaybe<Scalars['String']>;
  bodyHasPrefix?: InputMaybe<Scalars['String']>;
  bodyHasSuffix?: InputMaybe<Scalars['String']>;
  bodyIn?: InputMaybe<Array<Scalars['String']>>;
  bodyLT?: InputMaybe<Scalars['String']>;
  bodyLTE?: InputMaybe<Scalars['String']>;
  bodyNEQ?: InputMaybe<Scalars['String']>;
  bodyNotIn?: InputMaybe<Array<Scalars['String']>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']>;
  createdAtGT?: InputMaybe<Scalars['Time']>;
  createdAtGTE?: InputMaybe<Scalars['Time']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']>>;
  createdAtLT?: InputMaybe<Scalars['Time']>;
  createdAtLTE?: InputMaybe<Scalars['Time']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']>>;
  /** account edge predicates */
  hasAccount?: InputMaybe<Scalars['Boolean']>;
  hasAccountWith?: InputMaybe<Array<AccountWhereInput>>;
  /** post edge predicates */
  hasPost?: InputMaybe<Scalars['Boolean']>;
  hasPostWith?: InputMaybe<Array<PostWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']>;
  idGT?: InputMaybe<Scalars['ID']>;
  idGTE?: InputMaybe<Scalars['ID']>;
  idIn?: InputMaybe<Array<Scalars['ID']>>;
  idLT?: InputMaybe<Scalars['ID']>;
  idLTE?: InputMaybe<Scalars['ID']>;
  idNEQ?: InputMaybe<Scalars['ID']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']>>;
  not?: InputMaybe<CommentWhereInput>;
  or?: InputMaybe<Array<CommentWhereInput>>;
  /** post_id field predicates */
  postID?: InputMaybe<Scalars['ID']>;
  postIDIn?: InputMaybe<Array<Scalars['ID']>>;
  postIDNEQ?: InputMaybe<Scalars['ID']>;
  postIDNotIn?: InputMaybe<Array<Scalars['ID']>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']>;
  updatedAtGT?: InputMaybe<Scalars['Time']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']>>;
};

/**
 * CreateAccountInput is used for create Account object.
 * Input was generated by ent.
 */
export type CreateAccountInput = {
  age: Scalars['Int'];
  avatar: Scalars['String'];
  commentIDs?: InputMaybe<Array<Scalars['ID']>>;
  createdAt?: InputMaybe<Scalars['Time']>;
  email: Scalars['String'];
  friendIDs?: InputMaybe<Array<Scalars['ID']>>;
  gender: AccountGender;
  introduction: Scalars['String'];
  likeIDs?: InputMaybe<Array<Scalars['ID']>>;
  muteIDs?: InputMaybe<Array<Scalars['ID']>>;
  name: Scalars['String'];
  password: Scalars['String'];
  postIDs?: InputMaybe<Array<Scalars['ID']>>;
  requestIDs?: InputMaybe<Array<Scalars['ID']>>;
  sessionIDs?: InputMaybe<Array<Scalars['ID']>>;
  type: AccountType;
  updatedAt?: InputMaybe<Scalars['Time']>;
};

/**
 * CreateCommentInput is used for create Comment object.
 * Input was generated by ent.
 */
export type CreateCommentInput = {
  accountID: Scalars['ID'];
  body: Scalars['String'];
  createdAt?: InputMaybe<Scalars['Time']>;
  postID: Scalars['ID'];
  updatedAt?: InputMaybe<Scalars['Time']>;
};

/**
 * CreateFriendInput is used for create Friend object.
 * Input was generated by ent.
 */
export type CreateFriendInput = {
  accountID: Scalars['ID'];
  createdAt?: InputMaybe<Scalars['Time']>;
  friendID: Scalars['ID'];
  updatedAt?: InputMaybe<Scalars['Time']>;
};

/**
 * CreateLikeInput is used for create Like object.
 * Input was generated by ent.
 */
export type CreateLikeInput = {
  accountID: Scalars['ID'];
  createdAt?: InputMaybe<Scalars['Time']>;
  postID: Scalars['ID'];
  updatedAt?: InputMaybe<Scalars['Time']>;
};

/**
 * CreateMarkerInput is used for create Marker object.
 * Input was generated by ent.
 */
export type CreateMarkerInput = {
  createdAt?: InputMaybe<Scalars['Time']>;
  lat: Scalars['String'];
  lng: Scalars['String'];
  postID: Scalars['ID'];
  title: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['Time']>;
};

/**
 * CreateMuteInput is used for create Mute object.
 * Input was generated by ent.
 */
export type CreateMuteInput = {
  accountID: Scalars['ID'];
  createdAt?: InputMaybe<Scalars['Time']>;
  muteID: Scalars['ID'];
  updatedAt?: InputMaybe<Scalars['Time']>;
};

/**
 * CreatePostInput is used for create Post object.
 * Input was generated by ent.
 */
export type CreatePostInput = {
  accountID: Scalars['ID'];
  body: Scalars['String'];
  commentIDs?: InputMaybe<Array<Scalars['ID']>>;
  createdAt?: InputMaybe<Scalars['Time']>;
  img: Scalars['String'];
  likeIDs?: InputMaybe<Array<Scalars['ID']>>;
  markerID?: InputMaybe<Scalars['ID']>;
  title: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['Time']>;
};

/**
 * CreateRequestInput is used for create Request object.
 * Input was generated by ent.
 */
export type CreateRequestInput = {
  accountID: Scalars['ID'];
  createdAt?: InputMaybe<Scalars['Time']>;
  requestID: Scalars['ID'];
  status: RequestStatus;
  updatedAt?: InputMaybe<Scalars['Time']>;
};

/**
 * CreateSessionInput is used for create Session object.
 * Input was generated by ent.
 */
export type CreateSessionInput = {
  accountID: Scalars['ID'];
  createdAt?: InputMaybe<Scalars['Time']>;
  session: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['Time']>;
};

export type Friend = Node & {
  __typename?: 'Friend';
  account: Account;
  accountID: Scalars['ID'];
  createdAt: Scalars['Time'];
  friend: Account;
  friendID: Scalars['ID'];
  id: Scalars['ID'];
  updatedAt: Scalars['Time'];
};

/** Ordering options for Friend connections */
export type FriendOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Friends. */
  field: FriendOrderField;
};

/** Properties by which Friend connections can be ordered. */
export enum FriendOrderField {
  AccountId = 'ACCOUNT_ID',
  CreatedAt = 'CREATED_AT',
  FriendId = 'FRIEND_ID',
  UpdatedAt = 'UPDATED_AT'
}

/**
 * FriendWhereInput is used for filtering Friend objects.
 * Input was generated by ent.
 */
export type FriendWhereInput = {
  and?: InputMaybe<Array<FriendWhereInput>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']>;
  createdAtGT?: InputMaybe<Scalars['Time']>;
  createdAtGTE?: InputMaybe<Scalars['Time']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']>>;
  createdAtLT?: InputMaybe<Scalars['Time']>;
  createdAtLTE?: InputMaybe<Scalars['Time']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']>;
  idGT?: InputMaybe<Scalars['ID']>;
  idGTE?: InputMaybe<Scalars['ID']>;
  idIn?: InputMaybe<Array<Scalars['ID']>>;
  idLT?: InputMaybe<Scalars['ID']>;
  idLTE?: InputMaybe<Scalars['ID']>;
  idNEQ?: InputMaybe<Scalars['ID']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']>>;
  not?: InputMaybe<FriendWhereInput>;
  or?: InputMaybe<Array<FriendWhereInput>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']>;
  updatedAtGT?: InputMaybe<Scalars['Time']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']>>;
};

export type Like = Node & {
  __typename?: 'Like';
  account: Account;
  accountID: Scalars['ID'];
  createdAt: Scalars['Time'];
  id: Scalars['ID'];
  post: Post;
  postID: Scalars['ID'];
  updatedAt: Scalars['Time'];
};

/** Ordering options for Like connections */
export type LikeOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Likes. */
  field: LikeOrderField;
};

/** Properties by which Like connections can be ordered. */
export enum LikeOrderField {
  AccountId = 'ACCOUNT_ID',
  CreatedAt = 'CREATED_AT',
  PostId = 'POST_ID',
  UpdatedAt = 'UPDATED_AT'
}

/**
 * LikeWhereInput is used for filtering Like objects.
 * Input was generated by ent.
 */
export type LikeWhereInput = {
  /** account_id field predicates */
  accountID?: InputMaybe<Scalars['ID']>;
  accountIDIn?: InputMaybe<Array<Scalars['ID']>>;
  accountIDNEQ?: InputMaybe<Scalars['ID']>;
  accountIDNotIn?: InputMaybe<Array<Scalars['ID']>>;
  and?: InputMaybe<Array<LikeWhereInput>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']>;
  createdAtGT?: InputMaybe<Scalars['Time']>;
  createdAtGTE?: InputMaybe<Scalars['Time']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']>>;
  createdAtLT?: InputMaybe<Scalars['Time']>;
  createdAtLTE?: InputMaybe<Scalars['Time']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']>>;
  /** account edge predicates */
  hasAccount?: InputMaybe<Scalars['Boolean']>;
  hasAccountWith?: InputMaybe<Array<AccountWhereInput>>;
  /** post edge predicates */
  hasPost?: InputMaybe<Scalars['Boolean']>;
  hasPostWith?: InputMaybe<Array<PostWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']>;
  idGT?: InputMaybe<Scalars['ID']>;
  idGTE?: InputMaybe<Scalars['ID']>;
  idIn?: InputMaybe<Array<Scalars['ID']>>;
  idLT?: InputMaybe<Scalars['ID']>;
  idLTE?: InputMaybe<Scalars['ID']>;
  idNEQ?: InputMaybe<Scalars['ID']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']>>;
  not?: InputMaybe<LikeWhereInput>;
  or?: InputMaybe<Array<LikeWhereInput>>;
  /** post_id field predicates */
  postID?: InputMaybe<Scalars['ID']>;
  postIDIn?: InputMaybe<Array<Scalars['ID']>>;
  postIDNEQ?: InputMaybe<Scalars['ID']>;
  postIDNotIn?: InputMaybe<Array<Scalars['ID']>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']>;
  updatedAtGT?: InputMaybe<Scalars['Time']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']>>;
};

export type Marker = Node & {
  __typename?: 'Marker';
  createdAt: Scalars['Time'];
  id: Scalars['ID'];
  lat: Scalars['String'];
  lng: Scalars['String'];
  post: Post;
  postID: Scalars['ID'];
  title: Scalars['String'];
  updatedAt: Scalars['Time'];
};

/** Ordering options for Marker connections */
export type MarkerOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Markers. */
  field: MarkerOrderField;
};

/** Properties by which Marker connections can be ordered. */
export enum MarkerOrderField {
  CreatedAt = 'CREATED_AT',
  Lat = 'LAT',
  Lng = 'LNG',
  PostId = 'POST_ID',
  Title = 'TITLE',
  UpdatedAt = 'UPDATED_AT'
}

/**
 * MarkerWhereInput is used for filtering Marker objects.
 * Input was generated by ent.
 */
export type MarkerWhereInput = {
  and?: InputMaybe<Array<MarkerWhereInput>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']>;
  createdAtGT?: InputMaybe<Scalars['Time']>;
  createdAtGTE?: InputMaybe<Scalars['Time']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']>>;
  createdAtLT?: InputMaybe<Scalars['Time']>;
  createdAtLTE?: InputMaybe<Scalars['Time']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']>>;
  /** post edge predicates */
  hasPost?: InputMaybe<Scalars['Boolean']>;
  hasPostWith?: InputMaybe<Array<PostWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']>;
  idGT?: InputMaybe<Scalars['ID']>;
  idGTE?: InputMaybe<Scalars['ID']>;
  idIn?: InputMaybe<Array<Scalars['ID']>>;
  idLT?: InputMaybe<Scalars['ID']>;
  idLTE?: InputMaybe<Scalars['ID']>;
  idNEQ?: InputMaybe<Scalars['ID']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']>>;
  /** lat field predicates */
  lat?: InputMaybe<Scalars['String']>;
  latContains?: InputMaybe<Scalars['String']>;
  latContainsFold?: InputMaybe<Scalars['String']>;
  latEqualFold?: InputMaybe<Scalars['String']>;
  latGT?: InputMaybe<Scalars['String']>;
  latGTE?: InputMaybe<Scalars['String']>;
  latHasPrefix?: InputMaybe<Scalars['String']>;
  latHasSuffix?: InputMaybe<Scalars['String']>;
  latIn?: InputMaybe<Array<Scalars['String']>>;
  latLT?: InputMaybe<Scalars['String']>;
  latLTE?: InputMaybe<Scalars['String']>;
  latNEQ?: InputMaybe<Scalars['String']>;
  latNotIn?: InputMaybe<Array<Scalars['String']>>;
  /** lng field predicates */
  lng?: InputMaybe<Scalars['String']>;
  lngContains?: InputMaybe<Scalars['String']>;
  lngContainsFold?: InputMaybe<Scalars['String']>;
  lngEqualFold?: InputMaybe<Scalars['String']>;
  lngGT?: InputMaybe<Scalars['String']>;
  lngGTE?: InputMaybe<Scalars['String']>;
  lngHasPrefix?: InputMaybe<Scalars['String']>;
  lngHasSuffix?: InputMaybe<Scalars['String']>;
  lngIn?: InputMaybe<Array<Scalars['String']>>;
  lngLT?: InputMaybe<Scalars['String']>;
  lngLTE?: InputMaybe<Scalars['String']>;
  lngNEQ?: InputMaybe<Scalars['String']>;
  lngNotIn?: InputMaybe<Array<Scalars['String']>>;
  not?: InputMaybe<MarkerWhereInput>;
  or?: InputMaybe<Array<MarkerWhereInput>>;
  /** post_id field predicates */
  postID?: InputMaybe<Scalars['ID']>;
  postIDIn?: InputMaybe<Array<Scalars['ID']>>;
  postIDNEQ?: InputMaybe<Scalars['ID']>;
  postIDNotIn?: InputMaybe<Array<Scalars['ID']>>;
  /** title field predicates */
  title?: InputMaybe<Scalars['String']>;
  titleContains?: InputMaybe<Scalars['String']>;
  titleContainsFold?: InputMaybe<Scalars['String']>;
  titleEqualFold?: InputMaybe<Scalars['String']>;
  titleGT?: InputMaybe<Scalars['String']>;
  titleGTE?: InputMaybe<Scalars['String']>;
  titleHasPrefix?: InputMaybe<Scalars['String']>;
  titleHasSuffix?: InputMaybe<Scalars['String']>;
  titleIn?: InputMaybe<Array<Scalars['String']>>;
  titleLT?: InputMaybe<Scalars['String']>;
  titleLTE?: InputMaybe<Scalars['String']>;
  titleNEQ?: InputMaybe<Scalars['String']>;
  titleNotIn?: InputMaybe<Array<Scalars['String']>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']>;
  updatedAtGT?: InputMaybe<Scalars['Time']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  CreateAccount: Account;
  CreateComment: Comment;
  CreateFriend: Friend;
  CreateLike: Like;
  CreateMarker: Marker;
  CreateMute: Mute;
  CreatePost: Post;
  CreateRequest: Request;
  CreateSession: Session;
  DeleteAccount: Account;
  DeleteComment: Comment;
  DeleteFriend: Friend;
  DeleteLike: Like;
  DeleteMarker: Marker;
  DeleteMute: Mute;
  DeletePost: Post;
  DeleteRequest: Request;
  DeleteSession: Session;
  UpdateAccount: Account;
  UpdateComment: Comment;
  UpdateMarker: Marker;
  UpdatePost: Post;
  UpdateRequest: Request;
  UpdateSession: Session;
};


export type MutationCreateAccountArgs = {
  input: CreateAccountInput;
};


export type MutationCreateCommentArgs = {
  input: CreateCommentInput;
};


export type MutationCreateFriendArgs = {
  input: CreateFriendInput;
};


export type MutationCreateLikeArgs = {
  input: CreateLikeInput;
};


export type MutationCreateMarkerArgs = {
  input: CreateMarkerInput;
};


export type MutationCreateMuteArgs = {
  input: CreateMuteInput;
};


export type MutationCreatePostArgs = {
  input: CreatePostInput;
};


export type MutationCreateRequestArgs = {
  input: CreateRequestInput;
};


export type MutationCreateSessionArgs = {
  input: CreateSessionInput;
};


export type MutationDeleteAccountArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteCommentArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteFriendArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteLikeArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteMarkerArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteMuteArgs = {
  id: Scalars['ID'];
};


export type MutationDeletePostArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteRequestArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteSessionArgs = {
  id: Scalars['ID'];
};


export type MutationUpdateAccountArgs = {
  id: Scalars['ID'];
  input: UpdateAccountInput;
};


export type MutationUpdateCommentArgs = {
  id: Scalars['ID'];
  input: UpdateCommentInput;
};


export type MutationUpdateMarkerArgs = {
  id: Scalars['ID'];
  input: UpdateMarkerInput;
};


export type MutationUpdatePostArgs = {
  id: Scalars['ID'];
  input: UpdatePostInput;
};


export type MutationUpdateRequestArgs = {
  id: Scalars['ID'];
  input: UpdateRequestInput;
};


export type MutationUpdateSessionArgs = {
  id: Scalars['ID'];
  input: UpdateSessionInput;
};

export type Mute = Node & {
  __typename?: 'Mute';
  account: Account;
  accountID: Scalars['ID'];
  createdAt: Scalars['Time'];
  id: Scalars['ID'];
  mute: Account;
  muteID: Scalars['ID'];
  updatedAt: Scalars['Time'];
};

/** Ordering options for Mute connections */
export type MuteOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Mutes. */
  field: MuteOrderField;
};

/** Properties by which Mute connections can be ordered. */
export enum MuteOrderField {
  AccountId = 'ACCOUNT_ID',
  CreatedAt = 'CREATED_AT',
  MuteId = 'MUTE_ID',
  UpdatedAt = 'UPDATED_AT'
}

/**
 * MuteWhereInput is used for filtering Mute objects.
 * Input was generated by ent.
 */
export type MuteWhereInput = {
  /** account_id field predicates */
  accountID?: InputMaybe<Scalars['ID']>;
  accountIDIn?: InputMaybe<Array<Scalars['ID']>>;
  accountIDNEQ?: InputMaybe<Scalars['ID']>;
  accountIDNotIn?: InputMaybe<Array<Scalars['ID']>>;
  and?: InputMaybe<Array<MuteWhereInput>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']>;
  createdAtGT?: InputMaybe<Scalars['Time']>;
  createdAtGTE?: InputMaybe<Scalars['Time']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']>>;
  createdAtLT?: InputMaybe<Scalars['Time']>;
  createdAtLTE?: InputMaybe<Scalars['Time']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']>>;
  /** account edge predicates */
  hasAccount?: InputMaybe<Scalars['Boolean']>;
  hasAccountWith?: InputMaybe<Array<AccountWhereInput>>;
  /** mute edge predicates */
  hasMute?: InputMaybe<Scalars['Boolean']>;
  hasMuteWith?: InputMaybe<Array<AccountWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']>;
  idGT?: InputMaybe<Scalars['ID']>;
  idGTE?: InputMaybe<Scalars['ID']>;
  idIn?: InputMaybe<Array<Scalars['ID']>>;
  idLT?: InputMaybe<Scalars['ID']>;
  idLTE?: InputMaybe<Scalars['ID']>;
  idNEQ?: InputMaybe<Scalars['ID']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']>>;
  /** mute_id field predicates */
  muteID?: InputMaybe<Scalars['ID']>;
  muteIDIn?: InputMaybe<Array<Scalars['ID']>>;
  muteIDNEQ?: InputMaybe<Scalars['ID']>;
  muteIDNotIn?: InputMaybe<Array<Scalars['ID']>>;
  not?: InputMaybe<MuteWhereInput>;
  or?: InputMaybe<Array<MuteWhereInput>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']>;
  updatedAtGT?: InputMaybe<Scalars['Time']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']>>;
};

/**
 * An object with an ID.
 * Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
 */
export type Node = {
  /** The id of the object. */
  id: Scalars['ID'];
};

/** Possible directions in which to order a list of items when provided an `orderBy` argument. */
export enum OrderDirection {
  /** Specifies an ascending order for a given `orderBy` argument. */
  Asc = 'ASC',
  /** Specifies a descending order for a given `orderBy` argument. */
  Desc = 'DESC'
}

/**
 * Information about pagination in a connection.
 * https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
 */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['Cursor']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['Cursor']>;
};

export type Post = Node & {
  __typename?: 'Post';
  account: Account;
  accountID: Scalars['ID'];
  body: Scalars['String'];
  comments?: Maybe<Array<Comment>>;
  createdAt: Scalars['Time'];
  id: Scalars['ID'];
  img: Scalars['String'];
  likes?: Maybe<Array<Like>>;
  marker?: Maybe<Marker>;
  title: Scalars['String'];
  updatedAt: Scalars['Time'];
};

/** Ordering options for Post connections */
export type PostOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Posts. */
  field: PostOrderField;
};

/** Properties by which Post connections can be ordered. */
export enum PostOrderField {
  AccountId = 'ACCOUNT_ID',
  Body = 'BODY',
  CreatedAt = 'CREATED_AT',
  Img = 'IMG',
  Title = 'TITLE',
  UpdatedAt = 'UPDATED_AT'
}

/**
 * PostWhereInput is used for filtering Post objects.
 * Input was generated by ent.
 */
export type PostWhereInput = {
  /** account_id field predicates */
  accountID?: InputMaybe<Scalars['ID']>;
  accountIDIn?: InputMaybe<Array<Scalars['ID']>>;
  accountIDNEQ?: InputMaybe<Scalars['ID']>;
  accountIDNotIn?: InputMaybe<Array<Scalars['ID']>>;
  and?: InputMaybe<Array<PostWhereInput>>;
  /** body field predicates */
  body?: InputMaybe<Scalars['String']>;
  bodyContains?: InputMaybe<Scalars['String']>;
  bodyContainsFold?: InputMaybe<Scalars['String']>;
  bodyEqualFold?: InputMaybe<Scalars['String']>;
  bodyGT?: InputMaybe<Scalars['String']>;
  bodyGTE?: InputMaybe<Scalars['String']>;
  bodyHasPrefix?: InputMaybe<Scalars['String']>;
  bodyHasSuffix?: InputMaybe<Scalars['String']>;
  bodyIn?: InputMaybe<Array<Scalars['String']>>;
  bodyLT?: InputMaybe<Scalars['String']>;
  bodyLTE?: InputMaybe<Scalars['String']>;
  bodyNEQ?: InputMaybe<Scalars['String']>;
  bodyNotIn?: InputMaybe<Array<Scalars['String']>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']>;
  createdAtGT?: InputMaybe<Scalars['Time']>;
  createdAtGTE?: InputMaybe<Scalars['Time']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']>>;
  createdAtLT?: InputMaybe<Scalars['Time']>;
  createdAtLTE?: InputMaybe<Scalars['Time']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']>>;
  /** account edge predicates */
  hasAccount?: InputMaybe<Scalars['Boolean']>;
  hasAccountWith?: InputMaybe<Array<AccountWhereInput>>;
  /** comments edge predicates */
  hasComments?: InputMaybe<Scalars['Boolean']>;
  hasCommentsWith?: InputMaybe<Array<CommentWhereInput>>;
  /** likes edge predicates */
  hasLikes?: InputMaybe<Scalars['Boolean']>;
  hasLikesWith?: InputMaybe<Array<LikeWhereInput>>;
  /** marker edge predicates */
  hasMarker?: InputMaybe<Scalars['Boolean']>;
  hasMarkerWith?: InputMaybe<Array<MarkerWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']>;
  idGT?: InputMaybe<Scalars['ID']>;
  idGTE?: InputMaybe<Scalars['ID']>;
  idIn?: InputMaybe<Array<Scalars['ID']>>;
  idLT?: InputMaybe<Scalars['ID']>;
  idLTE?: InputMaybe<Scalars['ID']>;
  idNEQ?: InputMaybe<Scalars['ID']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']>>;
  /** img field predicates */
  img?: InputMaybe<Scalars['String']>;
  imgContains?: InputMaybe<Scalars['String']>;
  imgContainsFold?: InputMaybe<Scalars['String']>;
  imgEqualFold?: InputMaybe<Scalars['String']>;
  imgGT?: InputMaybe<Scalars['String']>;
  imgGTE?: InputMaybe<Scalars['String']>;
  imgHasPrefix?: InputMaybe<Scalars['String']>;
  imgHasSuffix?: InputMaybe<Scalars['String']>;
  imgIn?: InputMaybe<Array<Scalars['String']>>;
  imgLT?: InputMaybe<Scalars['String']>;
  imgLTE?: InputMaybe<Scalars['String']>;
  imgNEQ?: InputMaybe<Scalars['String']>;
  imgNotIn?: InputMaybe<Array<Scalars['String']>>;
  not?: InputMaybe<PostWhereInput>;
  or?: InputMaybe<Array<PostWhereInput>>;
  /** title field predicates */
  title?: InputMaybe<Scalars['String']>;
  titleContains?: InputMaybe<Scalars['String']>;
  titleContainsFold?: InputMaybe<Scalars['String']>;
  titleEqualFold?: InputMaybe<Scalars['String']>;
  titleGT?: InputMaybe<Scalars['String']>;
  titleGTE?: InputMaybe<Scalars['String']>;
  titleHasPrefix?: InputMaybe<Scalars['String']>;
  titleHasSuffix?: InputMaybe<Scalars['String']>;
  titleIn?: InputMaybe<Array<Scalars['String']>>;
  titleLT?: InputMaybe<Scalars['String']>;
  titleLTE?: InputMaybe<Scalars['String']>;
  titleNEQ?: InputMaybe<Scalars['String']>;
  titleNotIn?: InputMaybe<Array<Scalars['String']>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']>;
  updatedAtGT?: InputMaybe<Scalars['Time']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']>>;
};

export type Query = {
  __typename?: 'Query';
  AccountByID: Account;
  AccountBySelfID: Account;
  LikesByPostID: Array<Like>;
  RequestsByAccountID: Array<Request>;
  RequestsByRequestID: Array<Request>;
  SessionByID: Session;
  accounts: Array<Account>;
  comments: Array<Comment>;
  friends: Array<Friend>;
  likes: Array<Like>;
  markers: Array<Marker>;
  mutes: Array<Mute>;
  /** Fetches an object given its ID. */
  node?: Maybe<Node>;
  /** Lookup nodes by a list of IDs. */
  nodes: Array<Maybe<Node>>;
  posts: Array<Post>;
  requests: Array<Request>;
  sessions: Array<Session>;
};


export type QueryAccountByIdArgs = {
  id: Scalars['ID'];
};


export type QueryAccountBySelfIdArgs = {
  id: Scalars['ID'];
};


export type QueryLikesByPostIdArgs = {
  postID: Scalars['ID'];
};


export type QueryRequestsByAccountIdArgs = {
  accountID: Scalars['ID'];
};


export type QueryRequestsByRequestIdArgs = {
  requestID: Scalars['ID'];
};


export type QuerySessionByIdArgs = {
  id: Scalars['ID'];
};


export type QueryNodeArgs = {
  id: Scalars['ID'];
};


export type QueryNodesArgs = {
  ids: Array<Scalars['ID']>;
};

export type Request = Node & {
  __typename?: 'Request';
  account: Account;
  accountID: Scalars['ID'];
  createdAt: Scalars['Time'];
  id: Scalars['ID'];
  request: Account;
  requestID: Scalars['ID'];
  status: RequestStatus;
  updatedAt: Scalars['Time'];
};

/** Ordering options for Request connections */
export type RequestOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Requests. */
  field: RequestOrderField;
};

/** Properties by which Request connections can be ordered. */
export enum RequestOrderField {
  AccountId = 'ACCOUNT_ID',
  CreatedAt = 'CREATED_AT',
  RequestId = 'REQUEST_ID',
  Status = 'STATUS',
  UpdatedAt = 'UPDATED_AT'
}

/** RequestStatus is enum for the field status */
export enum RequestStatus {
  Accept = 'ACCEPT',
  BreakDeny = 'BREAK_DENY',
  BreakInAccept = 'BREAK_IN_ACCEPT',
  BreakInProcess = 'BREAK_IN_PROCESS',
  Deny = 'DENY',
  InProcess = 'IN_PROCESS'
}

/**
 * RequestWhereInput is used for filtering Request objects.
 * Input was generated by ent.
 */
export type RequestWhereInput = {
  and?: InputMaybe<Array<RequestWhereInput>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']>;
  createdAtGT?: InputMaybe<Scalars['Time']>;
  createdAtGTE?: InputMaybe<Scalars['Time']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']>>;
  createdAtLT?: InputMaybe<Scalars['Time']>;
  createdAtLTE?: InputMaybe<Scalars['Time']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']>;
  idGT?: InputMaybe<Scalars['ID']>;
  idGTE?: InputMaybe<Scalars['ID']>;
  idIn?: InputMaybe<Array<Scalars['ID']>>;
  idLT?: InputMaybe<Scalars['ID']>;
  idLTE?: InputMaybe<Scalars['ID']>;
  idNEQ?: InputMaybe<Scalars['ID']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']>>;
  not?: InputMaybe<RequestWhereInput>;
  or?: InputMaybe<Array<RequestWhereInput>>;
  /** status field predicates */
  status?: InputMaybe<RequestStatus>;
  statusIn?: InputMaybe<Array<RequestStatus>>;
  statusNEQ?: InputMaybe<RequestStatus>;
  statusNotIn?: InputMaybe<Array<RequestStatus>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']>;
  updatedAtGT?: InputMaybe<Scalars['Time']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']>>;
};

export type Session = Node & {
  __typename?: 'Session';
  account: Account;
  accountID: Scalars['ID'];
  createdAt: Scalars['Time'];
  id: Scalars['ID'];
  session: Scalars['String'];
  updatedAt: Scalars['Time'];
};

/** Ordering options for Session connections */
export type SessionOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Sessions. */
  field: SessionOrderField;
};

/** Properties by which Session connections can be ordered. */
export enum SessionOrderField {
  AccountId = 'ACCOUNT_ID',
  CreatedAt = 'CREATED_AT',
  Session = 'SESSION',
  UpdatedAt = 'UPDATED_AT'
}

/**
 * SessionWhereInput is used for filtering Session objects.
 * Input was generated by ent.
 */
export type SessionWhereInput = {
  /** account_id field predicates */
  accountID?: InputMaybe<Scalars['ID']>;
  accountIDIn?: InputMaybe<Array<Scalars['ID']>>;
  accountIDNEQ?: InputMaybe<Scalars['ID']>;
  accountIDNotIn?: InputMaybe<Array<Scalars['ID']>>;
  and?: InputMaybe<Array<SessionWhereInput>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']>;
  createdAtGT?: InputMaybe<Scalars['Time']>;
  createdAtGTE?: InputMaybe<Scalars['Time']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']>>;
  createdAtLT?: InputMaybe<Scalars['Time']>;
  createdAtLTE?: InputMaybe<Scalars['Time']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']>>;
  /** account edge predicates */
  hasAccount?: InputMaybe<Scalars['Boolean']>;
  hasAccountWith?: InputMaybe<Array<AccountWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']>;
  idGT?: InputMaybe<Scalars['ID']>;
  idGTE?: InputMaybe<Scalars['ID']>;
  idIn?: InputMaybe<Array<Scalars['ID']>>;
  idLT?: InputMaybe<Scalars['ID']>;
  idLTE?: InputMaybe<Scalars['ID']>;
  idNEQ?: InputMaybe<Scalars['ID']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']>>;
  not?: InputMaybe<SessionWhereInput>;
  or?: InputMaybe<Array<SessionWhereInput>>;
  /** session field predicates */
  session?: InputMaybe<Scalars['String']>;
  sessionContains?: InputMaybe<Scalars['String']>;
  sessionContainsFold?: InputMaybe<Scalars['String']>;
  sessionEqualFold?: InputMaybe<Scalars['String']>;
  sessionGT?: InputMaybe<Scalars['String']>;
  sessionGTE?: InputMaybe<Scalars['String']>;
  sessionHasPrefix?: InputMaybe<Scalars['String']>;
  sessionHasSuffix?: InputMaybe<Scalars['String']>;
  sessionIn?: InputMaybe<Array<Scalars['String']>>;
  sessionLT?: InputMaybe<Scalars['String']>;
  sessionLTE?: InputMaybe<Scalars['String']>;
  sessionNEQ?: InputMaybe<Scalars['String']>;
  sessionNotIn?: InputMaybe<Array<Scalars['String']>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']>;
  updatedAtGT?: InputMaybe<Scalars['Time']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']>>;
};

/**
 * UpdateAccountInput is used for update Account object.
 * Input was generated by ent.
 */
export type UpdateAccountInput = {
  addCommentIDs?: InputMaybe<Array<Scalars['ID']>>;
  addFriendIDs?: InputMaybe<Array<Scalars['ID']>>;
  addLikeIDs?: InputMaybe<Array<Scalars['ID']>>;
  addMuteIDs?: InputMaybe<Array<Scalars['ID']>>;
  addPostIDs?: InputMaybe<Array<Scalars['ID']>>;
  addRequestIDs?: InputMaybe<Array<Scalars['ID']>>;
  addSessionIDs?: InputMaybe<Array<Scalars['ID']>>;
  age?: InputMaybe<Scalars['Int']>;
  avatar?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  gender?: InputMaybe<AccountGender>;
  introduction?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  password?: InputMaybe<Scalars['String']>;
  removeCommentIDs?: InputMaybe<Array<Scalars['ID']>>;
  removeFriendIDs?: InputMaybe<Array<Scalars['ID']>>;
  removeLikeIDs?: InputMaybe<Array<Scalars['ID']>>;
  removeMuteIDs?: InputMaybe<Array<Scalars['ID']>>;
  removePostIDs?: InputMaybe<Array<Scalars['ID']>>;
  removeRequestIDs?: InputMaybe<Array<Scalars['ID']>>;
  removeSessionIDs?: InputMaybe<Array<Scalars['ID']>>;
  type?: InputMaybe<AccountType>;
  updatedAt?: InputMaybe<Scalars['Time']>;
};

/**
 * UpdateCommentInput is used for update Comment object.
 * Input was generated by ent.
 */
export type UpdateCommentInput = {
  accountID?: InputMaybe<Scalars['ID']>;
  body?: InputMaybe<Scalars['String']>;
  clearAccount?: InputMaybe<Scalars['Boolean']>;
  clearPost?: InputMaybe<Scalars['Boolean']>;
  postID?: InputMaybe<Scalars['ID']>;
  updatedAt?: InputMaybe<Scalars['Time']>;
};

/**
 * UpdateFriendInput is used for update Friend object.
 * Input was generated by ent.
 */
export type UpdateFriendInput = {
  accountID?: InputMaybe<Scalars['ID']>;
  clearAccount?: InputMaybe<Scalars['Boolean']>;
  clearFriend?: InputMaybe<Scalars['Boolean']>;
  friendID?: InputMaybe<Scalars['ID']>;
  updatedAt?: InputMaybe<Scalars['Time']>;
};

/**
 * UpdateLikeInput is used for update Like object.
 * Input was generated by ent.
 */
export type UpdateLikeInput = {
  accountID?: InputMaybe<Scalars['ID']>;
  clearAccount?: InputMaybe<Scalars['Boolean']>;
  clearPost?: InputMaybe<Scalars['Boolean']>;
  postID?: InputMaybe<Scalars['ID']>;
  updatedAt?: InputMaybe<Scalars['Time']>;
};

/**
 * UpdateMarkerInput is used for update Marker object.
 * Input was generated by ent.
 */
export type UpdateMarkerInput = {
  clearPost?: InputMaybe<Scalars['Boolean']>;
  lat?: InputMaybe<Scalars['String']>;
  lng?: InputMaybe<Scalars['String']>;
  postID?: InputMaybe<Scalars['ID']>;
  title?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['Time']>;
};

/**
 * UpdateMuteInput is used for update Mute object.
 * Input was generated by ent.
 */
export type UpdateMuteInput = {
  accountID?: InputMaybe<Scalars['ID']>;
  clearAccount?: InputMaybe<Scalars['Boolean']>;
  clearMute?: InputMaybe<Scalars['Boolean']>;
  muteID?: InputMaybe<Scalars['ID']>;
  updatedAt?: InputMaybe<Scalars['Time']>;
};

/**
 * UpdatePostInput is used for update Post object.
 * Input was generated by ent.
 */
export type UpdatePostInput = {
  accountID?: InputMaybe<Scalars['ID']>;
  addCommentIDs?: InputMaybe<Array<Scalars['ID']>>;
  addLikeIDs?: InputMaybe<Array<Scalars['ID']>>;
  body?: InputMaybe<Scalars['String']>;
  clearAccount?: InputMaybe<Scalars['Boolean']>;
  clearMarker?: InputMaybe<Scalars['Boolean']>;
  img?: InputMaybe<Scalars['String']>;
  markerID?: InputMaybe<Scalars['ID']>;
  removeCommentIDs?: InputMaybe<Array<Scalars['ID']>>;
  removeLikeIDs?: InputMaybe<Array<Scalars['ID']>>;
  title?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['Time']>;
};

/**
 * UpdateRequestInput is used for update Request object.
 * Input was generated by ent.
 */
export type UpdateRequestInput = {
  accountID?: InputMaybe<Scalars['ID']>;
  clearAccount?: InputMaybe<Scalars['Boolean']>;
  clearRequest?: InputMaybe<Scalars['Boolean']>;
  requestID?: InputMaybe<Scalars['ID']>;
  status?: InputMaybe<RequestStatus>;
  updatedAt?: InputMaybe<Scalars['Time']>;
};

/**
 * UpdateSessionInput is used for update Session object.
 * Input was generated by ent.
 */
export type UpdateSessionInput = {
  accountID?: InputMaybe<Scalars['ID']>;
  clearAccount?: InputMaybe<Scalars['Boolean']>;
  session?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['Time']>;
};

export type CreateAccountMutationVariables = Exact<{
  email: Scalars['String'];
  password: Scalars['String'];
  type: AccountType;
  name: Scalars['String'];
  age: Scalars['Int'];
  gender: AccountGender;
  avatar: Scalars['String'];
  introduction: Scalars['String'];
}>;


export type CreateAccountMutation = { __typename?: 'Mutation', CreateAccount: { __typename?: 'Account', id: string, email: string, type: AccountType, name: string, age: number, gender: AccountGender, avatar: string, introduction: string } };

export type UpdateAccountMutationVariables = Exact<{
  id: Scalars['ID'];
  email: Scalars['String'];
  password: Scalars['String'];
  type: AccountType;
  name: Scalars['String'];
  age: Scalars['Int'];
  gender: AccountGender;
  avatar: Scalars['String'];
  introduction: Scalars['String'];
}>;


export type UpdateAccountMutation = { __typename?: 'Mutation', UpdateAccount: { __typename?: 'Account', id: string, email: string, type: AccountType, name: string, age: number, gender: AccountGender, avatar: string, introduction: string } };

export type DeleteAccountMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type DeleteAccountMutation = { __typename?: 'Mutation', DeleteAccount: { __typename?: 'Account', id: string, email: string, type: AccountType, name: string, age: number, gender: AccountGender, avatar: string, introduction: string } };

export type CreateCommentMutationVariables = Exact<{
  postID: Scalars['ID'];
  accountID: Scalars['ID'];
  body: Scalars['String'];
}>;


export type CreateCommentMutation = { __typename?: 'Mutation', CreateComment: { __typename?: 'Comment', id: string, postID: string, accountID: string, body: string } };

export type UpdateCommentMutationVariables = Exact<{
  id: Scalars['ID'];
  postID: Scalars['ID'];
  accountID: Scalars['ID'];
  body: Scalars['String'];
}>;


export type UpdateCommentMutation = { __typename?: 'Mutation', UpdateComment: { __typename?: 'Comment', id: string, postID: string, accountID: string, body: string } };

export type DeleteCommentMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type DeleteCommentMutation = { __typename?: 'Mutation', DeleteComment: { __typename?: 'Comment', id: string, postID: string, accountID: string, body: string } };

export type CreateFriendMutationVariables = Exact<{
  accountID: Scalars['ID'];
  friendID: Scalars['ID'];
}>;


export type CreateFriendMutation = { __typename?: 'Mutation', CreateFriend: { __typename?: 'Friend', id: string, accountID: string, friendID: string } };

export type DeleteFriendMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type DeleteFriendMutation = { __typename?: 'Mutation', DeleteFriend: { __typename?: 'Friend', id: string, accountID: string, friendID: string } };

export type CreateLikeMutationVariables = Exact<{
  postID: Scalars['ID'];
  accountID: Scalars['ID'];
}>;


export type CreateLikeMutation = { __typename?: 'Mutation', CreateLike: { __typename?: 'Like', id: string, postID: string, accountID: string } };

export type DeleteLikeMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type DeleteLikeMutation = { __typename?: 'Mutation', DeleteLike: { __typename?: 'Like', id: string, postID: string, accountID: string } };

export type CreateMarkerMutationVariables = Exact<{
  postID: Scalars['ID'];
  title: Scalars['String'];
  lat: Scalars['String'];
  lng: Scalars['String'];
}>;


export type CreateMarkerMutation = { __typename?: 'Mutation', CreateMarker: { __typename?: 'Marker', id: string, postID: string, title: string, lat: string, lng: string } };

export type UpdateMarkerMutationVariables = Exact<{
  id: Scalars['ID'];
  title: Scalars['String'];
  lat: Scalars['String'];
  lng: Scalars['String'];
}>;


export type UpdateMarkerMutation = { __typename?: 'Mutation', UpdateMarker: { __typename?: 'Marker', id: string, postID: string, title: string, lat: string, lng: string } };

export type DeleteMarkerMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type DeleteMarkerMutation = { __typename?: 'Mutation', DeleteMarker: { __typename?: 'Marker', id: string, postID: string, title: string, lat: string, lng: string } };

export type CreateMuteMutationVariables = Exact<{
  accountID: Scalars['ID'];
  muteID: Scalars['ID'];
}>;


export type CreateMuteMutation = { __typename?: 'Mutation', CreateMute: { __typename?: 'Mute', id: string, accountID: string, muteID: string } };

export type DeleteMuteMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type DeleteMuteMutation = { __typename?: 'Mutation', DeleteMute: { __typename?: 'Mute', id: string, accountID: string, muteID: string } };

export type CreatePostMutationVariables = Exact<{
  accountID: Scalars['ID'];
  title: Scalars['String'];
  body: Scalars['String'];
  img: Scalars['String'];
}>;


export type CreatePostMutation = { __typename?: 'Mutation', CreatePost: { __typename?: 'Post', id: string, accountID: string, title: string, body: string, img: string } };

export type UpdatePostMutationVariables = Exact<{
  id: Scalars['ID'];
  accountID: Scalars['ID'];
  title: Scalars['String'];
  body: Scalars['String'];
  img: Scalars['String'];
}>;


export type UpdatePostMutation = { __typename?: 'Mutation', UpdatePost: { __typename?: 'Post', id: string, accountID: string, title: string, body: string, img: string } };

export type DeletePostMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type DeletePostMutation = { __typename?: 'Mutation', DeletePost: { __typename?: 'Post', id: string, accountID: string, title: string, body: string, img: string } };

export type CreateRequestMutationVariables = Exact<{
  accountID: Scalars['ID'];
  requestID: Scalars['ID'];
  status: RequestStatus;
}>;


export type CreateRequestMutation = { __typename?: 'Mutation', CreateRequest: { __typename?: 'Request', id: string, accountID: string, requestID: string, status: RequestStatus } };

export type UpdateRequestMutationVariables = Exact<{
  id: Scalars['ID'];
  accountID: Scalars['ID'];
  requestID: Scalars['ID'];
  status: RequestStatus;
}>;


export type UpdateRequestMutation = { __typename?: 'Mutation', UpdateRequest: { __typename?: 'Request', id: string, accountID: string, requestID: string, status: RequestStatus } };

export type DeleteRequestMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type DeleteRequestMutation = { __typename?: 'Mutation', DeleteRequest: { __typename?: 'Request', id: string, accountID: string, requestID: string, status: RequestStatus } };

export type CreateSessionMutationVariables = Exact<{
  session: Scalars['String'];
  accountID: Scalars['ID'];
}>;


export type CreateSessionMutation = { __typename?: 'Mutation', CreateSession: { __typename?: 'Session', id: string, accountID: string } };

export type UpdateSessionMutationVariables = Exact<{
  id: Scalars['ID'];
  session: Scalars['String'];
  accountID: Scalars['ID'];
}>;


export type UpdateSessionMutation = { __typename?: 'Mutation', UpdateSession: { __typename?: 'Session', id: string, accountID: string, session: string } };

export type DeleteSessionMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type DeleteSessionMutation = { __typename?: 'Mutation', DeleteSession: { __typename?: 'Session', id: string, accountID: string } };

export type AccountByIdQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type AccountByIdQuery = { __typename?: 'Query', AccountByID: { __typename?: 'Account', id: string, name: string, age: number, gender: AccountGender, avatar: string, introduction: string, posts?: Array<{ __typename?: 'Post', id: string, title: string, updatedAt: any, likes?: Array<{ __typename?: 'Like', accountID: string }> | null }> | null, friends?: Array<{ __typename?: 'Account', friends?: Array<{ __typename?: 'Account', id: string, name: string, avatar: string }> | null }> | null } };

export type AccountBySelfIdQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type AccountBySelfIdQuery = { __typename?: 'Query', AccountBySelfID: { __typename?: 'Account', id: string, email: string, type: AccountType, name: string, age: number, gender: AccountGender, avatar: string, introduction: string, posts?: Array<{ __typename?: 'Post', id: string, title: string, createdAt: any, updatedAt: any, likes?: Array<{ __typename?: 'Like', accountID: string }> | null }> | null, likes?: Array<{ __typename?: 'Like', post: { __typename?: 'Post', id: string, accountID: string, title: string, updatedAt: any }, account: { __typename?: 'Account', id: string, name: string, avatar: string } }> | null, friends?: Array<{ __typename?: 'Account', friends?: Array<{ __typename?: 'Account', id: string, name: string, avatar: string }> | null }> | null, mutes?: Array<{ __typename?: 'Mute', mute: { __typename?: 'Account', id: string, name: string, avatar: string } }> | null } };

export type LikesByPostIdQueryVariables = Exact<{
  postID: Scalars['ID'];
}>;


export type LikesByPostIdQuery = { __typename?: 'Query', LikesByPostID: Array<{ __typename?: 'Like', id: string, createdAt: any, account: { __typename?: 'Account', id: string, name: string, avatar: string } }> };

export type MarkersQueryVariables = Exact<{ [key: string]: never; }>;


export type MarkersQuery = { __typename?: 'Query', markers: Array<{ __typename?: 'Marker', id: string, title: string, lat: string, lng: string, post: { __typename?: 'Post', id: string, title: string, body: string, img: string, account: { __typename?: 'Account', id: string, name: string, avatar: string }, likes?: Array<{ __typename?: 'Like', accountID: string }> | null } }> };

export type PostsQueryVariables = Exact<{ [key: string]: never; }>;


export type PostsQuery = { __typename?: 'Query', posts: Array<{ __typename?: 'Post', id: string, title: string, body: string, img: string, createdAt: any, updatedAt: any, account: { __typename?: 'Account', id: string, name: string, avatar: string }, marker?: { __typename?: 'Marker', id: string, title: string, lat: string, lng: string } | null, likes?: Array<{ __typename?: 'Like', id: string, accountID: string }> | null, comments?: Array<{ __typename?: 'Comment', id: string, body: string, account: { __typename?: 'Account', id: string, name: string, avatar: string } }> | null }> };

export type RequestsByAccountIdQueryVariables = Exact<{
  accountID: Scalars['ID'];
}>;


export type RequestsByAccountIdQuery = { __typename?: 'Query', RequestsByAccountID: Array<{ __typename?: 'Request', id: string, createdAt: any, updatedAt: any, request: { __typename?: 'Account', id: string, name: string, avatar: string } }> };

export type RequestsByRequestIdQueryVariables = Exact<{
  requestID: Scalars['ID'];
}>;


export type RequestsByRequestIdQuery = { __typename?: 'Query', RequestsByRequestID: Array<{ __typename?: 'Request', id: string, createdAt: any, account: { __typename?: 'Account', id: string, name: string, avatar: string } }> };

export type SessionByIdQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type SessionByIdQuery = { __typename?: 'Query', SessionByID: { __typename?: 'Session', id: string, session: string } };

import { IntrospectionQuery } from 'graphql';
export default {
  "__schema": {
    "queryType": {
      "name": "Query"
    },
    "mutationType": {
      "name": "Mutation"
    },
    "subscriptionType": null,
    "types": [
      {
        "kind": "OBJECT",
        "name": "Account",
        "fields": [
          {
            "name": "age",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "avatar",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "comments",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "Comment",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "createdAt",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "email",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "friends",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "Account",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "friendships",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "Friend",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "gender",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "introduction",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "likes",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "Like",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "mutes",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "Mute",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "name",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "password",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "posts",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "Post",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "requests",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "Account",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "requesttargets",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "Request",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "session",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "Session",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "type",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "updatedAt",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "Comment",
        "fields": [
          {
            "name": "account",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Account",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "accountID",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "body",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "createdAt",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "post",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Post",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "postID",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "updatedAt",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "Friend",
        "fields": [
          {
            "name": "account",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Account",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "accountID",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "createdAt",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "friend",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Account",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "friendID",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "updatedAt",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "Like",
        "fields": [
          {
            "name": "account",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Account",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "accountID",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "createdAt",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "post",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Post",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "postID",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "updatedAt",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "Marker",
        "fields": [
          {
            "name": "createdAt",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "lat",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "lng",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "post",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Post",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "postID",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "title",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "updatedAt",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "Mutation",
        "fields": [
          {
            "name": "CreateAccount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Account",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "CreateComment",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Comment",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "CreateFriend",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Friend",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "CreateLike",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Like",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "CreateMarker",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Marker",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "CreateMute",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Mute",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "CreatePost",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Post",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "CreateRequest",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Request",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "CreateSession",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Session",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "DeleteAccount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Account",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "DeleteComment",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Comment",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "DeleteFriend",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Friend",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "DeleteLike",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Like",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "DeleteMarker",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Marker",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "DeleteMute",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Mute",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "DeletePost",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Post",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "DeleteRequest",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Request",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "DeleteSession",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Session",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "UpdateAccount",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Account",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "UpdateComment",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Comment",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "UpdateMarker",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Marker",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "UpdatePost",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Post",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "UpdateRequest",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Request",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "UpdateSession",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Session",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "input",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Mute",
        "fields": [
          {
            "name": "account",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Account",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "accountID",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "createdAt",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "mute",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Account",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "muteID",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "updatedAt",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "Node",
        "fields": [
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [],
        "possibleTypes": [
          {
            "kind": "OBJECT",
            "name": "Account"
          },
          {
            "kind": "OBJECT",
            "name": "Comment"
          },
          {
            "kind": "OBJECT",
            "name": "Friend"
          },
          {
            "kind": "OBJECT",
            "name": "Like"
          },
          {
            "kind": "OBJECT",
            "name": "Marker"
          },
          {
            "kind": "OBJECT",
            "name": "Mute"
          },
          {
            "kind": "OBJECT",
            "name": "Post"
          },
          {
            "kind": "OBJECT",
            "name": "Request"
          },
          {
            "kind": "OBJECT",
            "name": "Session"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "PageInfo",
        "fields": [
          {
            "name": "endCursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "hasNextPage",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "hasPreviousPage",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "startCursor",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Post",
        "fields": [
          {
            "name": "account",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Account",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "accountID",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "body",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "comments",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "Comment",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "createdAt",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "img",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "likes",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "Like",
                  "ofType": null
                }
              }
            },
            "args": []
          },
          {
            "name": "marker",
            "type": {
              "kind": "OBJECT",
              "name": "Marker",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "title",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "updatedAt",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "Query",
        "fields": [
          {
            "name": "AccountByID",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Account",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "AccountBySelfID",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Account",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "LikesByPostID",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Like",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "postID",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "RequestsByAccountID",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Request",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "accountID",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "RequestsByRequestID",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Request",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "requestID",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "SessionByID",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Session",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "accounts",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Account",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "comments",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Comment",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "friends",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Friend",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "likes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Like",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "markers",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Marker",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "mutes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Mute",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "node",
            "type": {
              "kind": "INTERFACE",
              "name": "Node",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "INTERFACE",
                  "name": "Node",
                  "ofType": null
                }
              }
            },
            "args": [
              {
                "name": "ids",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "posts",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Post",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "requests",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Request",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          },
          {
            "name": "sessions",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Session",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "Request",
        "fields": [
          {
            "name": "account",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Account",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "accountID",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "createdAt",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "request",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Account",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "requestID",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "status",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "updatedAt",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "OBJECT",
        "name": "Session",
        "fields": [
          {
            "name": "account",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "Account",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "accountID",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "createdAt",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "session",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "updatedAt",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": [
          {
            "kind": "INTERFACE",
            "name": "Node"
          }
        ]
      },
      {
        "kind": "SCALAR",
        "name": "Any"
      }
    ],
    "directives": []
  }
} as unknown as IntrospectionQuery;

export const CreateAccountDocument = gql`
    mutation CreateAccount($email: String!, $password: String!, $type: AccountType!, $name: String!, $age: Int!, $gender: AccountGender!, $avatar: String!, $introduction: String!) {
  CreateAccount(
    input: {email: $email, password: $password, type: $type, name: $name, age: $age, gender: $gender, avatar: $avatar, introduction: $introduction}
  ) {
    id
    email
    type
    name
    age
    gender
    avatar
    introduction
  }
}
    `;

export function useCreateAccountMutation() {
  return Urql.useMutation<CreateAccountMutation, CreateAccountMutationVariables>(CreateAccountDocument);
};
export const UpdateAccountDocument = gql`
    mutation UpdateAccount($id: ID!, $email: String!, $password: String!, $type: AccountType!, $name: String!, $age: Int!, $gender: AccountGender!, $avatar: String!, $introduction: String!) {
  UpdateAccount(
    id: $id
    input: {email: $email, password: $password, type: $type, name: $name, age: $age, gender: $gender, avatar: $avatar, introduction: $introduction}
  ) {
    id
    email
    type
    name
    age
    gender
    avatar
    introduction
  }
}
    `;

export function useUpdateAccountMutation() {
  return Urql.useMutation<UpdateAccountMutation, UpdateAccountMutationVariables>(UpdateAccountDocument);
};
export const DeleteAccountDocument = gql`
    mutation DeleteAccount($id: ID!) {
  DeleteAccount(id: $id) {
    id
    email
    type
    name
    age
    gender
    avatar
    introduction
  }
}
    `;

export function useDeleteAccountMutation() {
  return Urql.useMutation<DeleteAccountMutation, DeleteAccountMutationVariables>(DeleteAccountDocument);
};
export const CreateCommentDocument = gql`
    mutation CreateComment($postID: ID!, $accountID: ID!, $body: String!) {
  CreateComment(input: {postID: $postID, accountID: $accountID, body: $body}) {
    id
    postID
    accountID
    body
  }
}
    `;

export function useCreateCommentMutation() {
  return Urql.useMutation<CreateCommentMutation, CreateCommentMutationVariables>(CreateCommentDocument);
};
export const UpdateCommentDocument = gql`
    mutation UpdateComment($id: ID!, $postID: ID!, $accountID: ID!, $body: String!) {
  UpdateComment(
    id: $id
    input: {postID: $postID, accountID: $accountID, body: $body}
  ) {
    id
    postID
    accountID
    body
  }
}
    `;

export function useUpdateCommentMutation() {
  return Urql.useMutation<UpdateCommentMutation, UpdateCommentMutationVariables>(UpdateCommentDocument);
};
export const DeleteCommentDocument = gql`
    mutation DeleteComment($id: ID!) {
  DeleteComment(id: $id) {
    id
    postID
    accountID
    body
  }
}
    `;

export function useDeleteCommentMutation() {
  return Urql.useMutation<DeleteCommentMutation, DeleteCommentMutationVariables>(DeleteCommentDocument);
};
export const CreateFriendDocument = gql`
    mutation CreateFriend($accountID: ID!, $friendID: ID!) {
  CreateFriend(input: {accountID: $accountID, friendID: $friendID}) {
    id
    accountID
    friendID
  }
}
    `;

export function useCreateFriendMutation() {
  return Urql.useMutation<CreateFriendMutation, CreateFriendMutationVariables>(CreateFriendDocument);
};
export const DeleteFriendDocument = gql`
    mutation DeleteFriend($id: ID!) {
  DeleteFriend(id: $id) {
    id
    accountID
    friendID
  }
}
    `;

export function useDeleteFriendMutation() {
  return Urql.useMutation<DeleteFriendMutation, DeleteFriendMutationVariables>(DeleteFriendDocument);
};
export const CreateLikeDocument = gql`
    mutation CreateLike($postID: ID!, $accountID: ID!) {
  CreateLike(input: {postID: $postID, accountID: $accountID}) {
    id
    postID
    accountID
  }
}
    `;

export function useCreateLikeMutation() {
  return Urql.useMutation<CreateLikeMutation, CreateLikeMutationVariables>(CreateLikeDocument);
};
export const DeleteLikeDocument = gql`
    mutation DeleteLike($id: ID!) {
  DeleteLike(id: $id) {
    id
    postID
    accountID
  }
}
    `;

export function useDeleteLikeMutation() {
  return Urql.useMutation<DeleteLikeMutation, DeleteLikeMutationVariables>(DeleteLikeDocument);
};
export const CreateMarkerDocument = gql`
    mutation CreateMarker($postID: ID!, $title: String!, $lat: String!, $lng: String!) {
  CreateMarker(input: {postID: $postID, title: $title, lat: $lat, lng: $lng}) {
    id
    postID
    title
    lat
    lng
  }
}
    `;

export function useCreateMarkerMutation() {
  return Urql.useMutation<CreateMarkerMutation, CreateMarkerMutationVariables>(CreateMarkerDocument);
};
export const UpdateMarkerDocument = gql`
    mutation UpdateMarker($id: ID!, $title: String!, $lat: String!, $lng: String!) {
  UpdateMarker(id: $id, input: {title: $title, lat: $lat, lng: $lng}) {
    id
    postID
    title
    lat
    lng
  }
}
    `;

export function useUpdateMarkerMutation() {
  return Urql.useMutation<UpdateMarkerMutation, UpdateMarkerMutationVariables>(UpdateMarkerDocument);
};
export const DeleteMarkerDocument = gql`
    mutation DeleteMarker($id: ID!) {
  DeleteMarker(id: $id) {
    id
    postID
    title
    lat
    lng
  }
}
    `;

export function useDeleteMarkerMutation() {
  return Urql.useMutation<DeleteMarkerMutation, DeleteMarkerMutationVariables>(DeleteMarkerDocument);
};
export const CreateMuteDocument = gql`
    mutation CreateMute($accountID: ID!, $muteID: ID!) {
  CreateMute(input: {accountID: $accountID, muteID: $muteID}) {
    id
    accountID
    muteID
  }
}
    `;

export function useCreateMuteMutation() {
  return Urql.useMutation<CreateMuteMutation, CreateMuteMutationVariables>(CreateMuteDocument);
};
export const DeleteMuteDocument = gql`
    mutation DeleteMute($id: ID!) {
  DeleteMute(id: $id) {
    id
    accountID
    muteID
  }
}
    `;

export function useDeleteMuteMutation() {
  return Urql.useMutation<DeleteMuteMutation, DeleteMuteMutationVariables>(DeleteMuteDocument);
};
export const CreatePostDocument = gql`
    mutation CreatePost($accountID: ID!, $title: String!, $body: String!, $img: String!) {
  CreatePost(
    input: {accountID: $accountID, title: $title, body: $body, img: $img}
  ) {
    id
    accountID
    title
    body
    img
  }
}
    `;

export function useCreatePostMutation() {
  return Urql.useMutation<CreatePostMutation, CreatePostMutationVariables>(CreatePostDocument);
};
export const UpdatePostDocument = gql`
    mutation UpdatePost($id: ID!, $accountID: ID!, $title: String!, $body: String!, $img: String!) {
  UpdatePost(
    id: $id
    input: {accountID: $accountID, title: $title, body: $body, img: $img}
  ) {
    id
    accountID
    title
    body
    img
  }
}
    `;

export function useUpdatePostMutation() {
  return Urql.useMutation<UpdatePostMutation, UpdatePostMutationVariables>(UpdatePostDocument);
};
export const DeletePostDocument = gql`
    mutation DeletePost($id: ID!) {
  DeletePost(id: $id) {
    id
    accountID
    title
    body
    img
  }
}
    `;

export function useDeletePostMutation() {
  return Urql.useMutation<DeletePostMutation, DeletePostMutationVariables>(DeletePostDocument);
};
export const CreateRequestDocument = gql`
    mutation CreateRequest($accountID: ID!, $requestID: ID!, $status: RequestStatus!) {
  CreateRequest(
    input: {accountID: $accountID, requestID: $requestID, status: $status}
  ) {
    id
    accountID
    requestID
    status
  }
}
    `;

export function useCreateRequestMutation() {
  return Urql.useMutation<CreateRequestMutation, CreateRequestMutationVariables>(CreateRequestDocument);
};
export const UpdateRequestDocument = gql`
    mutation UpdateRequest($id: ID!, $accountID: ID!, $requestID: ID!, $status: RequestStatus!) {
  UpdateRequest(
    id: $id
    input: {accountID: $accountID, requestID: $requestID, status: $status}
  ) {
    id
    accountID
    requestID
    status
  }
}
    `;

export function useUpdateRequestMutation() {
  return Urql.useMutation<UpdateRequestMutation, UpdateRequestMutationVariables>(UpdateRequestDocument);
};
export const DeleteRequestDocument = gql`
    mutation DeleteRequest($id: ID!) {
  DeleteRequest(id: $id) {
    id
    accountID
    requestID
    status
  }
}
    `;

export function useDeleteRequestMutation() {
  return Urql.useMutation<DeleteRequestMutation, DeleteRequestMutationVariables>(DeleteRequestDocument);
};
export const CreateSessionDocument = gql`
    mutation CreateSession($session: String!, $accountID: ID!) {
  CreateSession(input: {session: $session, accountID: $accountID}) {
    id
    accountID
  }
}
    `;

export function useCreateSessionMutation() {
  return Urql.useMutation<CreateSessionMutation, CreateSessionMutationVariables>(CreateSessionDocument);
};
export const UpdateSessionDocument = gql`
    mutation UpdateSession($id: ID!, $session: String!, $accountID: ID!) {
  UpdateSession(id: $id, input: {session: $session, accountID: $accountID}) {
    id
    accountID
    session
  }
}
    `;

export function useUpdateSessionMutation() {
  return Urql.useMutation<UpdateSessionMutation, UpdateSessionMutationVariables>(UpdateSessionDocument);
};
export const DeleteSessionDocument = gql`
    mutation DeleteSession($id: ID!) {
  DeleteSession(id: $id) {
    id
    accountID
  }
}
    `;

export function useDeleteSessionMutation() {
  return Urql.useMutation<DeleteSessionMutation, DeleteSessionMutationVariables>(DeleteSessionDocument);
};
export const AccountByIdDocument = gql`
    query AccountByID($id: ID!) {
  AccountByID(id: $id) {
    id
    name
    age
    gender
    avatar
    introduction
    posts {
      id
      title
      updatedAt
      likes {
        accountID
      }
    }
    friends {
      friends {
        id
        name
        avatar
      }
    }
  }
}
    `;

export function useAccountByIdQuery(options: Omit<Urql.UseQueryArgs<AccountByIdQueryVariables>, 'query'>) {
  return Urql.useQuery<AccountByIdQuery>({ query: AccountByIdDocument, ...options });
};
export const AccountBySelfIdDocument = gql`
    query AccountBySelfID($id: ID!) {
  AccountBySelfID(id: $id) {
    id
    email
    type
    name
    age
    gender
    avatar
    introduction
    posts {
      id
      title
      createdAt
      updatedAt
      likes {
        accountID
      }
    }
    likes {
      post {
        id
        accountID
        title
        updatedAt
      }
      account {
        id
        name
        avatar
      }
    }
    friends {
      friends {
        id
        name
        avatar
      }
    }
    mutes {
      mute {
        id
        name
        avatar
      }
    }
  }
}
    `;

export function useAccountBySelfIdQuery(options: Omit<Urql.UseQueryArgs<AccountBySelfIdQueryVariables>, 'query'>) {
  return Urql.useQuery<AccountBySelfIdQuery>({ query: AccountBySelfIdDocument, ...options });
};
export const LikesByPostIdDocument = gql`
    query LikesByPostID($postID: ID!) {
  LikesByPostID(postID: $postID) {
    id
    createdAt
    account {
      id
      name
      avatar
    }
  }
}
    `;

export function useLikesByPostIdQuery(options: Omit<Urql.UseQueryArgs<LikesByPostIdQueryVariables>, 'query'>) {
  return Urql.useQuery<LikesByPostIdQuery>({ query: LikesByPostIdDocument, ...options });
};
export const MarkersDocument = gql`
    query Markers {
  markers {
    id
    title
    lat
    lng
    post {
      id
      title
      body
      img
      account {
        id
        name
        avatar
      }
      likes {
        accountID
      }
    }
  }
}
    `;

export function useMarkersQuery(options?: Omit<Urql.UseQueryArgs<MarkersQueryVariables>, 'query'>) {
  return Urql.useQuery<MarkersQuery>({ query: MarkersDocument, ...options });
};
export const PostsDocument = gql`
    query Posts {
  posts {
    id
    title
    body
    img
    createdAt
    updatedAt
    account {
      id
      name
      avatar
    }
    marker {
      id
      title
      lat
      lng
    }
    likes {
      id
      accountID
    }
    comments {
      id
      body
      account {
        id
        name
        avatar
      }
    }
  }
}
    `;

export function usePostsQuery(options?: Omit<Urql.UseQueryArgs<PostsQueryVariables>, 'query'>) {
  return Urql.useQuery<PostsQuery>({ query: PostsDocument, ...options });
};
export const RequestsByAccountIdDocument = gql`
    query RequestsByAccountID($accountID: ID!) {
  RequestsByAccountID(accountID: $accountID) {
    id
    createdAt
    updatedAt
    request {
      id
      name
      avatar
    }
  }
}
    `;

export function useRequestsByAccountIdQuery(options: Omit<Urql.UseQueryArgs<RequestsByAccountIdQueryVariables>, 'query'>) {
  return Urql.useQuery<RequestsByAccountIdQuery>({ query: RequestsByAccountIdDocument, ...options });
};
export const RequestsByRequestIdDocument = gql`
    query RequestsByRequestID($requestID: ID!) {
  RequestsByRequestID(requestID: $requestID) {
    id
    createdAt
    account {
      id
      name
      avatar
    }
  }
}
    `;

export function useRequestsByRequestIdQuery(options: Omit<Urql.UseQueryArgs<RequestsByRequestIdQueryVariables>, 'query'>) {
  return Urql.useQuery<RequestsByRequestIdQuery>({ query: RequestsByRequestIdDocument, ...options });
};
export const SessionByIdDocument = gql`
    query SessionByID($id: ID!) {
  SessionByID(id: $id) {
    id
    session
  }
}
    `;

export function useSessionByIdQuery(options: Omit<Urql.UseQueryArgs<SessionByIdQueryVariables>, 'query'>) {
  return Urql.useQuery<SessionByIdQuery>({ query: SessionByIdDocument, ...options });
};