// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"github.com/99designs/gqlgen/graphql"
)

type CommentInput struct {
	UID    string `json:"uid"`
	PostID string `json:"post_id"`
	Body   string `json:"body"`
}

type File struct {
	Path string `json:"path"`
}

type FriendInput struct {
	Friends string `json:"friends"`
}

type LikedInput struct {
	Liked string `json:"liked"`
}

type Marker struct {
	ID     string  `json:"id"`
	PostID string  `json:"post_id"`
	Title  *string `json:"title"`
	Lat    *string `json:"lat"`
	Lng    *string `json:"lng"`
}

type MarkerInput struct {
	PostID string `json:"post_id"`
	Title  string `json:"title"`
	Lat    string `json:"lat"`
	Lng    string `json:"lng"`
}

type MuteInput struct {
	Mute string `json:"mute"`
}

type PostInput struct {
	UID   string `json:"uid"`
	Title string `json:"title"`
	Body  string `json:"body"`
	Img   string `json:"img"`
}

type Request struct {
	ID        string        `json:"id"`
	Request   *User         `json:"request"`
	Requested *User         `json:"requested"`
	Status    RequestStatus `json:"status"`
}

type RequestInput struct {
	Request   *string       `json:"request"`
	Requested *string       `json:"requested"`
	Status    RequestStatus `json:"status"`
}

type SessionInput struct {
	Session string `json:"session"`
}

type UploadFile struct {
	Content graphql.Upload `json:"content"`
}

type User struct {
	ID           string    `json:"id"`
	Email        *string   `json:"email"`
	Password     *string   `json:"password"`
	Type         *UserType `json:"type"`
	Session      *string   `json:"session"`
	Name         *string   `json:"name"`
	Age          *int      `json:"age"`
	Gender       *Gender   `json:"gender"`
	Avatar       *string   `json:"avatar"`
	Introduction *string   `json:"introduction"`
	Friends      []*string `json:"friends"`
	Mute         []*string `json:"mute"`
}

type UserInput struct {
	Email        string   `json:"email"`
	Password     string   `json:"password"`
	Type         UserType `json:"type"`
	Name         string   `json:"name"`
	Age          int      `json:"age"`
	Gender       Gender   `json:"gender"`
	Avatar       string   `json:"avatar"`
	Introduction string   `json:"introduction"`
}

type Gender string

const (
	GenderMale   Gender = "male"
	GenderFemale Gender = "female"
	GenderNone   Gender = "none"
)

var AllGender = []Gender{
	GenderMale,
	GenderFemale,
	GenderNone,
}

func (e Gender) IsValid() bool {
	switch e {
	case GenderMale, GenderFemale, GenderNone:
		return true
	}
	return false
}

func (e Gender) String() string {
	return string(e)
}

func (e *Gender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Gender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Gender", str)
	}
	return nil
}

func (e Gender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RequestStatus string

const (
	RequestStatusInProcess      RequestStatus = "in_process"
	RequestStatusAccept         RequestStatus = "accept"
	RequestStatusDeny           RequestStatus = "deny"
	RequestStatusBreakInProcess RequestStatus = "break_in_process"
	RequestStatusBreakAccept    RequestStatus = "break_accept"
	RequestStatusBreakDeny      RequestStatus = "break_deny"
	RequestStatusCancel         RequestStatus = "cancel"
)

var AllRequestStatus = []RequestStatus{
	RequestStatusInProcess,
	RequestStatusAccept,
	RequestStatusDeny,
	RequestStatusBreakInProcess,
	RequestStatusBreakAccept,
	RequestStatusBreakDeny,
	RequestStatusCancel,
}

func (e RequestStatus) IsValid() bool {
	switch e {
	case RequestStatusInProcess, RequestStatusAccept, RequestStatusDeny, RequestStatusBreakInProcess, RequestStatusBreakAccept, RequestStatusBreakDeny, RequestStatusCancel:
		return true
	}
	return false
}

func (e RequestStatus) String() string {
	return string(e)
}

func (e *RequestStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RequestStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RequestStatus", str)
	}
	return nil
}

func (e RequestStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserType string

const (
	UserTypeActive   UserType = "active"
	UserTypeInactive UserType = "inactive"
	UserTypeAdmin    UserType = "admin"
)

var AllUserType = []UserType{
	UserTypeActive,
	UserTypeInactive,
	UserTypeAdmin,
}

func (e UserType) IsValid() bool {
	switch e {
	case UserTypeActive, UserTypeInactive, UserTypeAdmin:
		return true
	}
	return false
}

func (e UserType) String() string {
	return string(e)
}

func (e *UserType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserType", str)
	}
	return nil
}

func (e UserType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
