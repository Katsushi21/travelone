# root type
schema {
  query: Query
  mutation: Mutation
}

type Query {
  Post: [Post]!
  User: [User]!
  Profile: [Profile]!
  Comment: [Comment]!
}

type Mutation {
  createPost(input: PostInput!): Post!
  createUser(input: UserInput!): User!
  createProfile(input: ProfileInput!): Profile!
  createMarker(input: MarkerInput!): Marker!
  createComment(input: CommentInput!): Comment!

  updatePost(id: ID!, input: PostInput): Post
  updateLiked(id: ID!, input: LikedInput): Post
  updateUser(id: ID!, input: UserInput): User
  updateProfile(id: ID!, input: ProfileInput): Profile
  updateMarker(id: ID!, input: MarkerInput): Marker
  updateComment(id: ID!, input: CommentInput): Comment

  uploadFile(input: UploadFile!): File!
}

# scalar
scalar Upload
scalar Timestamp

# Post
type Post {
  id: ID!
  user: User
  title: String
  body: String
  img: String
  marker: Marker
  liked: [User]
  registration: Timestamp
  modification: Timestamp
}

input PostInput {
  title: String!
  body: String!
  img: String!
  marker: MarkerInput!
}

input LikedInput {
  id: ID!
}

# User
type User {
  id: ID!
  email: String
  password: String
  usertype: UserType
}

enum UserType {
  active
  inactive
  admin
}

input UserInput {
  email: String!
  password: String!
}

# Profile
type Profile {
  id: ID!
  user: User
  name: String
  gender: Gender
  avatar: String
  introduction: String
  registration: Timestamp
}

enum Gender {
  male
  female
  none
}

input ProfileInput {
  name: String!
  gender: Gender!
  avatar: String!
  introduction: String!
}

# Marker
type Marker {
  id: ID!
  post: Post
  user: User
  title: String
  lat: String
  lng: String
  registration: Timestamp
  modification: Timestamp
}

input MarkerInput {
  title: String!
  lat: String!
  lng: String!
}

# Comment
type Comment {
  id: ID!
  post: Post
  user: User
  body: String
  registration: Timestamp
  modification: Timestamp
}

input CommentInput {
  body: String!
}

# File
type File {
  path: String!
}

input UploadFile {
  content: Upload!
}
