# root type
schema {
  query: Query
  mutation: Mutation
}

type Query {
  Post: [Post]!
  User: [User]!
  Comment: [Comment]!
  Marker: [Marker]!
  FriendRequest: [FriendRequest]!
}

type Mutation {
  createPost(input: PostInput!): Post!
  createUser(input: UserInput!): User!
  createMarker(input: MarkerInput!): Marker!
  createComment(input: CommentInput!): Comment!
  createFriendRequest(input: FriendRequestInput!): FriendRequest!

  updatePost(id: ID!, input: PostInput!): Post
  updateLiked(id: ID!, input: LikedInput!): Post
  updateUser(id: ID!, input: UserInput!): User
  updateMarker(id: ID!, input: MarkerInput!): Marker
  updateComment(id: ID!, input: CommentInput!): Comment
  uploadFile(input: UploadFile!): File!
  updateFriendRequest(id: ID!, input: FriendRequestInput!): FriendRequest

  deletePost(id: ID!): Post
  deleteLiked(id: ID!): Post
  deleteUser(id: ID!): User
  deleteMarker(id: ID!): Marker
  deleteComment(id: ID!): Comment
  deleteFriendRequest(id: ID!): FriendRequest
}

# scalar
scalar Upload
scalar Timestamp

# Post
type Post {
  id: ID!
  title: String!
  body: String!
  img: String
  marker: Marker
  comments: [Comment]
  liked: [User]
  registration: Timestamp
  modification: Timestamp
}

input PostInput {
  title: String!
  body: String!
  img: String!
  marker: MarkerInput!
}

input LikedInput {
  id: ID!
}

# User
type User {
  id: ID!
  email: String
  password: String
  type: UserType
  session: String
  name: String
  gender: Gender
  avatar: String
  introduction: String
  friends: [Int]
  mute: [Int]
}

enum UserType {
  active
  inactive
  admin
}

input UserInput {
  email: String!
  password: String!
  type: UserType!
  session: String!
  name: String!
  gender: Gender!
  avatar: String!
  introduction: String!
  friends: [Int]!
  mute: [Int]!
}

enum Gender {
  male
  female
  none
}

# Marker
type Marker {
  id: ID!
  title: String
  lat: String
  lng: String
}

input MarkerInput {
  title: String!
  lat: String!
  lng: String!
}

# Comment
type Comment {
  id: ID!
  user: User
  body: String
  registration: Timestamp
  modification: Timestamp
}

input CommentInput {
  body: String!
}

# File
type File {
  path: String!
}

input UploadFile {
  content: Upload!
}

# FriendRequest
type FriendRequest {
  id: ID!
  request_uid: User!
  requested_uid: User!
  status: RequestStatus!
}

enum RequestStatus {
  in_process
  accept
  deny
  break_in_process
  break_accept
  break_deny
  cancel
}

input FriendRequestInput {
  status: RequestStatus!
}
