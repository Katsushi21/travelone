# scalar
scalar Upload
scalar Time

# Post
type Post {
  id: ID!
  uid: Int
  title: String
  body: String
  img: String
  createdAt: Time
  updatedAt: Time
  user: User!
  marker: Marker
  like: [Like]
  comment: [Comment]
}

input PostInput {
  uid: Int!
  title: String!
  body: String!
  img: String!
}

type Like {
  post_id: Int
  uid: Int
  post: Post!
  user: User!
}

input LikeInput {
  post_id: Int!
  uid: Int!
}

# User
type User {
  id: ID!
  email: String
  password: String
  type: UserType
  session: String
  name: String!
  age: Int
  gender: Gender
  avatar: String
  introduction: String
  createdAt: Time
  updatedAt: Time
  friend: [Friend]
  mute: [Mute]
  post: [Post]
  like: [Like]
  comment: [Comment]
}

enum UserType {
  active
  inactive
  admin
}

input UserInput {
  email: String!
  password: String!
  type: UserType!
  name: String!
  age: Int!
  gender: Gender!
  avatar: String!
  introduction: String!
}

input SessionInput {
  uid: Int!
  session: String!
}

input LoginInput {
  email: String!
  password: String!
}

enum Gender {
  male
  female
  none
}

type Friend {
  uid: Int
  target_uid: Int
  user: User!
  target_user: User!
}

input FriendInput {
  uid: Int!
  target_uid: Int!
}

type Mute {
  uid: Int
  target_uid: Int
  user: User!
  target_user: User!
}

input MuteInput {
  uid: Int!
  target_uid: Int!
}

# Marker
type Marker {
  id: ID!
  post_id: Int
  title: String!
  lat: String!
  lng: String!
  createdAt: Time
  updatedAt: Time
  post: Post!
}

input MarkerInput {
  post_id: Int!
  title: String!
  lat: String!
  lng: String!
}

# Comment
type Comment {
  id: ID!
  post_id: Int
  uid: Int
  body: String!
  createdAt: Time
  updatedAt: Time
  post: Post!
  user: User!
}

input CommentInput {
  post_id: Int!
  uid: Int!
  body: String!
}

# File
type File {
  path: String!
}

input UploadFile {
  content: Upload!
}

# Request
type Request {
  request_uid: Int
  requested_uid: Int
  status: RequestStatus!
  createdAt: Time
  updatedAt: Time
  request_user: User!
  requested_user: User!
}

enum RequestStatus {
  in_process
  accept
  deny
  break_in_process
  break_accept
  break_deny
  cancel
}

input RequestInput {
  request_uid: Int!
  requested_uid: Int!
  status: RequestStatus!
}

type Query {
  Post: [Post]!
  User: [User]!
  Comment: [Comment]!
  Marker: [Marker]!
  Request: [Request]!
  Like: [Like]!
  Friend: [Friend]!
  Mute: [Mute]!
}

type Mutation {
  # CREATE
  createPost(input: PostInput!): Post!
  createUser(input: UserInput!): User!
  createMarker(input: MarkerInput!): Marker!
  createComment(input: CommentInput!): Comment!
  createRequest(input: RequestInput!): Request!
  createLike(input: LikeInput!): Like!
  createFriend(input: FriendInput!): Friend!
  createMute(input: MuteInput!): Mute!

  # UPDATE
  updatePost(id: ID!, input: PostInput!): Post!

  updateUser(id: ID!, input: UserInput!): User!
  updateSession(id: ID!, input: SessionInput!): User!

  updateMarker(id: ID!, input: MarkerInput!): Marker!
  uploadFile(input: UploadFile!): File!
  updateRequest(input: RequestInput!): Request!

  # DELETE
  deletePost(id: ID!): Post!
  deleteLike(input: LikeInput!): Like!

  deleteUser(id: ID!): User!
  deleteFriend(input: FriendInput!): Friend!
  deleteMute(input: MuteInput): Mute!

  deleteMarker(id: ID!): Marker!
  deleteComment(id: ID!): Comment!
  deleteRequest(input: RequestInput!): Request!

  # OTHER
  login(input: LoginInput!): User!
}
