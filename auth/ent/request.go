// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Katsushi21/travelone/ent/account"
	"github.com/Katsushi21/travelone/ent/request"
	"github.com/google/uuid"
)

// Request is the model entity for the Request schema.
type Request struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// AccountID holds the value of the "account_id" field.
	AccountID uuid.UUID `json:"account_id,omitempty"`
	// RequestID holds the value of the "request_id" field.
	RequestID uuid.UUID `json:"request_id,omitempty"`
	// Status holds the value of the "status" field.
	Status request.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RequestQuery when eager-loading is set.
	Edges RequestEdges `json:"edges"`
}

// RequestEdges holds the relations/edges for other nodes in the graph.
type RequestEdges struct {
	// Account holds the value of the account edge.
	Account *Account `json:"account,omitempty"`
	// Request holds the value of the request edge.
	Request *Account `json:"request,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// AccountOrErr returns the Account value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RequestEdges) AccountOrErr() (*Account, error) {
	if e.loadedTypes[0] {
		if e.Account == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: account.Label}
		}
		return e.Account, nil
	}
	return nil, &NotLoadedError{edge: "account"}
}

// RequestOrErr returns the Request value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RequestEdges) RequestOrErr() (*Account, error) {
	if e.loadedTypes[1] {
		if e.Request == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: account.Label}
		}
		return e.Request, nil
	}
	return nil, &NotLoadedError{edge: "request"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Request) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case request.FieldStatus:
			values[i] = new(sql.NullString)
		case request.FieldCreatedAt, request.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case request.FieldID, request.FieldAccountID, request.FieldRequestID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Request", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Request fields.
func (r *Request) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case request.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case request.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case request.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case request.FieldAccountID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field account_id", values[i])
			} else if value != nil {
				r.AccountID = *value
			}
		case request.FieldRequestID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field request_id", values[i])
			} else if value != nil {
				r.RequestID = *value
			}
		case request.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				r.Status = request.Status(value.String)
			}
		}
	}
	return nil
}

// QueryAccount queries the "account" edge of the Request entity.
func (r *Request) QueryAccount() *AccountQuery {
	return (&RequestClient{config: r.config}).QueryAccount(r)
}

// QueryRequest queries the "request" edge of the Request entity.
func (r *Request) QueryRequest() *AccountQuery {
	return (&RequestClient{config: r.config}).QueryRequest(r)
}

// Update returns a builder for updating this Request.
// Note that you need to call Request.Unwrap() before calling this method if this Request
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Request) Update() *RequestUpdateOne {
	return (&RequestClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Request entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Request) Unwrap() *Request {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Request is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Request) String() string {
	var builder strings.Builder
	builder.WriteString("Request(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("account_id=")
	builder.WriteString(fmt.Sprintf("%v", r.AccountID))
	builder.WriteString(", ")
	builder.WriteString("request_id=")
	builder.WriteString(fmt.Sprintf("%v", r.RequestID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", r.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Requests is a parsable slice of Request.
type Requests []*Request

func (r Requests) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
