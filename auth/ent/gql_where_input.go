// Code generated by ent, DO NOT EDIT.

package ent

import (
	"errors"
	"fmt"
	"time"

	"github.com/Katsushi21/travelone/ent/account"
	"github.com/Katsushi21/travelone/ent/comment"
	"github.com/Katsushi21/travelone/ent/friend"
	"github.com/Katsushi21/travelone/ent/like"
	"github.com/Katsushi21/travelone/ent/marker"
	"github.com/Katsushi21/travelone/ent/mute"
	"github.com/Katsushi21/travelone/ent/post"
	"github.com/Katsushi21/travelone/ent/predicate"
	"github.com/Katsushi21/travelone/ent/request"
	"github.com/Katsushi21/travelone/ent/session"
	"github.com/google/uuid"
)

// AccountWhereInput represents a where input for filtering Account queries.
type AccountWhereInput struct {
	Predicates []predicate.Account  `json:"-"`
	Not        *AccountWhereInput   `json:"not,omitempty"`
	Or         []*AccountWhereInput `json:"or,omitempty"`
	And        []*AccountWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *uuid.UUID  `json:"id,omitempty"`
	IDNEQ   *uuid.UUID  `json:"idNEQ,omitempty"`
	IDIn    []uuid.UUID `json:"idIn,omitempty"`
	IDNotIn []uuid.UUID `json:"idNotIn,omitempty"`
	IDGT    *uuid.UUID  `json:"idGT,omitempty"`
	IDGTE   *uuid.UUID  `json:"idGTE,omitempty"`
	IDLT    *uuid.UUID  `json:"idLT,omitempty"`
	IDLTE   *uuid.UUID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "email" field predicates.
	Email             *string  `json:"email,omitempty"`
	EmailNEQ          *string  `json:"emailNEQ,omitempty"`
	EmailIn           []string `json:"emailIn,omitempty"`
	EmailNotIn        []string `json:"emailNotIn,omitempty"`
	EmailGT           *string  `json:"emailGT,omitempty"`
	EmailGTE          *string  `json:"emailGTE,omitempty"`
	EmailLT           *string  `json:"emailLT,omitempty"`
	EmailLTE          *string  `json:"emailLTE,omitempty"`
	EmailContains     *string  `json:"emailContains,omitempty"`
	EmailHasPrefix    *string  `json:"emailHasPrefix,omitempty"`
	EmailHasSuffix    *string  `json:"emailHasSuffix,omitempty"`
	EmailEqualFold    *string  `json:"emailEqualFold,omitempty"`
	EmailContainsFold *string  `json:"emailContainsFold,omitempty"`

	// "password" field predicates.
	Password             *string  `json:"password,omitempty"`
	PasswordNEQ          *string  `json:"passwordNEQ,omitempty"`
	PasswordIn           []string `json:"passwordIn,omitempty"`
	PasswordNotIn        []string `json:"passwordNotIn,omitempty"`
	PasswordGT           *string  `json:"passwordGT,omitempty"`
	PasswordGTE          *string  `json:"passwordGTE,omitempty"`
	PasswordLT           *string  `json:"passwordLT,omitempty"`
	PasswordLTE          *string  `json:"passwordLTE,omitempty"`
	PasswordContains     *string  `json:"passwordContains,omitempty"`
	PasswordHasPrefix    *string  `json:"passwordHasPrefix,omitempty"`
	PasswordHasSuffix    *string  `json:"passwordHasSuffix,omitempty"`
	PasswordEqualFold    *string  `json:"passwordEqualFold,omitempty"`
	PasswordContainsFold *string  `json:"passwordContainsFold,omitempty"`

	// "type" field predicates.
	Type      *account.Type  `json:"type,omitempty"`
	TypeNEQ   *account.Type  `json:"typeNEQ,omitempty"`
	TypeIn    []account.Type `json:"typeIn,omitempty"`
	TypeNotIn []account.Type `json:"typeNotIn,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "age" field predicates.
	Age      *int  `json:"age,omitempty"`
	AgeNEQ   *int  `json:"ageNEQ,omitempty"`
	AgeIn    []int `json:"ageIn,omitempty"`
	AgeNotIn []int `json:"ageNotIn,omitempty"`
	AgeGT    *int  `json:"ageGT,omitempty"`
	AgeGTE   *int  `json:"ageGTE,omitempty"`
	AgeLT    *int  `json:"ageLT,omitempty"`
	AgeLTE   *int  `json:"ageLTE,omitempty"`

	// "gender" field predicates.
	Gender      *account.Gender  `json:"gender,omitempty"`
	GenderNEQ   *account.Gender  `json:"genderNEQ,omitempty"`
	GenderIn    []account.Gender `json:"genderIn,omitempty"`
	GenderNotIn []account.Gender `json:"genderNotIn,omitempty"`

	// "avatar" field predicates.
	Avatar             *string  `json:"avatar,omitempty"`
	AvatarNEQ          *string  `json:"avatarNEQ,omitempty"`
	AvatarIn           []string `json:"avatarIn,omitempty"`
	AvatarNotIn        []string `json:"avatarNotIn,omitempty"`
	AvatarGT           *string  `json:"avatarGT,omitempty"`
	AvatarGTE          *string  `json:"avatarGTE,omitempty"`
	AvatarLT           *string  `json:"avatarLT,omitempty"`
	AvatarLTE          *string  `json:"avatarLTE,omitempty"`
	AvatarContains     *string  `json:"avatarContains,omitempty"`
	AvatarHasPrefix    *string  `json:"avatarHasPrefix,omitempty"`
	AvatarHasSuffix    *string  `json:"avatarHasSuffix,omitempty"`
	AvatarEqualFold    *string  `json:"avatarEqualFold,omitempty"`
	AvatarContainsFold *string  `json:"avatarContainsFold,omitempty"`

	// "introduction" field predicates.
	Introduction             *string  `json:"introduction,omitempty"`
	IntroductionNEQ          *string  `json:"introductionNEQ,omitempty"`
	IntroductionIn           []string `json:"introductionIn,omitempty"`
	IntroductionNotIn        []string `json:"introductionNotIn,omitempty"`
	IntroductionGT           *string  `json:"introductionGT,omitempty"`
	IntroductionGTE          *string  `json:"introductionGTE,omitempty"`
	IntroductionLT           *string  `json:"introductionLT,omitempty"`
	IntroductionLTE          *string  `json:"introductionLTE,omitempty"`
	IntroductionContains     *string  `json:"introductionContains,omitempty"`
	IntroductionHasPrefix    *string  `json:"introductionHasPrefix,omitempty"`
	IntroductionHasSuffix    *string  `json:"introductionHasSuffix,omitempty"`
	IntroductionEqualFold    *string  `json:"introductionEqualFold,omitempty"`
	IntroductionContainsFold *string  `json:"introductionContainsFold,omitempty"`

	// "posts" edge predicates.
	HasPosts     *bool             `json:"hasPosts,omitempty"`
	HasPostsWith []*PostWhereInput `json:"hasPostsWith,omitempty"`

	// "comments" edge predicates.
	HasComments     *bool                `json:"hasComments,omitempty"`
	HasCommentsWith []*CommentWhereInput `json:"hasCommentsWith,omitempty"`

	// "friends" edge predicates.
	HasFriends     *bool                `json:"hasFriends,omitempty"`
	HasFriendsWith []*AccountWhereInput `json:"hasFriendsWith,omitempty"`

	// "mutes" edge predicates.
	HasMutes     *bool                `json:"hasMutes,omitempty"`
	HasMutesWith []*AccountWhereInput `json:"hasMutesWith,omitempty"`

	// "requests" edge predicates.
	HasRequests     *bool                `json:"hasRequests,omitempty"`
	HasRequestsWith []*AccountWhereInput `json:"hasRequestsWith,omitempty"`

	// "likes" edge predicates.
	HasLikes     *bool             `json:"hasLikes,omitempty"`
	HasLikesWith []*LikeWhereInput `json:"hasLikesWith,omitempty"`

	// "session" edge predicates.
	HasSession     *bool                `json:"hasSession,omitempty"`
	HasSessionWith []*SessionWhereInput `json:"hasSessionWith,omitempty"`

	// "friendship" edge predicates.
	HasFriendship     *bool               `json:"hasFriendship,omitempty"`
	HasFriendshipWith []*FriendWhereInput `json:"hasFriendshipWith,omitempty"`

	// "muteTarget" edge predicates.
	HasMuteTarget     *bool             `json:"hasMuteTarget,omitempty"`
	HasMuteTargetWith []*MuteWhereInput `json:"hasMuteTargetWith,omitempty"`

	// "requestTarget" edge predicates.
	HasRequestTarget     *bool                `json:"hasRequestTarget,omitempty"`
	HasRequestTargetWith []*RequestWhereInput `json:"hasRequestTargetWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *AccountWhereInput) AddPredicates(predicates ...predicate.Account) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the AccountWhereInput filter on the AccountQuery builder.
func (i *AccountWhereInput) Filter(q *AccountQuery) (*AccountQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyAccountWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyAccountWhereInput is returned in case the AccountWhereInput is empty.
var ErrEmptyAccountWhereInput = errors.New("ent: empty predicate AccountWhereInput")

// P returns a predicate for filtering accounts.
// An error is returned if the input is empty or invalid.
func (i *AccountWhereInput) P() (predicate.Account, error) {
	var predicates []predicate.Account
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, account.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Account, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, account.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Account, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, account.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, account.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, account.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, account.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, account.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, account.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, account.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, account.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, account.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, account.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, account.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, account.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, account.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, account.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, account.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, account.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, account.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, account.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, account.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, account.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, account.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, account.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, account.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, account.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, account.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Email != nil {
		predicates = append(predicates, account.EmailEQ(*i.Email))
	}
	if i.EmailNEQ != nil {
		predicates = append(predicates, account.EmailNEQ(*i.EmailNEQ))
	}
	if len(i.EmailIn) > 0 {
		predicates = append(predicates, account.EmailIn(i.EmailIn...))
	}
	if len(i.EmailNotIn) > 0 {
		predicates = append(predicates, account.EmailNotIn(i.EmailNotIn...))
	}
	if i.EmailGT != nil {
		predicates = append(predicates, account.EmailGT(*i.EmailGT))
	}
	if i.EmailGTE != nil {
		predicates = append(predicates, account.EmailGTE(*i.EmailGTE))
	}
	if i.EmailLT != nil {
		predicates = append(predicates, account.EmailLT(*i.EmailLT))
	}
	if i.EmailLTE != nil {
		predicates = append(predicates, account.EmailLTE(*i.EmailLTE))
	}
	if i.EmailContains != nil {
		predicates = append(predicates, account.EmailContains(*i.EmailContains))
	}
	if i.EmailHasPrefix != nil {
		predicates = append(predicates, account.EmailHasPrefix(*i.EmailHasPrefix))
	}
	if i.EmailHasSuffix != nil {
		predicates = append(predicates, account.EmailHasSuffix(*i.EmailHasSuffix))
	}
	if i.EmailEqualFold != nil {
		predicates = append(predicates, account.EmailEqualFold(*i.EmailEqualFold))
	}
	if i.EmailContainsFold != nil {
		predicates = append(predicates, account.EmailContainsFold(*i.EmailContainsFold))
	}
	if i.Password != nil {
		predicates = append(predicates, account.PasswordEQ(*i.Password))
	}
	if i.PasswordNEQ != nil {
		predicates = append(predicates, account.PasswordNEQ(*i.PasswordNEQ))
	}
	if len(i.PasswordIn) > 0 {
		predicates = append(predicates, account.PasswordIn(i.PasswordIn...))
	}
	if len(i.PasswordNotIn) > 0 {
		predicates = append(predicates, account.PasswordNotIn(i.PasswordNotIn...))
	}
	if i.PasswordGT != nil {
		predicates = append(predicates, account.PasswordGT(*i.PasswordGT))
	}
	if i.PasswordGTE != nil {
		predicates = append(predicates, account.PasswordGTE(*i.PasswordGTE))
	}
	if i.PasswordLT != nil {
		predicates = append(predicates, account.PasswordLT(*i.PasswordLT))
	}
	if i.PasswordLTE != nil {
		predicates = append(predicates, account.PasswordLTE(*i.PasswordLTE))
	}
	if i.PasswordContains != nil {
		predicates = append(predicates, account.PasswordContains(*i.PasswordContains))
	}
	if i.PasswordHasPrefix != nil {
		predicates = append(predicates, account.PasswordHasPrefix(*i.PasswordHasPrefix))
	}
	if i.PasswordHasSuffix != nil {
		predicates = append(predicates, account.PasswordHasSuffix(*i.PasswordHasSuffix))
	}
	if i.PasswordEqualFold != nil {
		predicates = append(predicates, account.PasswordEqualFold(*i.PasswordEqualFold))
	}
	if i.PasswordContainsFold != nil {
		predicates = append(predicates, account.PasswordContainsFold(*i.PasswordContainsFold))
	}
	if i.Type != nil {
		predicates = append(predicates, account.TypeEQ(*i.Type))
	}
	if i.TypeNEQ != nil {
		predicates = append(predicates, account.TypeNEQ(*i.TypeNEQ))
	}
	if len(i.TypeIn) > 0 {
		predicates = append(predicates, account.TypeIn(i.TypeIn...))
	}
	if len(i.TypeNotIn) > 0 {
		predicates = append(predicates, account.TypeNotIn(i.TypeNotIn...))
	}
	if i.Name != nil {
		predicates = append(predicates, account.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, account.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, account.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, account.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, account.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, account.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, account.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, account.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, account.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, account.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, account.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, account.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, account.NameContainsFold(*i.NameContainsFold))
	}
	if i.Age != nil {
		predicates = append(predicates, account.AgeEQ(*i.Age))
	}
	if i.AgeNEQ != nil {
		predicates = append(predicates, account.AgeNEQ(*i.AgeNEQ))
	}
	if len(i.AgeIn) > 0 {
		predicates = append(predicates, account.AgeIn(i.AgeIn...))
	}
	if len(i.AgeNotIn) > 0 {
		predicates = append(predicates, account.AgeNotIn(i.AgeNotIn...))
	}
	if i.AgeGT != nil {
		predicates = append(predicates, account.AgeGT(*i.AgeGT))
	}
	if i.AgeGTE != nil {
		predicates = append(predicates, account.AgeGTE(*i.AgeGTE))
	}
	if i.AgeLT != nil {
		predicates = append(predicates, account.AgeLT(*i.AgeLT))
	}
	if i.AgeLTE != nil {
		predicates = append(predicates, account.AgeLTE(*i.AgeLTE))
	}
	if i.Gender != nil {
		predicates = append(predicates, account.GenderEQ(*i.Gender))
	}
	if i.GenderNEQ != nil {
		predicates = append(predicates, account.GenderNEQ(*i.GenderNEQ))
	}
	if len(i.GenderIn) > 0 {
		predicates = append(predicates, account.GenderIn(i.GenderIn...))
	}
	if len(i.GenderNotIn) > 0 {
		predicates = append(predicates, account.GenderNotIn(i.GenderNotIn...))
	}
	if i.Avatar != nil {
		predicates = append(predicates, account.AvatarEQ(*i.Avatar))
	}
	if i.AvatarNEQ != nil {
		predicates = append(predicates, account.AvatarNEQ(*i.AvatarNEQ))
	}
	if len(i.AvatarIn) > 0 {
		predicates = append(predicates, account.AvatarIn(i.AvatarIn...))
	}
	if len(i.AvatarNotIn) > 0 {
		predicates = append(predicates, account.AvatarNotIn(i.AvatarNotIn...))
	}
	if i.AvatarGT != nil {
		predicates = append(predicates, account.AvatarGT(*i.AvatarGT))
	}
	if i.AvatarGTE != nil {
		predicates = append(predicates, account.AvatarGTE(*i.AvatarGTE))
	}
	if i.AvatarLT != nil {
		predicates = append(predicates, account.AvatarLT(*i.AvatarLT))
	}
	if i.AvatarLTE != nil {
		predicates = append(predicates, account.AvatarLTE(*i.AvatarLTE))
	}
	if i.AvatarContains != nil {
		predicates = append(predicates, account.AvatarContains(*i.AvatarContains))
	}
	if i.AvatarHasPrefix != nil {
		predicates = append(predicates, account.AvatarHasPrefix(*i.AvatarHasPrefix))
	}
	if i.AvatarHasSuffix != nil {
		predicates = append(predicates, account.AvatarHasSuffix(*i.AvatarHasSuffix))
	}
	if i.AvatarEqualFold != nil {
		predicates = append(predicates, account.AvatarEqualFold(*i.AvatarEqualFold))
	}
	if i.AvatarContainsFold != nil {
		predicates = append(predicates, account.AvatarContainsFold(*i.AvatarContainsFold))
	}
	if i.Introduction != nil {
		predicates = append(predicates, account.IntroductionEQ(*i.Introduction))
	}
	if i.IntroductionNEQ != nil {
		predicates = append(predicates, account.IntroductionNEQ(*i.IntroductionNEQ))
	}
	if len(i.IntroductionIn) > 0 {
		predicates = append(predicates, account.IntroductionIn(i.IntroductionIn...))
	}
	if len(i.IntroductionNotIn) > 0 {
		predicates = append(predicates, account.IntroductionNotIn(i.IntroductionNotIn...))
	}
	if i.IntroductionGT != nil {
		predicates = append(predicates, account.IntroductionGT(*i.IntroductionGT))
	}
	if i.IntroductionGTE != nil {
		predicates = append(predicates, account.IntroductionGTE(*i.IntroductionGTE))
	}
	if i.IntroductionLT != nil {
		predicates = append(predicates, account.IntroductionLT(*i.IntroductionLT))
	}
	if i.IntroductionLTE != nil {
		predicates = append(predicates, account.IntroductionLTE(*i.IntroductionLTE))
	}
	if i.IntroductionContains != nil {
		predicates = append(predicates, account.IntroductionContains(*i.IntroductionContains))
	}
	if i.IntroductionHasPrefix != nil {
		predicates = append(predicates, account.IntroductionHasPrefix(*i.IntroductionHasPrefix))
	}
	if i.IntroductionHasSuffix != nil {
		predicates = append(predicates, account.IntroductionHasSuffix(*i.IntroductionHasSuffix))
	}
	if i.IntroductionEqualFold != nil {
		predicates = append(predicates, account.IntroductionEqualFold(*i.IntroductionEqualFold))
	}
	if i.IntroductionContainsFold != nil {
		predicates = append(predicates, account.IntroductionContainsFold(*i.IntroductionContainsFold))
	}

	if i.HasPosts != nil {
		p := account.HasPosts()
		if !*i.HasPosts {
			p = account.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPostsWith) > 0 {
		with := make([]predicate.Post, 0, len(i.HasPostsWith))
		for _, w := range i.HasPostsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPostsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, account.HasPostsWith(with...))
	}
	if i.HasComments != nil {
		p := account.HasComments()
		if !*i.HasComments {
			p = account.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCommentsWith) > 0 {
		with := make([]predicate.Comment, 0, len(i.HasCommentsWith))
		for _, w := range i.HasCommentsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCommentsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, account.HasCommentsWith(with...))
	}
	if i.HasFriends != nil {
		p := account.HasFriends()
		if !*i.HasFriends {
			p = account.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFriendsWith) > 0 {
		with := make([]predicate.Account, 0, len(i.HasFriendsWith))
		for _, w := range i.HasFriendsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFriendsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, account.HasFriendsWith(with...))
	}
	if i.HasMutes != nil {
		p := account.HasMutes()
		if !*i.HasMutes {
			p = account.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasMutesWith) > 0 {
		with := make([]predicate.Account, 0, len(i.HasMutesWith))
		for _, w := range i.HasMutesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasMutesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, account.HasMutesWith(with...))
	}
	if i.HasRequests != nil {
		p := account.HasRequests()
		if !*i.HasRequests {
			p = account.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasRequestsWith) > 0 {
		with := make([]predicate.Account, 0, len(i.HasRequestsWith))
		for _, w := range i.HasRequestsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasRequestsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, account.HasRequestsWith(with...))
	}
	if i.HasLikes != nil {
		p := account.HasLikes()
		if !*i.HasLikes {
			p = account.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasLikesWith) > 0 {
		with := make([]predicate.Like, 0, len(i.HasLikesWith))
		for _, w := range i.HasLikesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasLikesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, account.HasLikesWith(with...))
	}
	if i.HasSession != nil {
		p := account.HasSession()
		if !*i.HasSession {
			p = account.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasSessionWith) > 0 {
		with := make([]predicate.Session, 0, len(i.HasSessionWith))
		for _, w := range i.HasSessionWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasSessionWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, account.HasSessionWith(with...))
	}
	if i.HasFriendship != nil {
		p := account.HasFriendship()
		if !*i.HasFriendship {
			p = account.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFriendshipWith) > 0 {
		with := make([]predicate.Friend, 0, len(i.HasFriendshipWith))
		for _, w := range i.HasFriendshipWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFriendshipWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, account.HasFriendshipWith(with...))
	}
	if i.HasMuteTarget != nil {
		p := account.HasMuteTarget()
		if !*i.HasMuteTarget {
			p = account.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasMuteTargetWith) > 0 {
		with := make([]predicate.Mute, 0, len(i.HasMuteTargetWith))
		for _, w := range i.HasMuteTargetWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasMuteTargetWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, account.HasMuteTargetWith(with...))
	}
	if i.HasRequestTarget != nil {
		p := account.HasRequestTarget()
		if !*i.HasRequestTarget {
			p = account.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasRequestTargetWith) > 0 {
		with := make([]predicate.Request, 0, len(i.HasRequestTargetWith))
		for _, w := range i.HasRequestTargetWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasRequestTargetWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, account.HasRequestTargetWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyAccountWhereInput
	case 1:
		return predicates[0], nil
	default:
		return account.And(predicates...), nil
	}
}

// CommentWhereInput represents a where input for filtering Comment queries.
type CommentWhereInput struct {
	Predicates []predicate.Comment  `json:"-"`
	Not        *CommentWhereInput   `json:"not,omitempty"`
	Or         []*CommentWhereInput `json:"or,omitempty"`
	And        []*CommentWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *uuid.UUID  `json:"id,omitempty"`
	IDNEQ   *uuid.UUID  `json:"idNEQ,omitempty"`
	IDIn    []uuid.UUID `json:"idIn,omitempty"`
	IDNotIn []uuid.UUID `json:"idNotIn,omitempty"`
	IDGT    *uuid.UUID  `json:"idGT,omitempty"`
	IDGTE   *uuid.UUID  `json:"idGTE,omitempty"`
	IDLT    *uuid.UUID  `json:"idLT,omitempty"`
	IDLTE   *uuid.UUID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "body" field predicates.
	Body             *string  `json:"body,omitempty"`
	BodyNEQ          *string  `json:"bodyNEQ,omitempty"`
	BodyIn           []string `json:"bodyIn,omitempty"`
	BodyNotIn        []string `json:"bodyNotIn,omitempty"`
	BodyGT           *string  `json:"bodyGT,omitempty"`
	BodyGTE          *string  `json:"bodyGTE,omitempty"`
	BodyLT           *string  `json:"bodyLT,omitempty"`
	BodyLTE          *string  `json:"bodyLTE,omitempty"`
	BodyContains     *string  `json:"bodyContains,omitempty"`
	BodyHasPrefix    *string  `json:"bodyHasPrefix,omitempty"`
	BodyHasSuffix    *string  `json:"bodyHasSuffix,omitempty"`
	BodyEqualFold    *string  `json:"bodyEqualFold,omitempty"`
	BodyContainsFold *string  `json:"bodyContainsFold,omitempty"`

	// "account_id" field predicates.
	AccountID      *uuid.UUID  `json:"accountID,omitempty"`
	AccountIDNEQ   *uuid.UUID  `json:"accountIDNEQ,omitempty"`
	AccountIDIn    []uuid.UUID `json:"accountIDIn,omitempty"`
	AccountIDNotIn []uuid.UUID `json:"accountIDNotIn,omitempty"`

	// "post_id" field predicates.
	PostID      *uuid.UUID  `json:"postID,omitempty"`
	PostIDNEQ   *uuid.UUID  `json:"postIDNEQ,omitempty"`
	PostIDIn    []uuid.UUID `json:"postIDIn,omitempty"`
	PostIDNotIn []uuid.UUID `json:"postIDNotIn,omitempty"`

	// "post" edge predicates.
	HasPost     *bool             `json:"hasPost,omitempty"`
	HasPostWith []*PostWhereInput `json:"hasPostWith,omitempty"`

	// "account" edge predicates.
	HasAccount     *bool                `json:"hasAccount,omitempty"`
	HasAccountWith []*AccountWhereInput `json:"hasAccountWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *CommentWhereInput) AddPredicates(predicates ...predicate.Comment) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the CommentWhereInput filter on the CommentQuery builder.
func (i *CommentWhereInput) Filter(q *CommentQuery) (*CommentQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyCommentWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyCommentWhereInput is returned in case the CommentWhereInput is empty.
var ErrEmptyCommentWhereInput = errors.New("ent: empty predicate CommentWhereInput")

// P returns a predicate for filtering comments.
// An error is returned if the input is empty or invalid.
func (i *CommentWhereInput) P() (predicate.Comment, error) {
	var predicates []predicate.Comment
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, comment.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Comment, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, comment.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Comment, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, comment.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, comment.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, comment.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, comment.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, comment.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, comment.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, comment.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, comment.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, comment.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, comment.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, comment.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, comment.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, comment.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, comment.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, comment.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, comment.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, comment.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, comment.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, comment.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, comment.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, comment.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, comment.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, comment.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, comment.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, comment.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Body != nil {
		predicates = append(predicates, comment.BodyEQ(*i.Body))
	}
	if i.BodyNEQ != nil {
		predicates = append(predicates, comment.BodyNEQ(*i.BodyNEQ))
	}
	if len(i.BodyIn) > 0 {
		predicates = append(predicates, comment.BodyIn(i.BodyIn...))
	}
	if len(i.BodyNotIn) > 0 {
		predicates = append(predicates, comment.BodyNotIn(i.BodyNotIn...))
	}
	if i.BodyGT != nil {
		predicates = append(predicates, comment.BodyGT(*i.BodyGT))
	}
	if i.BodyGTE != nil {
		predicates = append(predicates, comment.BodyGTE(*i.BodyGTE))
	}
	if i.BodyLT != nil {
		predicates = append(predicates, comment.BodyLT(*i.BodyLT))
	}
	if i.BodyLTE != nil {
		predicates = append(predicates, comment.BodyLTE(*i.BodyLTE))
	}
	if i.BodyContains != nil {
		predicates = append(predicates, comment.BodyContains(*i.BodyContains))
	}
	if i.BodyHasPrefix != nil {
		predicates = append(predicates, comment.BodyHasPrefix(*i.BodyHasPrefix))
	}
	if i.BodyHasSuffix != nil {
		predicates = append(predicates, comment.BodyHasSuffix(*i.BodyHasSuffix))
	}
	if i.BodyEqualFold != nil {
		predicates = append(predicates, comment.BodyEqualFold(*i.BodyEqualFold))
	}
	if i.BodyContainsFold != nil {
		predicates = append(predicates, comment.BodyContainsFold(*i.BodyContainsFold))
	}
	if i.AccountID != nil {
		predicates = append(predicates, comment.AccountIDEQ(*i.AccountID))
	}
	if i.AccountIDNEQ != nil {
		predicates = append(predicates, comment.AccountIDNEQ(*i.AccountIDNEQ))
	}
	if len(i.AccountIDIn) > 0 {
		predicates = append(predicates, comment.AccountIDIn(i.AccountIDIn...))
	}
	if len(i.AccountIDNotIn) > 0 {
		predicates = append(predicates, comment.AccountIDNotIn(i.AccountIDNotIn...))
	}
	if i.PostID != nil {
		predicates = append(predicates, comment.PostIDEQ(*i.PostID))
	}
	if i.PostIDNEQ != nil {
		predicates = append(predicates, comment.PostIDNEQ(*i.PostIDNEQ))
	}
	if len(i.PostIDIn) > 0 {
		predicates = append(predicates, comment.PostIDIn(i.PostIDIn...))
	}
	if len(i.PostIDNotIn) > 0 {
		predicates = append(predicates, comment.PostIDNotIn(i.PostIDNotIn...))
	}

	if i.HasPost != nil {
		p := comment.HasPost()
		if !*i.HasPost {
			p = comment.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPostWith) > 0 {
		with := make([]predicate.Post, 0, len(i.HasPostWith))
		for _, w := range i.HasPostWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPostWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, comment.HasPostWith(with...))
	}
	if i.HasAccount != nil {
		p := comment.HasAccount()
		if !*i.HasAccount {
			p = comment.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasAccountWith) > 0 {
		with := make([]predicate.Account, 0, len(i.HasAccountWith))
		for _, w := range i.HasAccountWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasAccountWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, comment.HasAccountWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyCommentWhereInput
	case 1:
		return predicates[0], nil
	default:
		return comment.And(predicates...), nil
	}
}

// FriendWhereInput represents a where input for filtering Friend queries.
type FriendWhereInput struct {
	Predicates []predicate.Friend  `json:"-"`
	Not        *FriendWhereInput   `json:"not,omitempty"`
	Or         []*FriendWhereInput `json:"or,omitempty"`
	And        []*FriendWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *uuid.UUID  `json:"id,omitempty"`
	IDNEQ   *uuid.UUID  `json:"idNEQ,omitempty"`
	IDIn    []uuid.UUID `json:"idIn,omitempty"`
	IDNotIn []uuid.UUID `json:"idNotIn,omitempty"`
	IDGT    *uuid.UUID  `json:"idGT,omitempty"`
	IDGTE   *uuid.UUID  `json:"idGTE,omitempty"`
	IDLT    *uuid.UUID  `json:"idLT,omitempty"`
	IDLTE   *uuid.UUID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "account_id" field predicates.
	AccountID      *uuid.UUID  `json:"accountID,omitempty"`
	AccountIDNEQ   *uuid.UUID  `json:"accountIDNEQ,omitempty"`
	AccountIDIn    []uuid.UUID `json:"accountIDIn,omitempty"`
	AccountIDNotIn []uuid.UUID `json:"accountIDNotIn,omitempty"`

	// "friend_id" field predicates.
	FriendID      *uuid.UUID  `json:"friendID,omitempty"`
	FriendIDNEQ   *uuid.UUID  `json:"friendIDNEQ,omitempty"`
	FriendIDIn    []uuid.UUID `json:"friendIDIn,omitempty"`
	FriendIDNotIn []uuid.UUID `json:"friendIDNotIn,omitempty"`

	// "account" edge predicates.
	HasAccount     *bool                `json:"hasAccount,omitempty"`
	HasAccountWith []*AccountWhereInput `json:"hasAccountWith,omitempty"`

	// "friend" edge predicates.
	HasFriend     *bool                `json:"hasFriend,omitempty"`
	HasFriendWith []*AccountWhereInput `json:"hasFriendWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *FriendWhereInput) AddPredicates(predicates ...predicate.Friend) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the FriendWhereInput filter on the FriendQuery builder.
func (i *FriendWhereInput) Filter(q *FriendQuery) (*FriendQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyFriendWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyFriendWhereInput is returned in case the FriendWhereInput is empty.
var ErrEmptyFriendWhereInput = errors.New("ent: empty predicate FriendWhereInput")

// P returns a predicate for filtering friends.
// An error is returned if the input is empty or invalid.
func (i *FriendWhereInput) P() (predicate.Friend, error) {
	var predicates []predicate.Friend
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, friend.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Friend, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, friend.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Friend, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, friend.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, friend.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, friend.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, friend.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, friend.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, friend.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, friend.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, friend.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, friend.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, friend.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, friend.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, friend.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, friend.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, friend.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, friend.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, friend.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, friend.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, friend.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, friend.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, friend.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, friend.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, friend.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, friend.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, friend.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, friend.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.AccountID != nil {
		predicates = append(predicates, friend.AccountIDEQ(*i.AccountID))
	}
	if i.AccountIDNEQ != nil {
		predicates = append(predicates, friend.AccountIDNEQ(*i.AccountIDNEQ))
	}
	if len(i.AccountIDIn) > 0 {
		predicates = append(predicates, friend.AccountIDIn(i.AccountIDIn...))
	}
	if len(i.AccountIDNotIn) > 0 {
		predicates = append(predicates, friend.AccountIDNotIn(i.AccountIDNotIn...))
	}
	if i.FriendID != nil {
		predicates = append(predicates, friend.FriendIDEQ(*i.FriendID))
	}
	if i.FriendIDNEQ != nil {
		predicates = append(predicates, friend.FriendIDNEQ(*i.FriendIDNEQ))
	}
	if len(i.FriendIDIn) > 0 {
		predicates = append(predicates, friend.FriendIDIn(i.FriendIDIn...))
	}
	if len(i.FriendIDNotIn) > 0 {
		predicates = append(predicates, friend.FriendIDNotIn(i.FriendIDNotIn...))
	}

	if i.HasAccount != nil {
		p := friend.HasAccount()
		if !*i.HasAccount {
			p = friend.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasAccountWith) > 0 {
		with := make([]predicate.Account, 0, len(i.HasAccountWith))
		for _, w := range i.HasAccountWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasAccountWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, friend.HasAccountWith(with...))
	}
	if i.HasFriend != nil {
		p := friend.HasFriend()
		if !*i.HasFriend {
			p = friend.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFriendWith) > 0 {
		with := make([]predicate.Account, 0, len(i.HasFriendWith))
		for _, w := range i.HasFriendWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFriendWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, friend.HasFriendWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyFriendWhereInput
	case 1:
		return predicates[0], nil
	default:
		return friend.And(predicates...), nil
	}
}

// LikeWhereInput represents a where input for filtering Like queries.
type LikeWhereInput struct {
	Predicates []predicate.Like  `json:"-"`
	Not        *LikeWhereInput   `json:"not,omitempty"`
	Or         []*LikeWhereInput `json:"or,omitempty"`
	And        []*LikeWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *uuid.UUID  `json:"id,omitempty"`
	IDNEQ   *uuid.UUID  `json:"idNEQ,omitempty"`
	IDIn    []uuid.UUID `json:"idIn,omitempty"`
	IDNotIn []uuid.UUID `json:"idNotIn,omitempty"`
	IDGT    *uuid.UUID  `json:"idGT,omitempty"`
	IDGTE   *uuid.UUID  `json:"idGTE,omitempty"`
	IDLT    *uuid.UUID  `json:"idLT,omitempty"`
	IDLTE   *uuid.UUID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "account_id" field predicates.
	AccountID      *uuid.UUID  `json:"accountID,omitempty"`
	AccountIDNEQ   *uuid.UUID  `json:"accountIDNEQ,omitempty"`
	AccountIDIn    []uuid.UUID `json:"accountIDIn,omitempty"`
	AccountIDNotIn []uuid.UUID `json:"accountIDNotIn,omitempty"`

	// "post_id" field predicates.
	PostID      *uuid.UUID  `json:"postID,omitempty"`
	PostIDNEQ   *uuid.UUID  `json:"postIDNEQ,omitempty"`
	PostIDIn    []uuid.UUID `json:"postIDIn,omitempty"`
	PostIDNotIn []uuid.UUID `json:"postIDNotIn,omitempty"`

	// "account" edge predicates.
	HasAccount     *bool                `json:"hasAccount,omitempty"`
	HasAccountWith []*AccountWhereInput `json:"hasAccountWith,omitempty"`

	// "post" edge predicates.
	HasPost     *bool             `json:"hasPost,omitempty"`
	HasPostWith []*PostWhereInput `json:"hasPostWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *LikeWhereInput) AddPredicates(predicates ...predicate.Like) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the LikeWhereInput filter on the LikeQuery builder.
func (i *LikeWhereInput) Filter(q *LikeQuery) (*LikeQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyLikeWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyLikeWhereInput is returned in case the LikeWhereInput is empty.
var ErrEmptyLikeWhereInput = errors.New("ent: empty predicate LikeWhereInput")

// P returns a predicate for filtering likes.
// An error is returned if the input is empty or invalid.
func (i *LikeWhereInput) P() (predicate.Like, error) {
	var predicates []predicate.Like
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, like.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Like, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, like.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Like, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, like.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, like.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, like.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, like.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, like.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, like.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, like.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, like.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, like.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, like.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, like.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, like.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, like.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, like.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, like.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, like.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, like.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, like.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, like.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, like.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, like.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, like.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, like.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, like.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, like.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.AccountID != nil {
		predicates = append(predicates, like.AccountIDEQ(*i.AccountID))
	}
	if i.AccountIDNEQ != nil {
		predicates = append(predicates, like.AccountIDNEQ(*i.AccountIDNEQ))
	}
	if len(i.AccountIDIn) > 0 {
		predicates = append(predicates, like.AccountIDIn(i.AccountIDIn...))
	}
	if len(i.AccountIDNotIn) > 0 {
		predicates = append(predicates, like.AccountIDNotIn(i.AccountIDNotIn...))
	}
	if i.PostID != nil {
		predicates = append(predicates, like.PostIDEQ(*i.PostID))
	}
	if i.PostIDNEQ != nil {
		predicates = append(predicates, like.PostIDNEQ(*i.PostIDNEQ))
	}
	if len(i.PostIDIn) > 0 {
		predicates = append(predicates, like.PostIDIn(i.PostIDIn...))
	}
	if len(i.PostIDNotIn) > 0 {
		predicates = append(predicates, like.PostIDNotIn(i.PostIDNotIn...))
	}

	if i.HasAccount != nil {
		p := like.HasAccount()
		if !*i.HasAccount {
			p = like.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasAccountWith) > 0 {
		with := make([]predicate.Account, 0, len(i.HasAccountWith))
		for _, w := range i.HasAccountWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasAccountWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, like.HasAccountWith(with...))
	}
	if i.HasPost != nil {
		p := like.HasPost()
		if !*i.HasPost {
			p = like.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPostWith) > 0 {
		with := make([]predicate.Post, 0, len(i.HasPostWith))
		for _, w := range i.HasPostWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPostWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, like.HasPostWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyLikeWhereInput
	case 1:
		return predicates[0], nil
	default:
		return like.And(predicates...), nil
	}
}

// MarkerWhereInput represents a where input for filtering Marker queries.
type MarkerWhereInput struct {
	Predicates []predicate.Marker  `json:"-"`
	Not        *MarkerWhereInput   `json:"not,omitempty"`
	Or         []*MarkerWhereInput `json:"or,omitempty"`
	And        []*MarkerWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *uuid.UUID  `json:"id,omitempty"`
	IDNEQ   *uuid.UUID  `json:"idNEQ,omitempty"`
	IDIn    []uuid.UUID `json:"idIn,omitempty"`
	IDNotIn []uuid.UUID `json:"idNotIn,omitempty"`
	IDGT    *uuid.UUID  `json:"idGT,omitempty"`
	IDGTE   *uuid.UUID  `json:"idGTE,omitempty"`
	IDLT    *uuid.UUID  `json:"idLT,omitempty"`
	IDLTE   *uuid.UUID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "title" field predicates.
	Title             *string  `json:"title,omitempty"`
	TitleNEQ          *string  `json:"titleNEQ,omitempty"`
	TitleIn           []string `json:"titleIn,omitempty"`
	TitleNotIn        []string `json:"titleNotIn,omitempty"`
	TitleGT           *string  `json:"titleGT,omitempty"`
	TitleGTE          *string  `json:"titleGTE,omitempty"`
	TitleLT           *string  `json:"titleLT,omitempty"`
	TitleLTE          *string  `json:"titleLTE,omitempty"`
	TitleContains     *string  `json:"titleContains,omitempty"`
	TitleHasPrefix    *string  `json:"titleHasPrefix,omitempty"`
	TitleHasSuffix    *string  `json:"titleHasSuffix,omitempty"`
	TitleEqualFold    *string  `json:"titleEqualFold,omitempty"`
	TitleContainsFold *string  `json:"titleContainsFold,omitempty"`

	// "lat" field predicates.
	Lat             *string  `json:"lat,omitempty"`
	LatNEQ          *string  `json:"latNEQ,omitempty"`
	LatIn           []string `json:"latIn,omitempty"`
	LatNotIn        []string `json:"latNotIn,omitempty"`
	LatGT           *string  `json:"latGT,omitempty"`
	LatGTE          *string  `json:"latGTE,omitempty"`
	LatLT           *string  `json:"latLT,omitempty"`
	LatLTE          *string  `json:"latLTE,omitempty"`
	LatContains     *string  `json:"latContains,omitempty"`
	LatHasPrefix    *string  `json:"latHasPrefix,omitempty"`
	LatHasSuffix    *string  `json:"latHasSuffix,omitempty"`
	LatEqualFold    *string  `json:"latEqualFold,omitempty"`
	LatContainsFold *string  `json:"latContainsFold,omitempty"`

	// "lng" field predicates.
	Lng             *string  `json:"lng,omitempty"`
	LngNEQ          *string  `json:"lngNEQ,omitempty"`
	LngIn           []string `json:"lngIn,omitempty"`
	LngNotIn        []string `json:"lngNotIn,omitempty"`
	LngGT           *string  `json:"lngGT,omitempty"`
	LngGTE          *string  `json:"lngGTE,omitempty"`
	LngLT           *string  `json:"lngLT,omitempty"`
	LngLTE          *string  `json:"lngLTE,omitempty"`
	LngContains     *string  `json:"lngContains,omitempty"`
	LngHasPrefix    *string  `json:"lngHasPrefix,omitempty"`
	LngHasSuffix    *string  `json:"lngHasSuffix,omitempty"`
	LngEqualFold    *string  `json:"lngEqualFold,omitempty"`
	LngContainsFold *string  `json:"lngContainsFold,omitempty"`

	// "post_id" field predicates.
	PostID      *uuid.UUID  `json:"postID,omitempty"`
	PostIDNEQ   *uuid.UUID  `json:"postIDNEQ,omitempty"`
	PostIDIn    []uuid.UUID `json:"postIDIn,omitempty"`
	PostIDNotIn []uuid.UUID `json:"postIDNotIn,omitempty"`

	// "post" edge predicates.
	HasPost     *bool             `json:"hasPost,omitempty"`
	HasPostWith []*PostWhereInput `json:"hasPostWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *MarkerWhereInput) AddPredicates(predicates ...predicate.Marker) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the MarkerWhereInput filter on the MarkerQuery builder.
func (i *MarkerWhereInput) Filter(q *MarkerQuery) (*MarkerQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyMarkerWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyMarkerWhereInput is returned in case the MarkerWhereInput is empty.
var ErrEmptyMarkerWhereInput = errors.New("ent: empty predicate MarkerWhereInput")

// P returns a predicate for filtering markers.
// An error is returned if the input is empty or invalid.
func (i *MarkerWhereInput) P() (predicate.Marker, error) {
	var predicates []predicate.Marker
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, marker.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Marker, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, marker.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Marker, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, marker.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, marker.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, marker.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, marker.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, marker.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, marker.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, marker.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, marker.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, marker.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, marker.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, marker.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, marker.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, marker.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, marker.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, marker.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, marker.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, marker.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, marker.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, marker.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, marker.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, marker.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, marker.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, marker.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, marker.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, marker.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Title != nil {
		predicates = append(predicates, marker.TitleEQ(*i.Title))
	}
	if i.TitleNEQ != nil {
		predicates = append(predicates, marker.TitleNEQ(*i.TitleNEQ))
	}
	if len(i.TitleIn) > 0 {
		predicates = append(predicates, marker.TitleIn(i.TitleIn...))
	}
	if len(i.TitleNotIn) > 0 {
		predicates = append(predicates, marker.TitleNotIn(i.TitleNotIn...))
	}
	if i.TitleGT != nil {
		predicates = append(predicates, marker.TitleGT(*i.TitleGT))
	}
	if i.TitleGTE != nil {
		predicates = append(predicates, marker.TitleGTE(*i.TitleGTE))
	}
	if i.TitleLT != nil {
		predicates = append(predicates, marker.TitleLT(*i.TitleLT))
	}
	if i.TitleLTE != nil {
		predicates = append(predicates, marker.TitleLTE(*i.TitleLTE))
	}
	if i.TitleContains != nil {
		predicates = append(predicates, marker.TitleContains(*i.TitleContains))
	}
	if i.TitleHasPrefix != nil {
		predicates = append(predicates, marker.TitleHasPrefix(*i.TitleHasPrefix))
	}
	if i.TitleHasSuffix != nil {
		predicates = append(predicates, marker.TitleHasSuffix(*i.TitleHasSuffix))
	}
	if i.TitleEqualFold != nil {
		predicates = append(predicates, marker.TitleEqualFold(*i.TitleEqualFold))
	}
	if i.TitleContainsFold != nil {
		predicates = append(predicates, marker.TitleContainsFold(*i.TitleContainsFold))
	}
	if i.Lat != nil {
		predicates = append(predicates, marker.LatEQ(*i.Lat))
	}
	if i.LatNEQ != nil {
		predicates = append(predicates, marker.LatNEQ(*i.LatNEQ))
	}
	if len(i.LatIn) > 0 {
		predicates = append(predicates, marker.LatIn(i.LatIn...))
	}
	if len(i.LatNotIn) > 0 {
		predicates = append(predicates, marker.LatNotIn(i.LatNotIn...))
	}
	if i.LatGT != nil {
		predicates = append(predicates, marker.LatGT(*i.LatGT))
	}
	if i.LatGTE != nil {
		predicates = append(predicates, marker.LatGTE(*i.LatGTE))
	}
	if i.LatLT != nil {
		predicates = append(predicates, marker.LatLT(*i.LatLT))
	}
	if i.LatLTE != nil {
		predicates = append(predicates, marker.LatLTE(*i.LatLTE))
	}
	if i.LatContains != nil {
		predicates = append(predicates, marker.LatContains(*i.LatContains))
	}
	if i.LatHasPrefix != nil {
		predicates = append(predicates, marker.LatHasPrefix(*i.LatHasPrefix))
	}
	if i.LatHasSuffix != nil {
		predicates = append(predicates, marker.LatHasSuffix(*i.LatHasSuffix))
	}
	if i.LatEqualFold != nil {
		predicates = append(predicates, marker.LatEqualFold(*i.LatEqualFold))
	}
	if i.LatContainsFold != nil {
		predicates = append(predicates, marker.LatContainsFold(*i.LatContainsFold))
	}
	if i.Lng != nil {
		predicates = append(predicates, marker.LngEQ(*i.Lng))
	}
	if i.LngNEQ != nil {
		predicates = append(predicates, marker.LngNEQ(*i.LngNEQ))
	}
	if len(i.LngIn) > 0 {
		predicates = append(predicates, marker.LngIn(i.LngIn...))
	}
	if len(i.LngNotIn) > 0 {
		predicates = append(predicates, marker.LngNotIn(i.LngNotIn...))
	}
	if i.LngGT != nil {
		predicates = append(predicates, marker.LngGT(*i.LngGT))
	}
	if i.LngGTE != nil {
		predicates = append(predicates, marker.LngGTE(*i.LngGTE))
	}
	if i.LngLT != nil {
		predicates = append(predicates, marker.LngLT(*i.LngLT))
	}
	if i.LngLTE != nil {
		predicates = append(predicates, marker.LngLTE(*i.LngLTE))
	}
	if i.LngContains != nil {
		predicates = append(predicates, marker.LngContains(*i.LngContains))
	}
	if i.LngHasPrefix != nil {
		predicates = append(predicates, marker.LngHasPrefix(*i.LngHasPrefix))
	}
	if i.LngHasSuffix != nil {
		predicates = append(predicates, marker.LngHasSuffix(*i.LngHasSuffix))
	}
	if i.LngEqualFold != nil {
		predicates = append(predicates, marker.LngEqualFold(*i.LngEqualFold))
	}
	if i.LngContainsFold != nil {
		predicates = append(predicates, marker.LngContainsFold(*i.LngContainsFold))
	}
	if i.PostID != nil {
		predicates = append(predicates, marker.PostIDEQ(*i.PostID))
	}
	if i.PostIDNEQ != nil {
		predicates = append(predicates, marker.PostIDNEQ(*i.PostIDNEQ))
	}
	if len(i.PostIDIn) > 0 {
		predicates = append(predicates, marker.PostIDIn(i.PostIDIn...))
	}
	if len(i.PostIDNotIn) > 0 {
		predicates = append(predicates, marker.PostIDNotIn(i.PostIDNotIn...))
	}

	if i.HasPost != nil {
		p := marker.HasPost()
		if !*i.HasPost {
			p = marker.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPostWith) > 0 {
		with := make([]predicate.Post, 0, len(i.HasPostWith))
		for _, w := range i.HasPostWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPostWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, marker.HasPostWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyMarkerWhereInput
	case 1:
		return predicates[0], nil
	default:
		return marker.And(predicates...), nil
	}
}

// MuteWhereInput represents a where input for filtering Mute queries.
type MuteWhereInput struct {
	Predicates []predicate.Mute  `json:"-"`
	Not        *MuteWhereInput   `json:"not,omitempty"`
	Or         []*MuteWhereInput `json:"or,omitempty"`
	And        []*MuteWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *uuid.UUID  `json:"id,omitempty"`
	IDNEQ   *uuid.UUID  `json:"idNEQ,omitempty"`
	IDIn    []uuid.UUID `json:"idIn,omitempty"`
	IDNotIn []uuid.UUID `json:"idNotIn,omitempty"`
	IDGT    *uuid.UUID  `json:"idGT,omitempty"`
	IDGTE   *uuid.UUID  `json:"idGTE,omitempty"`
	IDLT    *uuid.UUID  `json:"idLT,omitempty"`
	IDLTE   *uuid.UUID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "account_id" field predicates.
	AccountID      *uuid.UUID  `json:"accountID,omitempty"`
	AccountIDNEQ   *uuid.UUID  `json:"accountIDNEQ,omitempty"`
	AccountIDIn    []uuid.UUID `json:"accountIDIn,omitempty"`
	AccountIDNotIn []uuid.UUID `json:"accountIDNotIn,omitempty"`

	// "mute_id" field predicates.
	MuteID      *uuid.UUID  `json:"muteID,omitempty"`
	MuteIDNEQ   *uuid.UUID  `json:"muteIDNEQ,omitempty"`
	MuteIDIn    []uuid.UUID `json:"muteIDIn,omitempty"`
	MuteIDNotIn []uuid.UUID `json:"muteIDNotIn,omitempty"`

	// "account" edge predicates.
	HasAccount     *bool                `json:"hasAccount,omitempty"`
	HasAccountWith []*AccountWhereInput `json:"hasAccountWith,omitempty"`

	// "mute" edge predicates.
	HasMute     *bool                `json:"hasMute,omitempty"`
	HasMuteWith []*AccountWhereInput `json:"hasMuteWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *MuteWhereInput) AddPredicates(predicates ...predicate.Mute) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the MuteWhereInput filter on the MuteQuery builder.
func (i *MuteWhereInput) Filter(q *MuteQuery) (*MuteQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyMuteWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyMuteWhereInput is returned in case the MuteWhereInput is empty.
var ErrEmptyMuteWhereInput = errors.New("ent: empty predicate MuteWhereInput")

// P returns a predicate for filtering mutes.
// An error is returned if the input is empty or invalid.
func (i *MuteWhereInput) P() (predicate.Mute, error) {
	var predicates []predicate.Mute
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, mute.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Mute, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, mute.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Mute, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, mute.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, mute.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, mute.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, mute.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, mute.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, mute.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, mute.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, mute.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, mute.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, mute.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, mute.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, mute.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, mute.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, mute.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, mute.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, mute.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, mute.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, mute.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, mute.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, mute.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, mute.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, mute.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, mute.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, mute.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, mute.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.AccountID != nil {
		predicates = append(predicates, mute.AccountIDEQ(*i.AccountID))
	}
	if i.AccountIDNEQ != nil {
		predicates = append(predicates, mute.AccountIDNEQ(*i.AccountIDNEQ))
	}
	if len(i.AccountIDIn) > 0 {
		predicates = append(predicates, mute.AccountIDIn(i.AccountIDIn...))
	}
	if len(i.AccountIDNotIn) > 0 {
		predicates = append(predicates, mute.AccountIDNotIn(i.AccountIDNotIn...))
	}
	if i.MuteID != nil {
		predicates = append(predicates, mute.MuteIDEQ(*i.MuteID))
	}
	if i.MuteIDNEQ != nil {
		predicates = append(predicates, mute.MuteIDNEQ(*i.MuteIDNEQ))
	}
	if len(i.MuteIDIn) > 0 {
		predicates = append(predicates, mute.MuteIDIn(i.MuteIDIn...))
	}
	if len(i.MuteIDNotIn) > 0 {
		predicates = append(predicates, mute.MuteIDNotIn(i.MuteIDNotIn...))
	}

	if i.HasAccount != nil {
		p := mute.HasAccount()
		if !*i.HasAccount {
			p = mute.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasAccountWith) > 0 {
		with := make([]predicate.Account, 0, len(i.HasAccountWith))
		for _, w := range i.HasAccountWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasAccountWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, mute.HasAccountWith(with...))
	}
	if i.HasMute != nil {
		p := mute.HasMute()
		if !*i.HasMute {
			p = mute.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasMuteWith) > 0 {
		with := make([]predicate.Account, 0, len(i.HasMuteWith))
		for _, w := range i.HasMuteWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasMuteWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, mute.HasMuteWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyMuteWhereInput
	case 1:
		return predicates[0], nil
	default:
		return mute.And(predicates...), nil
	}
}

// PostWhereInput represents a where input for filtering Post queries.
type PostWhereInput struct {
	Predicates []predicate.Post  `json:"-"`
	Not        *PostWhereInput   `json:"not,omitempty"`
	Or         []*PostWhereInput `json:"or,omitempty"`
	And        []*PostWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *uuid.UUID  `json:"id,omitempty"`
	IDNEQ   *uuid.UUID  `json:"idNEQ,omitempty"`
	IDIn    []uuid.UUID `json:"idIn,omitempty"`
	IDNotIn []uuid.UUID `json:"idNotIn,omitempty"`
	IDGT    *uuid.UUID  `json:"idGT,omitempty"`
	IDGTE   *uuid.UUID  `json:"idGTE,omitempty"`
	IDLT    *uuid.UUID  `json:"idLT,omitempty"`
	IDLTE   *uuid.UUID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "title" field predicates.
	Title             *string  `json:"title,omitempty"`
	TitleNEQ          *string  `json:"titleNEQ,omitempty"`
	TitleIn           []string `json:"titleIn,omitempty"`
	TitleNotIn        []string `json:"titleNotIn,omitempty"`
	TitleGT           *string  `json:"titleGT,omitempty"`
	TitleGTE          *string  `json:"titleGTE,omitempty"`
	TitleLT           *string  `json:"titleLT,omitempty"`
	TitleLTE          *string  `json:"titleLTE,omitempty"`
	TitleContains     *string  `json:"titleContains,omitempty"`
	TitleHasPrefix    *string  `json:"titleHasPrefix,omitempty"`
	TitleHasSuffix    *string  `json:"titleHasSuffix,omitempty"`
	TitleEqualFold    *string  `json:"titleEqualFold,omitempty"`
	TitleContainsFold *string  `json:"titleContainsFold,omitempty"`

	// "body" field predicates.
	Body             *string  `json:"body,omitempty"`
	BodyNEQ          *string  `json:"bodyNEQ,omitempty"`
	BodyIn           []string `json:"bodyIn,omitempty"`
	BodyNotIn        []string `json:"bodyNotIn,omitempty"`
	BodyGT           *string  `json:"bodyGT,omitempty"`
	BodyGTE          *string  `json:"bodyGTE,omitempty"`
	BodyLT           *string  `json:"bodyLT,omitempty"`
	BodyLTE          *string  `json:"bodyLTE,omitempty"`
	BodyContains     *string  `json:"bodyContains,omitempty"`
	BodyHasPrefix    *string  `json:"bodyHasPrefix,omitempty"`
	BodyHasSuffix    *string  `json:"bodyHasSuffix,omitempty"`
	BodyEqualFold    *string  `json:"bodyEqualFold,omitempty"`
	BodyContainsFold *string  `json:"bodyContainsFold,omitempty"`

	// "img" field predicates.
	Img             *string  `json:"img,omitempty"`
	ImgNEQ          *string  `json:"imgNEQ,omitempty"`
	ImgIn           []string `json:"imgIn,omitempty"`
	ImgNotIn        []string `json:"imgNotIn,omitempty"`
	ImgGT           *string  `json:"imgGT,omitempty"`
	ImgGTE          *string  `json:"imgGTE,omitempty"`
	ImgLT           *string  `json:"imgLT,omitempty"`
	ImgLTE          *string  `json:"imgLTE,omitempty"`
	ImgContains     *string  `json:"imgContains,omitempty"`
	ImgHasPrefix    *string  `json:"imgHasPrefix,omitempty"`
	ImgHasSuffix    *string  `json:"imgHasSuffix,omitempty"`
	ImgEqualFold    *string  `json:"imgEqualFold,omitempty"`
	ImgContainsFold *string  `json:"imgContainsFold,omitempty"`

	// "account_id" field predicates.
	AccountID      *uuid.UUID  `json:"accountID,omitempty"`
	AccountIDNEQ   *uuid.UUID  `json:"accountIDNEQ,omitempty"`
	AccountIDIn    []uuid.UUID `json:"accountIDIn,omitempty"`
	AccountIDNotIn []uuid.UUID `json:"accountIDNotIn,omitempty"`

	// "comments" edge predicates.
	HasComments     *bool                `json:"hasComments,omitempty"`
	HasCommentsWith []*CommentWhereInput `json:"hasCommentsWith,omitempty"`

	// "marker" edge predicates.
	HasMarker     *bool               `json:"hasMarker,omitempty"`
	HasMarkerWith []*MarkerWhereInput `json:"hasMarkerWith,omitempty"`

	// "account" edge predicates.
	HasAccount     *bool                `json:"hasAccount,omitempty"`
	HasAccountWith []*AccountWhereInput `json:"hasAccountWith,omitempty"`

	// "likes" edge predicates.
	HasLikes     *bool             `json:"hasLikes,omitempty"`
	HasLikesWith []*LikeWhereInput `json:"hasLikesWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *PostWhereInput) AddPredicates(predicates ...predicate.Post) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the PostWhereInput filter on the PostQuery builder.
func (i *PostWhereInput) Filter(q *PostQuery) (*PostQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyPostWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyPostWhereInput is returned in case the PostWhereInput is empty.
var ErrEmptyPostWhereInput = errors.New("ent: empty predicate PostWhereInput")

// P returns a predicate for filtering posts.
// An error is returned if the input is empty or invalid.
func (i *PostWhereInput) P() (predicate.Post, error) {
	var predicates []predicate.Post
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, post.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Post, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, post.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Post, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, post.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, post.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, post.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, post.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, post.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, post.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, post.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, post.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, post.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, post.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, post.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, post.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, post.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, post.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, post.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, post.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, post.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, post.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, post.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, post.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, post.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, post.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, post.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, post.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, post.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Title != nil {
		predicates = append(predicates, post.TitleEQ(*i.Title))
	}
	if i.TitleNEQ != nil {
		predicates = append(predicates, post.TitleNEQ(*i.TitleNEQ))
	}
	if len(i.TitleIn) > 0 {
		predicates = append(predicates, post.TitleIn(i.TitleIn...))
	}
	if len(i.TitleNotIn) > 0 {
		predicates = append(predicates, post.TitleNotIn(i.TitleNotIn...))
	}
	if i.TitleGT != nil {
		predicates = append(predicates, post.TitleGT(*i.TitleGT))
	}
	if i.TitleGTE != nil {
		predicates = append(predicates, post.TitleGTE(*i.TitleGTE))
	}
	if i.TitleLT != nil {
		predicates = append(predicates, post.TitleLT(*i.TitleLT))
	}
	if i.TitleLTE != nil {
		predicates = append(predicates, post.TitleLTE(*i.TitleLTE))
	}
	if i.TitleContains != nil {
		predicates = append(predicates, post.TitleContains(*i.TitleContains))
	}
	if i.TitleHasPrefix != nil {
		predicates = append(predicates, post.TitleHasPrefix(*i.TitleHasPrefix))
	}
	if i.TitleHasSuffix != nil {
		predicates = append(predicates, post.TitleHasSuffix(*i.TitleHasSuffix))
	}
	if i.TitleEqualFold != nil {
		predicates = append(predicates, post.TitleEqualFold(*i.TitleEqualFold))
	}
	if i.TitleContainsFold != nil {
		predicates = append(predicates, post.TitleContainsFold(*i.TitleContainsFold))
	}
	if i.Body != nil {
		predicates = append(predicates, post.BodyEQ(*i.Body))
	}
	if i.BodyNEQ != nil {
		predicates = append(predicates, post.BodyNEQ(*i.BodyNEQ))
	}
	if len(i.BodyIn) > 0 {
		predicates = append(predicates, post.BodyIn(i.BodyIn...))
	}
	if len(i.BodyNotIn) > 0 {
		predicates = append(predicates, post.BodyNotIn(i.BodyNotIn...))
	}
	if i.BodyGT != nil {
		predicates = append(predicates, post.BodyGT(*i.BodyGT))
	}
	if i.BodyGTE != nil {
		predicates = append(predicates, post.BodyGTE(*i.BodyGTE))
	}
	if i.BodyLT != nil {
		predicates = append(predicates, post.BodyLT(*i.BodyLT))
	}
	if i.BodyLTE != nil {
		predicates = append(predicates, post.BodyLTE(*i.BodyLTE))
	}
	if i.BodyContains != nil {
		predicates = append(predicates, post.BodyContains(*i.BodyContains))
	}
	if i.BodyHasPrefix != nil {
		predicates = append(predicates, post.BodyHasPrefix(*i.BodyHasPrefix))
	}
	if i.BodyHasSuffix != nil {
		predicates = append(predicates, post.BodyHasSuffix(*i.BodyHasSuffix))
	}
	if i.BodyEqualFold != nil {
		predicates = append(predicates, post.BodyEqualFold(*i.BodyEqualFold))
	}
	if i.BodyContainsFold != nil {
		predicates = append(predicates, post.BodyContainsFold(*i.BodyContainsFold))
	}
	if i.Img != nil {
		predicates = append(predicates, post.ImgEQ(*i.Img))
	}
	if i.ImgNEQ != nil {
		predicates = append(predicates, post.ImgNEQ(*i.ImgNEQ))
	}
	if len(i.ImgIn) > 0 {
		predicates = append(predicates, post.ImgIn(i.ImgIn...))
	}
	if len(i.ImgNotIn) > 0 {
		predicates = append(predicates, post.ImgNotIn(i.ImgNotIn...))
	}
	if i.ImgGT != nil {
		predicates = append(predicates, post.ImgGT(*i.ImgGT))
	}
	if i.ImgGTE != nil {
		predicates = append(predicates, post.ImgGTE(*i.ImgGTE))
	}
	if i.ImgLT != nil {
		predicates = append(predicates, post.ImgLT(*i.ImgLT))
	}
	if i.ImgLTE != nil {
		predicates = append(predicates, post.ImgLTE(*i.ImgLTE))
	}
	if i.ImgContains != nil {
		predicates = append(predicates, post.ImgContains(*i.ImgContains))
	}
	if i.ImgHasPrefix != nil {
		predicates = append(predicates, post.ImgHasPrefix(*i.ImgHasPrefix))
	}
	if i.ImgHasSuffix != nil {
		predicates = append(predicates, post.ImgHasSuffix(*i.ImgHasSuffix))
	}
	if i.ImgEqualFold != nil {
		predicates = append(predicates, post.ImgEqualFold(*i.ImgEqualFold))
	}
	if i.ImgContainsFold != nil {
		predicates = append(predicates, post.ImgContainsFold(*i.ImgContainsFold))
	}
	if i.AccountID != nil {
		predicates = append(predicates, post.AccountIDEQ(*i.AccountID))
	}
	if i.AccountIDNEQ != nil {
		predicates = append(predicates, post.AccountIDNEQ(*i.AccountIDNEQ))
	}
	if len(i.AccountIDIn) > 0 {
		predicates = append(predicates, post.AccountIDIn(i.AccountIDIn...))
	}
	if len(i.AccountIDNotIn) > 0 {
		predicates = append(predicates, post.AccountIDNotIn(i.AccountIDNotIn...))
	}

	if i.HasComments != nil {
		p := post.HasComments()
		if !*i.HasComments {
			p = post.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCommentsWith) > 0 {
		with := make([]predicate.Comment, 0, len(i.HasCommentsWith))
		for _, w := range i.HasCommentsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCommentsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, post.HasCommentsWith(with...))
	}
	if i.HasMarker != nil {
		p := post.HasMarker()
		if !*i.HasMarker {
			p = post.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasMarkerWith) > 0 {
		with := make([]predicate.Marker, 0, len(i.HasMarkerWith))
		for _, w := range i.HasMarkerWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasMarkerWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, post.HasMarkerWith(with...))
	}
	if i.HasAccount != nil {
		p := post.HasAccount()
		if !*i.HasAccount {
			p = post.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasAccountWith) > 0 {
		with := make([]predicate.Account, 0, len(i.HasAccountWith))
		for _, w := range i.HasAccountWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasAccountWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, post.HasAccountWith(with...))
	}
	if i.HasLikes != nil {
		p := post.HasLikes()
		if !*i.HasLikes {
			p = post.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasLikesWith) > 0 {
		with := make([]predicate.Like, 0, len(i.HasLikesWith))
		for _, w := range i.HasLikesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasLikesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, post.HasLikesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyPostWhereInput
	case 1:
		return predicates[0], nil
	default:
		return post.And(predicates...), nil
	}
}

// RequestWhereInput represents a where input for filtering Request queries.
type RequestWhereInput struct {
	Predicates []predicate.Request  `json:"-"`
	Not        *RequestWhereInput   `json:"not,omitempty"`
	Or         []*RequestWhereInput `json:"or,omitempty"`
	And        []*RequestWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *uuid.UUID  `json:"id,omitempty"`
	IDNEQ   *uuid.UUID  `json:"idNEQ,omitempty"`
	IDIn    []uuid.UUID `json:"idIn,omitempty"`
	IDNotIn []uuid.UUID `json:"idNotIn,omitempty"`
	IDGT    *uuid.UUID  `json:"idGT,omitempty"`
	IDGTE   *uuid.UUID  `json:"idGTE,omitempty"`
	IDLT    *uuid.UUID  `json:"idLT,omitempty"`
	IDLTE   *uuid.UUID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "account_id" field predicates.
	AccountID      *uuid.UUID  `json:"accountID,omitempty"`
	AccountIDNEQ   *uuid.UUID  `json:"accountIDNEQ,omitempty"`
	AccountIDIn    []uuid.UUID `json:"accountIDIn,omitempty"`
	AccountIDNotIn []uuid.UUID `json:"accountIDNotIn,omitempty"`

	// "request_id" field predicates.
	RequestID      *uuid.UUID  `json:"requestID,omitempty"`
	RequestIDNEQ   *uuid.UUID  `json:"requestIDNEQ,omitempty"`
	RequestIDIn    []uuid.UUID `json:"requestIDIn,omitempty"`
	RequestIDNotIn []uuid.UUID `json:"requestIDNotIn,omitempty"`

	// "status" field predicates.
	Status      *request.Status  `json:"status,omitempty"`
	StatusNEQ   *request.Status  `json:"statusNEQ,omitempty"`
	StatusIn    []request.Status `json:"statusIn,omitempty"`
	StatusNotIn []request.Status `json:"statusNotIn,omitempty"`

	// "account" edge predicates.
	HasAccount     *bool                `json:"hasAccount,omitempty"`
	HasAccountWith []*AccountWhereInput `json:"hasAccountWith,omitempty"`

	// "request" edge predicates.
	HasRequest     *bool                `json:"hasRequest,omitempty"`
	HasRequestWith []*AccountWhereInput `json:"hasRequestWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *RequestWhereInput) AddPredicates(predicates ...predicate.Request) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the RequestWhereInput filter on the RequestQuery builder.
func (i *RequestWhereInput) Filter(q *RequestQuery) (*RequestQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyRequestWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyRequestWhereInput is returned in case the RequestWhereInput is empty.
var ErrEmptyRequestWhereInput = errors.New("ent: empty predicate RequestWhereInput")

// P returns a predicate for filtering requests.
// An error is returned if the input is empty or invalid.
func (i *RequestWhereInput) P() (predicate.Request, error) {
	var predicates []predicate.Request
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, request.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Request, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, request.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Request, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, request.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, request.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, request.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, request.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, request.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, request.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, request.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, request.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, request.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, request.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, request.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, request.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, request.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, request.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, request.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, request.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, request.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, request.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, request.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, request.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, request.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, request.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, request.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, request.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, request.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.AccountID != nil {
		predicates = append(predicates, request.AccountIDEQ(*i.AccountID))
	}
	if i.AccountIDNEQ != nil {
		predicates = append(predicates, request.AccountIDNEQ(*i.AccountIDNEQ))
	}
	if len(i.AccountIDIn) > 0 {
		predicates = append(predicates, request.AccountIDIn(i.AccountIDIn...))
	}
	if len(i.AccountIDNotIn) > 0 {
		predicates = append(predicates, request.AccountIDNotIn(i.AccountIDNotIn...))
	}
	if i.RequestID != nil {
		predicates = append(predicates, request.RequestIDEQ(*i.RequestID))
	}
	if i.RequestIDNEQ != nil {
		predicates = append(predicates, request.RequestIDNEQ(*i.RequestIDNEQ))
	}
	if len(i.RequestIDIn) > 0 {
		predicates = append(predicates, request.RequestIDIn(i.RequestIDIn...))
	}
	if len(i.RequestIDNotIn) > 0 {
		predicates = append(predicates, request.RequestIDNotIn(i.RequestIDNotIn...))
	}
	if i.Status != nil {
		predicates = append(predicates, request.StatusEQ(*i.Status))
	}
	if i.StatusNEQ != nil {
		predicates = append(predicates, request.StatusNEQ(*i.StatusNEQ))
	}
	if len(i.StatusIn) > 0 {
		predicates = append(predicates, request.StatusIn(i.StatusIn...))
	}
	if len(i.StatusNotIn) > 0 {
		predicates = append(predicates, request.StatusNotIn(i.StatusNotIn...))
	}

	if i.HasAccount != nil {
		p := request.HasAccount()
		if !*i.HasAccount {
			p = request.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasAccountWith) > 0 {
		with := make([]predicate.Account, 0, len(i.HasAccountWith))
		for _, w := range i.HasAccountWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasAccountWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, request.HasAccountWith(with...))
	}
	if i.HasRequest != nil {
		p := request.HasRequest()
		if !*i.HasRequest {
			p = request.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasRequestWith) > 0 {
		with := make([]predicate.Account, 0, len(i.HasRequestWith))
		for _, w := range i.HasRequestWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasRequestWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, request.HasRequestWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyRequestWhereInput
	case 1:
		return predicates[0], nil
	default:
		return request.And(predicates...), nil
	}
}

// SessionWhereInput represents a where input for filtering Session queries.
type SessionWhereInput struct {
	Predicates []predicate.Session  `json:"-"`
	Not        *SessionWhereInput   `json:"not,omitempty"`
	Or         []*SessionWhereInput `json:"or,omitempty"`
	And        []*SessionWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *uuid.UUID  `json:"id,omitempty"`
	IDNEQ   *uuid.UUID  `json:"idNEQ,omitempty"`
	IDIn    []uuid.UUID `json:"idIn,omitempty"`
	IDNotIn []uuid.UUID `json:"idNotIn,omitempty"`
	IDGT    *uuid.UUID  `json:"idGT,omitempty"`
	IDGTE   *uuid.UUID  `json:"idGTE,omitempty"`
	IDLT    *uuid.UUID  `json:"idLT,omitempty"`
	IDLTE   *uuid.UUID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "account_id" field predicates.
	AccountID      *uuid.UUID  `json:"accountID,omitempty"`
	AccountIDNEQ   *uuid.UUID  `json:"accountIDNEQ,omitempty"`
	AccountIDIn    []uuid.UUID `json:"accountIDIn,omitempty"`
	AccountIDNotIn []uuid.UUID `json:"accountIDNotIn,omitempty"`

	// "session" field predicates.
	Session             *string  `json:"session,omitempty"`
	SessionNEQ          *string  `json:"sessionNEQ,omitempty"`
	SessionIn           []string `json:"sessionIn,omitempty"`
	SessionNotIn        []string `json:"sessionNotIn,omitempty"`
	SessionGT           *string  `json:"sessionGT,omitempty"`
	SessionGTE          *string  `json:"sessionGTE,omitempty"`
	SessionLT           *string  `json:"sessionLT,omitempty"`
	SessionLTE          *string  `json:"sessionLTE,omitempty"`
	SessionContains     *string  `json:"sessionContains,omitempty"`
	SessionHasPrefix    *string  `json:"sessionHasPrefix,omitempty"`
	SessionHasSuffix    *string  `json:"sessionHasSuffix,omitempty"`
	SessionEqualFold    *string  `json:"sessionEqualFold,omitempty"`
	SessionContainsFold *string  `json:"sessionContainsFold,omitempty"`

	// "account" edge predicates.
	HasAccount     *bool                `json:"hasAccount,omitempty"`
	HasAccountWith []*AccountWhereInput `json:"hasAccountWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *SessionWhereInput) AddPredicates(predicates ...predicate.Session) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the SessionWhereInput filter on the SessionQuery builder.
func (i *SessionWhereInput) Filter(q *SessionQuery) (*SessionQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptySessionWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptySessionWhereInput is returned in case the SessionWhereInput is empty.
var ErrEmptySessionWhereInput = errors.New("ent: empty predicate SessionWhereInput")

// P returns a predicate for filtering sessions.
// An error is returned if the input is empty or invalid.
func (i *SessionWhereInput) P() (predicate.Session, error) {
	var predicates []predicate.Session
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, session.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Session, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, session.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Session, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, session.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, session.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, session.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, session.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, session.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, session.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, session.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, session.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, session.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, session.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, session.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, session.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, session.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, session.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, session.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, session.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, session.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, session.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, session.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, session.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, session.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, session.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, session.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, session.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, session.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.AccountID != nil {
		predicates = append(predicates, session.AccountIDEQ(*i.AccountID))
	}
	if i.AccountIDNEQ != nil {
		predicates = append(predicates, session.AccountIDNEQ(*i.AccountIDNEQ))
	}
	if len(i.AccountIDIn) > 0 {
		predicates = append(predicates, session.AccountIDIn(i.AccountIDIn...))
	}
	if len(i.AccountIDNotIn) > 0 {
		predicates = append(predicates, session.AccountIDNotIn(i.AccountIDNotIn...))
	}
	if i.Session != nil {
		predicates = append(predicates, session.SessionEQ(*i.Session))
	}
	if i.SessionNEQ != nil {
		predicates = append(predicates, session.SessionNEQ(*i.SessionNEQ))
	}
	if len(i.SessionIn) > 0 {
		predicates = append(predicates, session.SessionIn(i.SessionIn...))
	}
	if len(i.SessionNotIn) > 0 {
		predicates = append(predicates, session.SessionNotIn(i.SessionNotIn...))
	}
	if i.SessionGT != nil {
		predicates = append(predicates, session.SessionGT(*i.SessionGT))
	}
	if i.SessionGTE != nil {
		predicates = append(predicates, session.SessionGTE(*i.SessionGTE))
	}
	if i.SessionLT != nil {
		predicates = append(predicates, session.SessionLT(*i.SessionLT))
	}
	if i.SessionLTE != nil {
		predicates = append(predicates, session.SessionLTE(*i.SessionLTE))
	}
	if i.SessionContains != nil {
		predicates = append(predicates, session.SessionContains(*i.SessionContains))
	}
	if i.SessionHasPrefix != nil {
		predicates = append(predicates, session.SessionHasPrefix(*i.SessionHasPrefix))
	}
	if i.SessionHasSuffix != nil {
		predicates = append(predicates, session.SessionHasSuffix(*i.SessionHasSuffix))
	}
	if i.SessionEqualFold != nil {
		predicates = append(predicates, session.SessionEqualFold(*i.SessionEqualFold))
	}
	if i.SessionContainsFold != nil {
		predicates = append(predicates, session.SessionContainsFold(*i.SessionContainsFold))
	}

	if i.HasAccount != nil {
		p := session.HasAccount()
		if !*i.HasAccount {
			p = session.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasAccountWith) > 0 {
		with := make([]predicate.Account, 0, len(i.HasAccountWith))
		for _, w := range i.HasAccountWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasAccountWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, session.HasAccountWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptySessionWhereInput
	case 1:
		return predicates[0], nil
	default:
		return session.And(predicates...), nil
	}
}
