// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Katsushi21/travelone/ent/account"
	"github.com/Katsushi21/travelone/ent/predicate"
	"github.com/Katsushi21/travelone/ent/request"
	"github.com/google/uuid"
)

// RequestUpdate is the builder for updating Request entities.
type RequestUpdate struct {
	config
	hooks    []Hook
	mutation *RequestMutation
}

// Where appends a list predicates to the RequestUpdate builder.
func (ru *RequestUpdate) Where(ps ...predicate.Request) *RequestUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RequestUpdate) SetUpdatedAt(t time.Time) *RequestUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetAccountID sets the "account_id" field.
func (ru *RequestUpdate) SetAccountID(u uuid.UUID) *RequestUpdate {
	ru.mutation.SetAccountID(u)
	return ru
}

// SetRequestID sets the "request_id" field.
func (ru *RequestUpdate) SetRequestID(u uuid.UUID) *RequestUpdate {
	ru.mutation.SetRequestID(u)
	return ru
}

// SetStatus sets the "status" field.
func (ru *RequestUpdate) SetStatus(r request.Status) *RequestUpdate {
	ru.mutation.SetStatus(r)
	return ru
}

// SetAccount sets the "account" edge to the Account entity.
func (ru *RequestUpdate) SetAccount(a *Account) *RequestUpdate {
	return ru.SetAccountID(a.ID)
}

// SetRequest sets the "request" edge to the Account entity.
func (ru *RequestUpdate) SetRequest(a *Account) *RequestUpdate {
	return ru.SetRequestID(a.ID)
}

// Mutation returns the RequestMutation object of the builder.
func (ru *RequestUpdate) Mutation() *RequestMutation {
	return ru.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (ru *RequestUpdate) ClearAccount() *RequestUpdate {
	ru.mutation.ClearAccount()
	return ru
}

// ClearRequest clears the "request" edge to the Account entity.
func (ru *RequestUpdate) ClearRequest() *RequestUpdate {
	ru.mutation.ClearRequest()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RequestUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ru.defaults()
	if len(ru.hooks) == 0 {
		if err = ru.check(); err != nil {
			return 0, err
		}
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RequestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ru.check(); err != nil {
				return 0, err
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			if ru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RequestUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RequestUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RequestUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RequestUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := request.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RequestUpdate) check() error {
	if v, ok := ru.mutation.Status(); ok {
		if err := request.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Request.status": %w`, err)}
		}
	}
	if _, ok := ru.mutation.AccountID(); ru.mutation.AccountCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Request.account"`)
	}
	if _, ok := ru.mutation.RequestID(); ru.mutation.RequestCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Request.request"`)
	}
	return nil
}

func (ru *RequestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   request.Table,
			Columns: request.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: request.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: request.FieldUpdatedAt,
		})
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: request.FieldStatus,
		})
	}
	if ru.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   request.AccountTable,
			Columns: []string{request.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: account.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   request.AccountTable,
			Columns: []string{request.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.RequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   request.RequestTable,
			Columns: []string{request.RequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: account.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   request.RequestTable,
			Columns: []string{request.RequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{request.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// RequestUpdateOne is the builder for updating a single Request entity.
type RequestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RequestMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RequestUpdateOne) SetUpdatedAt(t time.Time) *RequestUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetAccountID sets the "account_id" field.
func (ruo *RequestUpdateOne) SetAccountID(u uuid.UUID) *RequestUpdateOne {
	ruo.mutation.SetAccountID(u)
	return ruo
}

// SetRequestID sets the "request_id" field.
func (ruo *RequestUpdateOne) SetRequestID(u uuid.UUID) *RequestUpdateOne {
	ruo.mutation.SetRequestID(u)
	return ruo
}

// SetStatus sets the "status" field.
func (ruo *RequestUpdateOne) SetStatus(r request.Status) *RequestUpdateOne {
	ruo.mutation.SetStatus(r)
	return ruo
}

// SetAccount sets the "account" edge to the Account entity.
func (ruo *RequestUpdateOne) SetAccount(a *Account) *RequestUpdateOne {
	return ruo.SetAccountID(a.ID)
}

// SetRequest sets the "request" edge to the Account entity.
func (ruo *RequestUpdateOne) SetRequest(a *Account) *RequestUpdateOne {
	return ruo.SetRequestID(a.ID)
}

// Mutation returns the RequestMutation object of the builder.
func (ruo *RequestUpdateOne) Mutation() *RequestMutation {
	return ruo.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (ruo *RequestUpdateOne) ClearAccount() *RequestUpdateOne {
	ruo.mutation.ClearAccount()
	return ruo
}

// ClearRequest clears the "request" edge to the Account entity.
func (ruo *RequestUpdateOne) ClearRequest() *RequestUpdateOne {
	ruo.mutation.ClearRequest()
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RequestUpdateOne) Select(field string, fields ...string) *RequestUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Request entity.
func (ruo *RequestUpdateOne) Save(ctx context.Context) (*Request, error) {
	var (
		err  error
		node *Request
	)
	ruo.defaults()
	if len(ruo.hooks) == 0 {
		if err = ruo.check(); err != nil {
			return nil, err
		}
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RequestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ruo.check(); err != nil {
				return nil, err
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			if ruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Request)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RequestMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RequestUpdateOne) SaveX(ctx context.Context) *Request {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RequestUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RequestUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RequestUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := request.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RequestUpdateOne) check() error {
	if v, ok := ruo.mutation.Status(); ok {
		if err := request.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Request.status": %w`, err)}
		}
	}
	if _, ok := ruo.mutation.AccountID(); ruo.mutation.AccountCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Request.account"`)
	}
	if _, ok := ruo.mutation.RequestID(); ruo.mutation.RequestCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Request.request"`)
	}
	return nil
}

func (ruo *RequestUpdateOne) sqlSave(ctx context.Context) (_node *Request, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   request.Table,
			Columns: request.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: request.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Request.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, request.FieldID)
		for _, f := range fields {
			if !request.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != request.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: request.FieldUpdatedAt,
		})
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: request.FieldStatus,
		})
	}
	if ruo.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   request.AccountTable,
			Columns: []string{request.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: account.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   request.AccountTable,
			Columns: []string{request.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.RequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   request.RequestTable,
			Columns: []string{request.RequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: account.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   request.RequestTable,
			Columns: []string{request.RequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Request{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{request.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
